Tylko pamiętajcie, żeby to robił wykładowca, bo wtedy jest to już wygodniejsze.
Dobra, poszło. Okej.
To patrzymy, jak to wygląda grupa. Kto się jeszcze czeka?
Jeszcze parę osób, cztery osoby. Dajmy im szansę.
Od następnego razu te zajęcia będą w kalendarzu, już tam dzień, dwa wcześniej.
Okej, dobra.
Okej.
Tu ja sobie to nieco przygotuję.
Jeszcze widzę, raz, dwa, trzy, cztery osoby. Dajmy im szansę.
Okej.
Dzień dobry, ja chciałem zapytać w ogóle, czy, bo ja dzisiaj mam tak, że po tych zajęciach muszę być 15 minut później na uczelni.
No.
Więc gdybym przez ostatnie 15-20 minut tylko słuchał, to nie będzie problemu?
Znaczy się, słuchajcie, nie, no nie będzie. Pamiętajcie, że jeżeli chodzi o regulamin, nie zapominajcie o jednej rzeczy, że
wiele rzeczy myśmy nauczyli.
Jak to się mówi, zcyfryzowali i obecność to wam robi Teams i Ubi.
Ja jestem tylko, że tak powiem, wiernym użytkownikiem tego systemu.
I tak jak wam napisałem, dostaliście, bo ja napisałem tam na Ubi, wiesz, mam takie ogólne, przepraszam, ogólne zasady.
Dostaliście tego, dostaliście mailem tam sygnał, że na Ubiku jest opis tam zaliczenia, oceny i tak dalej. Dostaliście coś takiego?
Tak, dostaliśmy.
Także generalnie jest tak, w dużym skrócie.
Zasady są, ja staram się, żeby te zasady były proste.
I dla was zrozumiałe. Jak ktoś czegoś tam nie jest pewien, to niech pyta.
Natomiast, no, te zasady to są takie, że wy jesteście w stanie sami się ocenić, beze mnie.
Dlatego są proste.
Pamiętajcie, że generalnie na uczelni regulamin jest taki, że wy jesteście w stanie sami się ocenić, beze mnie. Dlatego są proste.
Pamiętajcie, że generalnie na uczelni regulamin jest taki, że wy jesteście w stanie sami się ocenić, beze mnie.
Natomiast na uczelni regulamin oznacza minimum 70% czasu na zajęciach.
Ja oczywiście, jak się domyślacie, mam prawo każdego z was wywołać do odpowiedzi, szczególnie na laboratorium.
Ja oczywiście, jak się domyślacie, mam prawo każdego z was wywołać do odpowiedzi, szczególnie na laboratorium.
I miejcie świadomość, że jeżeli chodzi już o mnie, tak, nie to, że was straszę.
I miejcie świadomość, że jeżeli chodzi już o mnie, tak, nie to, że was straszę.
Uczcie się również przestrzegać reguł, tak.
Przedmiot, który się nazywa laboratorium, inżynierię programowania, to jest po części nauka o tym, jak działają systemy.
Przypominam, że nie tylko komputer jest systemem
Systemem jest system ubezpieczeń
Systemem jest system prawny
I systemem jest również regulamin studiów na uczelni
Uczelnia to jest system
Są studenci, są wykładowcy, są zasady
I to się wszystko ładnie kręci
Kręci się ładnie pod warunkiem, że wszyscy przestrzegają zasad
I proste, nie?
Także pamiętajcie, że 69% obecności na zajęciach
Nie zalicza zajęć
To jest nieobecność
A jak ja kogoś wywołam i się nie odezwie
To znaczy, że go nie ma
I ja go wylogowuję wtedy
Jakieś pytania jeszcze?
No właśnie dlatego chciałem zapytać
Czy gdybym ja konkretnie przez ostatnie 20 minut
Nie odpowiadał
Będę musiał wyjechać na uczelnię
Słuchajcie
Generalnie tak
Napisz na czacie
Do mnie
Że to jesteś ty
Ja sobie to zapamiętam
Bo ja mogę komuś ręcznie
Zostawić obecność
Robię to w wyjątkowych sytuacjach
I ta ręczna wstawianie obecności
Nie jest po to, żeby omieniać regulamin
Także to jeszcze taka sugestia
Nie wiem, czy to dostali tylko wykładowcy
Czy wy też
Generalnie jest tak
Nawet jeżeli zajęcia są zdalnie
Bo na przykład ze mną są wszystkie
To taka też na przyszłość
Ze mną są zajęcia wszystkie zdalne
Powód jest prosty
Ja jestem tak mniej więcej półtora tysiąca kilometrów od Warszawy
I uczelnia
Nie jedę
Na uczelni te zajęcia hybrydowe będą dosyć długo trwały
Albo i zawsze
Uczelnia gwarantuje studentom
Że na wypadek gdyby ktoś
Nie miał warunków w domu
Nie każdy musi mieć komputer zdolny do używania
Tego Visual Paradigm
Różne są przypadłości
Albo jest tak, że ktoś ma zajęcia
Za 10 sekund w sąsiedniej sali
Każdy z was może przyjść na uczelnię
I na przykład zajęcia ze mną
Sobie odsiedzieć w jakiejś sali laboratoryjnej
Zawsze jest jakaś wolna
I tyle
Pamiętajcie o tym
Bo ja mam świadomość tego, że przejście
Na przykład jeżeli załóżmy
Ktoś mieszka na Pradze
I ma za 15 minut zajęcia na Nowelskiej
To będzie duże wyzwanie logistyczne
Także
Uczelnia wam gwarantuje
Zapewnia wam warunki do pracy
Do nauki i tak dalej
Korzystajcie z tego
Do dzisiaj jeszcze macie tę taryfę ulgową
Ale jeżeli uczelnia wam daje warunki do nauki
To wy z nich korzystacie
Albo macie problem
Także
Dobra
Dzisiaj odpuszczam
Uczcie się przestrzegać zasad
To jest tak jak na autostradzie
Temat rzeka
Ja jeszcze wam nieraz
Pewnie jakąś wstawkę z uczciwości i etyki wstawię
No tak mam
Ale
Nie uczcie się tego czego się nauczyli
Na przykład polscy kierowcy
Że 140 na autostradzie oznacza
Że 180 jeszcze można jechać
A 50 w mieście oznacza
Że przy 60 też dacie radę
Bo jakbyście pojechali do Szwecji
I przejdziecie przez wieś
51 na godzinę
To wam zabiorą prawo jazdy na 3 miesiące
A tu na wyspach dostaniecie
Mandat w wysokości 1 trzeciej wynagrodzenia
Gdybyście zrobili mało
Tu dzisiaj nikt nie dyskutuje
Jeżeli jest ograniczenie do 50
To normalni ludzie jeżdżą 49
Na wszelki wypadek
A Polacy jeżdżą 55
I mają potężne mandaty
Tak?
To wam powiem, że nie ogarniam zjawiska
W poprzednim miejscu jak mieszkałem
Jeden z sąsiadów Polak
Ja tam mieszkałem prawie 3 lata
On dostawał jeden mandat tygodniowo
Przychodziła poczta z urzędu, że on łapą mandat
Bo tu są wszędzie kamery i monitoring
Także, ale okej
To nie są zajęcia o tym
O przestrzeganiu reguł
Tak, bo reguły, oprogramowanie to są przede wszystkim reguły
Dobra, słuchajcie
Te zajęcia
Na tych zajęciach zaprojektujemy sobie jakieś oprogramowanie
Zrobimy to bez użycia linijki kodu
Bo celem tych zajęć jest
Nie tylko pokazanie wam, ale nauczenie was
Jak wam się wydaje
A tak w ogóle, bo miałem zapytać
Wy macie, mieliście zajęcia z notacji UML?
Nie
Bo z tego co widzę
To wy macie ze mną chyba tylko laboratorium
Ta grupa, co mi się wydaje, czekajcie
Ja mam dwie grupy laboratoryjne
Z jedną mam wykłady, a z drugą nie
Ja mam z wami wykłady, czy nie?
No nie mam chyba
Nie
No dobra, to dlaczego pytam
Bo parę rzeczy sobie musimy o tym UML-u uzupełnić
Otóż
Spotkaliście się z tą notacją w ogóle gdzieś?
W książce?
Na zajęciach?
Tak
Może w pracy, jak ktoś pracuje?
To taka ciekawostka
Bo to takie, dużo mitów o tej notacji
Przede wszystkim jest w większości przypadków źle używana
Tak
Na tych zajęciach zaprojektujemy oprogramowanie
Jakąś tam aplikację, zaraz sobie ją wymyślimy
Dwa cele są w tych zajęciach
Pierwszy, żebyście się tego nauczyli
To główny cel, żeby nie było niejasności
Druga rzecz, to jak wam się wydaje
Macie zajęcia z programowania, tak?
Znaczy pytam, bo ja
Znaczy mieliśmy, teraz będziemy mieli spytane
Okej
A wcześniej mieliśmy z C++
Okej, dobra, to dobrze
Dlaczego pytam?
Ja nie znam waszych celobusów
Widzę tylko zajęcia, jakie macie ze mną
Nie widzę innych, dlatego pytam
I pewnie jeszcze nie raz o coś zapytam
Otóż, okej, to jak macie zajęcia, mieliście zajęcia z C++
Kolejny mit
Jest ogromna różnica pomiędzy tak zwanym programowaniem obiektowym
W rozumieniu języki
Zorientowane obiektowo
A projektowaniem obiektowym
Zresztą ten, jeszcze ostatnio ten mit
Jest systematycznie rozwiewany
Co to jest paradygmat obiektowy?
Co to znaczy, że aplikacja jest zbudowana obiektowo?
Że system jest obiektowy?
No, to mi powie
Że jest zbudowana na klasach
Jeszcze raz
Jest zbudowana na klasach
No właśnie
Jeżeli mówimy o kodowaniu
To cechą języków obiektowych jest to
Że te kawałki kodu są nazwane klasą
Czym jest klasa?
Strukturą, znaczy
Strukturą danych, tak?
Znaczy
Zestawem atrybutów i metod
Które coś wykonują
W ramach danego obiektu, który go wywołuje
Coś tak, nie więcej
Klasa jest definicją obiektu
Bo to co, jeżeli w kodzie macie zadeklarowaną klasę
To obiektów w tej klasie może być
W pamięci 1, 2, 3, 5 milion, tak?
To będą faktury, to będą setki tysięcy
Jak to będzie jakaś tam funkcja
To być może tylko jedna, tak?
No, z perspektywy kompilatora
Tak
Z perspektywy architektury systemu nie
Programowaliście kiedyś w językach strukturalnych?
Takich jak, nie wiem
Visual Basic jeszcze jest przecież dostępny
Na każdej Windowsowej platformie czy przy Excelu
Orland Pascal
Zwróćcie uwagę, że przeciętny program
Przeciętny język oprogramowania
Ma takie instrukcje jak GoTo i Subroutine, tak?
Pod programy i skok do procedury, nie?
Otóż z perspektywy programisty
Używanie klas niewiele się różni od używania podprogramów
Dodatkowym bajerem jest dziedziczenie
Które jest masakrycznie szkodliwe
Nie wiem czy macie świadomość
Będziemy mówili o wzorcach projektowych
To C++ powstało na początku lat 90
Jako tak naprawdę
Jakby to powiedzieć
Lekkie uporządkowanie metod strukturalnych, tak?
Samo dzielenie kodu na klasy
To jest nic innego jak dzielenie go na jakieś tam nazwane fragmenty
Reużycie kodu
Kiedyś można było sobie robić podprogram
I go modyfikować
W C++ to jest dziedziczenie
Bardzo szkodliwe, o czym się przekonacie zresztą
Otóż paradygmat obiektowy w starych książkach
Mówię starych, to jest początek lat 90
Najczęściej rodowodem jest C++, a potem Java
To tak, żebyście znali historię
C++ to na początku lat 90
I to był język, który łączył metody strukturalne i obiektowe
W C++ można pisać tak samo jak w C
Czyli nie używać klas, pisać strukturalne praplikacje
Tak naprawdę ten język powstał tylko jako drobne ułatwienie
Standardowego, strukturalnego projektowania i pisania
Kilka lat później powstała Java
Bo problem był taki
Że jak się pisały aplikacje w C
I trzeba było zrobić duży system
Bo dopóki ktoś w C pisał system operacyjny
Biblioteki do systemu operacyjnego, sterowniki do dysków twardych
Bomba
Pisanie oprogramowania, które jest tak naprawdę firmwarem jakiegoś sprzętu
To jest pewna klasa systemów
Sterowniki do tego wniosku
Macie świadomość jak jest napisane Windows czy Linux?
Jak być może wiecie Linux jest napisany w C
Nie w C++ tylko w C
Wiecie jak się takie aplikacje pisze?
W dokumencie tekstowym
To jest generalnie tekst
Zwróćcie uwagę, że każdy program rozumiany jako kod źródłowy
To jest proza, to jest tekst
Książka grubości jak jest duży system Harry Pottera
Każdy program komputerowy z perspektywy człowieka to jest książka
To jest normalna liniowa książka
To czy będzie w notatniku, czy w Wordzie, czy w jakiejś aplikacji typu IDE
Nie ma to znaczenia
To po prostu jest tekst
Zwykły, normalny, strukturalny tekst
Jeżeli mówimy o
I teraz jak wam się wydaje
Jeżeli napiszecie oprogramowanie, które tylko i wyłącznie coś robi
Ale w zasadzie nie operuje żadnymi danymi
No bo jak się domyślacie sterownik dysku twardego, sterownik tokarki
Sterownik wtrysku paliwa w samochodzie
Program, który jest tak naprawdę telefonem w waszym smartfonie
Czy one operują na jakichś dużych zestawach danych?
Te programy?
Nie zazwyczaj
Proste instrukcje
Praktycznie żadnych
Macie zestaw instrukcji raz 5, raz 5000
Ale tam w zasadzie nie ma czegoś takiego, że zachowujemy ogromne ilości danych
A po dwóch godzinach, czy po dwóch latach musimy je z powrotem przywołać
I tak się pisało
Generalnie większość oprogramowania
Tego typu
To są zwykłe zestawy instrukcji
Takie wypisane po prostu algorytmy
Lepsze lub gorsze
Problem się pojawił wtedy
W momencie, kiedy ktoś stwierdził
OK, mamy mainframe'y, mamy COBOL'a
Tam są jakieś miliony rekordów
Typu wynagrodzenia, naliczanie kosztów produkcji
I Bóg wie czego jeszcze
I nagle się okazało, że język C
Się do tego absolutnie, kompletnie nie nadaje
Jak ktoś chce napisać sterownik
Do samochodu spalinowego
To C będzie jego zbawieniem
A jakby ktoś chciał napisać prosty program do fakturowania
To sobie w łeb strzeli
Bo cechą systemów biznesowych
Jak już mówię
Co jest kluczową cechą systemów biznesowych?
Banki, sklepy, nie wiem
Sklepy internetowe
Co jest cechą tego oprogramowania?
Stabilność
Eee tam
Znaczy to jest
Stabilność
Znaczy tu łaski nie robię
To są jakościowe wymagania
Ma działać i biznes narzuca
Co ma być robione
Dobra, to o tym też pogadamy
Czym się różni sterownik do pralki
Od systemu finansowo-księgowego?
Ilością danych wykorzystywanych
O, o
Dobry kierunek
Powiedz głośno jeszcze raz
Ilość danych wykorzystywanych
A fakturownia
Dokładnie tak
Sterownik do pralki nie potrzebuje
Żadnego repozytorium danych
A system finansowo-księgowy trzyma
Tysiące faktur
To jest przepaść
To jest przepaść
I teraz pytanie brzmi
Gdzie my te faktury będziemy trzymać?
W większości w jakiejś bazie gdzieś obok
Na innym systemie
Okej
Gdzie jest ta baza?
Po co nam ta baza?
Też jakąś aplikacją, która przetrzymuje
I udostępnia te dane
Baza danych jako motor
Jest aplikacją podobną
Do sterownika pralki
No może bardziej wyrafinowana
Otóż podstawową różnicą
Odróżniającą rzeczą
Odróżniającą systemy tzw. biznesowe
Od całego innego oprogramowania
Jest to, że systemy biznesowe
W 99%
Przetwarzają dokumenty
I ich treść
I nic więcej
Słuchajcie, jak nam się wydaje
Bo
Szczególnie na studiach informatycznych
Ludzie ćwiczą zaawansowaną matematykę
Niemalże całkują, różniczkują
Wyprawiają masakryczne rzeczy
Jaką najbardziej skomplikowaną operację
Robi księgowa matematyczna?
Segreguje faktury?
Mówimy o matematycznej
Ale okej
Kiedy dzieli księgowa?
Księgowa mnoży
Jak jest kilka rzeczy
Albo sumuje, ale nie dzieli
Raczej nie dzieli
No procenty policzy
A to jest mnożenie
Słuchajcie, systemy biznesowe
Z perspektywy matematycznej
Są proste jak konstrukcja cepa
Tam się nic nie liczy
Przecież jakbyście weszli na stronę internetową
Nie wiem, Amazona czy Empiku, tak?
To jaki procent strony
Zajmują liczby
Na stronie Empiku
Z książkami, z butami
Jakieś 30% może
30?
3!
No wejdziesz na stronę
Dostaniesz stronę A4 opisu
Książka, tytuł, autor, streszczenie
Numer ISBN
To będzie pół ekranu tekstu
I na samym końcu będą dwie cyferki
45 złotych i koniec
Systemy biznesowe praktycznie nie liczą
Systemy biznesowe praktycznie nie liczą
Systemy biznesowe praktycznie nie liczą
Systemy biznesowe praktycznie nie liczą
Co robi procesor, czy komputer?
No?
Co robi procesor w komputerze?
Zejdziemy trochę niżej
Tak?
A co on takiego tam liczy?
Pity
Tak?
Kto uważa, że procesor liczy?
Kto uważa, że procesor liczy?
No Rymkiewicz Michał
Co ten procesor tam wyprawia?
Znaczy...
Procesor
Jest jakiś tam
W określonym czasie wysyłane jakieś
W określonym czasie wysyłane jakieś
No impulsy
No dobra, aż tak do tych pięciu
Czy trzech wolt na tych cemosach
Nie będziemy schodzili, okej?
To dobra, aż tak źle nie jest
Nie będziemy aż tak nisko schodzili
Ale pisaliście kiedyś programy w języku maszynowym?
Tak
Jakie tam są instrukcje?
No to są
Operacje na bitek szybciej już
Na przykład przesunięcia
Sam procesor
To tak naprawdę robi dwie rzeczy
Albo porównuje dwie jedynki
Znaczy generalnie sam procesor
Porównuje wartości dwóch komórek pamięci
I ma operację pod tytułem
Że jak doda, że te dwie
Binarne wartości może dodać
Tak?
Na boku jeszcze robi operacje logiczne
To o czym będziemy mówili
Mówimy o takich rzeczach prostych
W tym sensie, że my jako ludzie
Teraz zwróćcie uwagę, że procesor
Dodaje i porównuje ciągi znaków
Z perspektywy komputera
Tak naprawdę to samo
Bo jeżeli my mówimy, że komputer
Bo teraz uwaga
Odróżniajcie pojęcie komputer i procesor
To jest bardzo ważne
Co to jest komputer?
To przy czym siedzę
To już jest gotowa jednostka cała
Urządzenie, którego używacie
To jest bardzo ważne
My jako ludzie
Nie używamy oprogramowania
Bo nie jesteśmy w stanie tego zrobić
Używacie smartfona
Nie oprogramowania
Wy i ja siedzimy przed
Małą kupą żelaza i plastiku
Kolorowy ekran LCD
Coś tam się pojawia
Ale żeby pogadać z sobą
To musimy klepać w klawisze
I wywijać myszą czy tam touchpadem
My nie używamy jako homo sapiens
Nie używamy żadnego software'u
Nie używamy software'u
My używamy urządzenia zwanego komputer
To co to jest komputer?
Żeby projektować i tworzyć oprogramowanie
Musicie rozumieć co robicie
No to jak tam chłopcy i dziewczyny
Co to jest komputer?
Interfejs tak
Ogólnie
Blisko
To jest puszka
Która składa się z procesora
Pamięci i programu
Program jest
Umownie jedną trzecią tej puszki
On nie jest sam z siebie komputerem
Po co nam ten program
W tej puszce?
No żeby robił to co my chcemy
Żeby robił
Tak to znaczy
Co robi program w pralce automatycznej?
Steruje pralką żeby prać
Bo chcemy że uprać
A tak konkretnie
Co to znaczy steruje pralką?
To znaczy, że tam jest jakaś grzałka
Jakiś silnik, bębna
On raz się kręci szybko i wiruje
Raz wolno
To znaczy, że program w pralce
Tak naprawdę w ustalonej kolejności
Steruje urządzeniami w tej pralce
Ma kilka scenariuszy
Bo ma scenariusz dla brudnych tramków
Dla bardzo brudnych spodni
Dla mało brudnych spodni
Od świeżej koszule
To są tak naprawdę
I teraz zwróćcie uwagę
Nie wiem co wy tam macie w tych peselach swoich
Ale jak być może wiecie
Kiedyś pralki
Kto wie jak wyglądał kiedyś programator pralki
Zanim był to komputer
Widział ktoś kiedyś programator pralki?
Takiej starszej?
Masakra
Poszperajcie kiedyś w sądzie
To wyglądało jak zegarek
Kilka rzeczy w środku
Grzałkę, bęben i tak dalej
I one muszą się w określonej kolejności
W określonych odstępach czasu
Coś tam muszą zrobić
To kiedyś to były kółka zębate jak w zegarku
Tam był silniczek
Ten silniczek kręcił
I te kółka zębate tam jakieś styki
Po prostu otwierały i zamykały
To był programator pralki
Dzisiaj
I teraz pytanie brzmi
Czy funkcja pralki
W ostatnich 50 lat się zmieniła?
No nie
Praktycznie nie
Jak ktoś sobie kupił pralkę automatyczną
W latach 80
To z zewnątrz
Pomijając jakieś bajery modowe
Ta pralka się absolutnie nie liczy
Nawet dzisiejsze pralki
Nie mają paneli z klawiszami jak w telefonie
Tylko mają gałkę
Dlaczego? Żeby ludziom było łatwiej
A tam w środku myśmy zamienili te kółka zębate
Na komputer
Jedyną różnicą pomiędzy pralką
Dzisiejszą a pralką sprzed 40 lat
Jest to, że tam gdzie kiedyś było
Te kilkanaście kółek zębatek, silniczek i styki
Dzisiaj jest komputer
To znaczy, że ten komputer
1 do 1 zamienił mechaniczne urządzenie
Przecież wymiana
Kółek zębatek na komputer nie spowodowała
Zmiany kształtu bębna pralki
Proszki do prania też się nie zmieniły
To znaczy, że komputer jest urządzeniem
Który
Realizuje jakiś mechanizm
Przecież
Ja mam w prawym dolnym rogu zegarek
Wy też pewnie macie gdzieś tam na ekranie zegar
Przecież
Ja mam też na nadgarstku zegarek
Ja jestem tym typem, który ma mechaniczny
I teraz
Czym się różni mój mechaniczny zegarek
Od tego
Ja mogę go przełączyć
Mógłbym sobie mój zegarek w Windows'ach przełączyć na analogowy
Czym się będzie różnił ten zegarek
Mechaniczny
Ja tylko widzę tarczę zegarka
Znaczy widzę jakieś tam bebechy, ale przybajrzyli
I będę miał analogowy zegarek na przykład w prawym górnym rogu
Ekranu
Czym się różnią?
Odpowiadam
Funkcjonalnie wyświetlają czas, ale
One się niczym nie różnią
Z perspektywy użytkownika
Bo ja cały czas mam te same wskazówki
12 godzin na tarczy
Mogę sobie przybajerzyć, bo zmienię sobie kolor tarczy
Te zegarki
Ten i ten na ekranie komputera
Z perspektywy tego
Do czego i komu służą
Nie różnią się absolutnie niczym
To znaczy, że ktoś
30 kółek zębatych
Zamienił na procesor
Pamięć i program
Ale to urządzenie nadal
Służy do tego samego
Przecież ludzie mają przybajerzone zegarki
Które są komputerem i wyświetlaczem
LCD
No i nic
Po prostu zamieniliśmy
Dlatego mówimy
To się nazywa ładnie filozofia oprogramowania
Filozofia informatyki
Komputer to jest uniwersalny mechanizm
Dlaczego?
Przeprogramować
Jak ktoś
Jeżeli jechaliście kiedyś samochodem
To te nowocześniejsze, w miarę nowe
Mają taką gałeczkę
Jazda sportowa, ekonomiczna i miejska
Żeby coś takiego zrobić
W samochodzie sprzed 40 lat
Musielibyście wymienić linkę
Pomiędzy pedałem gazu i silnikiem
Bo tam jest regulacja wtrysku
Ile paliwa do silnika
I tam pomiędzy silnikiem
A tym pedałem gazu przy tej lince
To jest taka krzywka
Która mechanicznie
Kupy pedału gazu od ilości paliwa
Do silnika
Gdybyście chcieli zmienić charakterystykę silnika
Musielibyście tą krzywkę wymienić
Czyli kiedyś żeby zmienić samochód
Stuningować samochód z jazdy miejskiej na sportową
Trzeba było podnieść maskę
Wybebeszyć system kontroli wtrysku paliwa
Wymienić tą plastikową
Bo one były z tworzywa sztucznego krzywkę
I jechać
A dzisiaj co robimy
Dzisiaj zmieniamy procedurę w komputerze
Bo pomiędzy silnikiem a waszym pedałem gazu w samochodzie
Jest komputer
A nie linka stalowa
I krzywka
Dlatego mówimy że komputer jest uniwersalnym mechanizmem
My jako ludzie używamy komputera
Nigdy oprogramowania
Oprogramowanie jest tą jedną trzecią
Oprócz procesora pamięci
Procesor dodaje jedynki
I porównuje ciągi znaków
A ten program
Realizuje jakąś procedurę
Największym wyzwaniem jest to
Żeby 30 kółek zębatych
Mojego zegarka
Zamienić
Na prozę
Którą jest kod źródłowy
I teraz na czym polega problem
W tej branży
Że jak tych linii kodu było 500
To przeciętny koder ogarniał zjawisko
A teraz jak wam się wydaje
Ile linii kodu ma taki sklep MPiKu
Za dużo
Tak
Ile?
Setki tysięcy
No to są setki tysięcy linii
Duży system ERP to są miliony
I teraz mamy taką sytuację paskudną
Ile wam się mieści linii kodu
Na ekranie komputera
Zależy jak monitor ustawia
No dobra
Jak poszalejesz
Jak poszalejesz
To ile będziesz miał
Ile?
Tak żeby było czytelne
To może się zmieści ze 100
Okej
No to dobra
Masz 100 linii na ekranie
I próbujesz to ogarnąć wzrokiem
I zrozumieć o czym mówi tekst
Na 100 linii
Okej jak masz doświadczenie być może ogarniesz
No to teraz wyobraź sobie
Że masz duży system
I tam jest tylko 100 tysięcy linii
To znaczy że ty widzisz na ekranie w danej chwili
Wy wszyscy ułamek procenta całości
Ułamek procenta
To znaczy że musisz ocenić
Tego
Że jak w tym programie jest
A pewnie będzie przy takiej skali zjawiska
Ze 100 podprogramów
To mogą być klasy
To nie ma znaczenia
To czy to będzie napisane w paskalu
Czy w C++ nie ma znaczenia
Jeżeli macie program który ma 100 tysięcy linii
To prawdopodobnie będzie podzielony na jakieś części
Podprogramy i będą instrukcje
Skocz do podprogramu
Przeskocz do linii numer 50
Zabieranie klasy w kodzie
To jest po prostu inna forma dzielenia kodu na kawałki
Nic więcej
Także
I teraz jeżeli mówimy o językach
Zorientowanych obiektowo
To bajer jest taki że tak naprawdę jedynym bajerem
Pomiędzy C++ a C
Pomijając słowo klasa
To jest tylko to że C++ obsługuje dziedziczenie i wielodziedziczenie
Czy to ułatwia
Powiem tak
Zdania są co najmniej podzielone
Po co my dzielimy
Ale do tego zaraz dojdziemy
zanim zaczniemy rysować, to powinniście rozumieć, co będziemy
robić, tak? Także będziecie mieli mały, krótki
wykładzik. No i dobra.
Teraz tak. Z perspektywy takiego C++
to mamy jakieś
kawałki kodu, nazwane
klasami. Teraz wracamy do tematu
faktury, czy w ogóle te dokumenty, czy dane.
Systemy biznesowe
przetwarzają ogromne ilości danych. One są
na jakimś hipotetycznym dysku. Na razie nie wnikamy
w to, czy to jest baza taka, śmaka, czy inna.
To znaczy, że
jak żeśmy, bo tak, COBOL,
znany od lat siedemdziesiątych, on sobie z tymi
danymi radził, tak? Po prostu miał bazę swoją,
tam pal sześć jako, one są hierarchiczne,
tam mogły być miliony pracowników,
wypłat, transakcji, zakupów, sprzedaży,
cokolwiek, tak? I nagle ktoś
mówi, okej, chcemy z tego mainframe'a i COBOL'a
wyjść, a mamy tylko C.
To jest dramat,
tak? No bo
wszystko jest fajnie, nie? Możemy dodawać, mnożyć
te podatki, tylko gdzie to wszystko trzymać, nie?
No to doszło parę instrukcji
związanych z dostępem do bazy danych.
Pierwszym rzutem,
pierwszy rzut poszedł na bazy relacyjne.
Kto wie, kiedy bazy relacyjne zostały opracowane
i wdrożone do produkcji?
Od kiedy używamy baz danych relacyjnych?
Jest jakiś osiemdziesiąty?
Siedemdziesiąty drugi rok tamtego wieku.
W 1972
roku wymyślono monet relacyjny.
Powody były dwa.
Po pierwsze, bazy hierarchiczne w COBOL'u,
jeżeli chodzi o
składowanie informacji, były
doskonałe i są
jako nierelacyjne. Problem jest taki, że jak trzeba
zrobić masowe obliczenia,
to dużo wygodniejsze są płaskie tabele
niż hierarchiczne struktury, które trzeba
rekurencyjnie przeglądać. Bo wiecie, baza hierarchiczna
to jest taki głęboko zakorzeniony
system plików i folderów.
Dopóki macie
sytuację, w której pobieracie pojedynczy
plik, pojedynczy zestaw informacji i one
są jakoś sklasyfikowane, że
dokumenty dzielimy na zielone i niebieskie,
zielone na małe i duże, to sobie możemy taką drzewiastą
strukturę zrobić.
Wykopanie z tego jednego dokumentu, czy dwóch,
jest bardzo proste. Ale na przykład już na bazie
hierarchicznej wykonanie operacji
pod tytułem suma dwóch tysięcy faktów
z ostatniego miesiąca
będzie dużym wyzwaniem dla COBOL'a.
No to powstały
modele relacyjne, które pracują
na płaskich tabelach, a nie na hierarchii.
Do obliczeń są
mistrzostwem. Do dokumentów
są absolutnym dramatem.
Znacie SQL'a?
Tak.
No to teraz mam pytanie.
Tak.
Przeciętny system finansowo-księgowy,
nie? Tam macie te faktury z przeległościami.
Ile tam będzie tabel
powiązanych relacyjnie?
No tak na oko może
z dwieście, trzysta. Zależy
ile tam chcemy rzeczy trzymać.
Tak. Mamy jakieś dwieście,
trzysta tabel. Jeżeli musimy sobie zagwarantować
to, że faktura sprzed dwóch lat ma mieć adres
sprzed dwóch lat ceny, to bardziej
dwieście niż sto. Bo będziecie musieli
robić historię zmian niemalże każdego
rekordu. Czyli będziecie mieli
zestaw tabel i będziecie mieli tabelkę do tabelki, tak?
Bo będzie historia zmian. Czyli będziecie mieli tak na...
Model relacyjny
staje się bardzo szybko
skomplikowanym modelem takim strukturalnym.
I teraz pytanie do was. Macie
te dwieście tabel. I na ekranie
ma się pojawić faktura. Taka jaka
jest na papierze. Ile linii kodu w tym SQL'u
powstanie? Taki select.
Ile to będzie miało?
No powiedzmy
pięćdziesiąt, tak, w miarę.
Bo trzeba połączyć kilka tabel
na kluczach, to pięćdziesiąt powiedzmy
wystarczy. To minimum.
To jest minimum. Bo jeżeli będziemy mieli jeszcze jakieś
bardziej zaawansowane walidacje danych, to trochę więcej, nie?
No ale wtedy też będzie więcej tabel
najczęściej. Tak, dokładnie. To będzie jeszcze
więcej tabel, dokładnie. No i teraz tak.
I teraz zrobicie sobie
porównanie.
Faktura w postaci
jednego ciągu JSON czy XML
to wyciągnięcie jest
z jednej linijki kodu.
Z takiego Postgresa czy z Mongo. A z bazy
relacyjne to jest pięćdziesiąt linii kodu.
To znaczy, że procesor, żeby
odtworzyć fakturę, będzie miał
pięćdziesięciokrotnie większe obciążenie.
Minimum
pięćdziesięciokrotne.
Bo nie jest w stanie zrobić tego mniej.
Model relacyjny... Proszę?
W sensie zależy.
Bo od wielkości bazy i
jakie mamy indeksy, to
baza relacyjna będzie szybsza zawsze.
No problem polega na tym, że
jest tysiąckrotnie wolniejsza na testach już
przy dwóch tysiącach rekordów.
Zwróć uwagę na taką rzecz, że jeżeli
masz dwa scenariusze, wyciągę...
Masz dwa repozytoria. Macie.
Jedno repozytorium, żeby
odtworzyć fakturę,
wymaga jednej linijki kodu,
a drugie pięćdziesięciu.
Nie przeskoczysz
fizyki.
No tak, ale to jest pięćdziesiąt linii kodu,
gdzie mamy wszystkie relacje, indeksy
i tak samo. A jeżeli ja chcę wyciągnąć fakturę
po nazwisku
i kwocie,
to... To jest tak.
Na czym polega mit
wyznawców SQL-a?
Że w znakomitej większości przypadków nikt tak
nie robi. Faktury wyciągamy na podstawie NIP-u,
na podstawie numeru faktury,
daty. Czyli mam fakturę, która ma trzydzieści
pól na sobie, nikt przy zdrowych zmysłach
nie robi kwerendy pod tytułem
wszystkie faktury z rowerem w kolorze czerwonym,
bo by zarżnął dowolny system.
Przeciętna księgowa znajduje fakturę na podstawie
numeru, daty, wartości
brutto, tak? No faktycznie, jak mówimy
tylko o fakturach, to to jest
na razie mówimy tylko, ćwiczymy się
ćwiczymy na poziomie faktur, tak?
Czyli mamy sytuację dosyć prostą.
Mamy dowolnie skomplikowane
dokumenty
i być może będziemy mieli do tego...
Każdy dokument będzie w takiej prostej tabelce, tak?
Macie tabelkę na cztery kolumny. Numer kolejny,
data faktury, wartość faktury, NIP
i w czwartej kolumnie, czy w piątej
będzie tam, nie wiem, XML,
PDF, JSON, obojętnie, tak?
To znaczy, że znalezienie faktury na podstawie
jednego z tych czterech parametrów
to będzie tak zwany moment.
I teraz,
a to są tylko faktury, a teraz sobie
wyobrażę sytuację,
problemy są dwa, bo
wydajność tej bazy do pewnego momentu nie będzie
problemem, żeby nie było niejasności, zgadzam się.
Do pewnego momentu ta baza będzie hulała
jak przeciąg. Problem polega na tym,
że, jak wam się wydaje,
jak mierzymy
jakość oprogramowania?
Na bazie
jego użyteczności, prędkości
działania? Nie.
Nie.
Jak pójdziecie do jakiejkolwiek firmy...
A czy się wywala,
czy nie? No, jak się wywala,
to jest w ogóle niskiej jakości system,
ja bym na niego za to nie zapłacił.
Znaczy, umówić to do jednego, że
to tak, żeby nie było niejasności,
bo to jest kolejny mit w tej branży.
Jeżeli jakieś oprogramowanie się wiesza,
to jest takim samym bublem,
jak samochód, który nie odpala, okej?
Także nie mówimy o samochodach, które nie chcą jeździć.
Nie mówimy o tym.
To wszystko zależy, jak
korzystamy z tego,
bo jednak, jak idziemy już do samochodów,
jeżeli ktoś szuka samochodów
rajdowych, to będzie porównywał inne
parametry, niż ktoś, kto
szuka ciężarówek. Tak.
Co jest głównym, jeżeli kupicie samochód,
co jest
głównym czynnikiem,
przynajmniej dla większości rodzin,
wyboru samochodu?
To się wszyscy w nim zmieszczą.
Okej. Mówimy o rodzinach.
Tak, drugi punkt.
Wydajność spalania.
Cena.
Okej. Słuchajcie, samochód
kupuje się raz, a utrzymać go musisz 5 lat.
Słuchajcie, kluczowym
elementem oceny jakości
samochodu i software'u
są koszty utrzymania i rozwoju.
Bo napisanie aplikacji
jest takim samym, tak zwanym,
jak już wiemy, co napisać, o tym
za chwilę, kupić samochód
żadna sztuka.
I utrzymać go, to jest problem.
Bo ja wam mogę dać w prezencie za darmo czołg,
którym będziecie dojeżdżali do pracy.
On was kosztowo zniszczy.
Tam czteroosobowa rodzina wejdzie.
No nie wiem, jak to będzie z wygodą,
ale spokojnie wejdzie.
Czołg kosztuje parę milionów, czy tam paręnaście milionów.
Ja wam go dam za darmo.
Z jedną umową. Macie go przez...
Będziecie nim jeździli do pracy
i macie pokryć koszty jego utrzymania przez 10 lat.
Okej?
I zaczynają się schody, nie?
I teraz
w naszej branży
od kilku ostatnich lat szczególnie
ludzie odkryli,
w naszej branży, w tej branży
ogólnie biorąc oprogramowania,
że to jest tak, jak wiecie,
jak ja byłem na studiach, to się mówiło
w poniedziałek rano, że nie jest żadną sztuką
zjeść śniadanie, sztuką jest je utrzymać.
Otóż rzecz polega na tym,
że mamy dwa problemy
w branży informatycznej.
Wytworzenie oprogramowania,
kiedy już nie ma błędów i działa tak,
jak powinno działać,
a potem jego utrzymanie.
W jednym i w drugim przypadku
kluczem jest architektura
i zrozumienie, co tam się ma dziać.
Bo jeżeli my wiemy, zwróćmy uwagę na taką rzecz,
system finansowo-księgowy FK
to tak, jak wasz kolega powiedział,
około 200 tabel w bazie. A jak wam się wydaje,
taki SAP to ile ma tabel w bazie?
On ma też relacyjną bazę.
6500.
Ok?
Tak, to jest ta główna część.
Microsoft Dynamics,
ta główna baza to jest
5000 z kawałkiem,
wszystkich pozostałych bajerów też ponad 6000.
Jak wam się wydaje,
jakiej długości tam są zapytania SQLowe?
Żeby wyciągnąć fakturę,
protokół odbioru, czy dokumenty magazynowe.
No tak generalnie
to one mają nie 50, a pod 500,
tak szczerze mówiąc.
I teraz pytanie do was.
Co jest tańsze w utrzymaniu?
W utrzymaniu, rozwoju i kontroli błędów,
debugowaniu.
Jeden system, żeby wyciągnąć fakturę,
to jest jedna linijka kodu
i wyskakuje JSON,
a w drugim systemie musicie napisać
500 linii parszywego SQL-a,
który jest nieobiektowy,
to jest tępy strukturalny język.
I teraz, jak wam coś się wyrypie na ekranie,
to wy takich zapytań po 500 linii SQL-owych
macie kilkadziesiąt
i szukacie błędu.
Bo coś się wyrypało na fakturze.
A kolega zmienił na fakturze,
a ja mam na zamówieniu.
Ile godzin będziecie ten system oczyszczali
z błędów i modyfikowali?
To są grube mendajsy.
To są grube mendajsy.
To jest problem.
Dlaczego wam o tym mówię?
Bo jest bardzo dużo zupełnie
bezsensownych, powiedziałbym szczerze,
ideologicznych dyskusji w tej branży,
które są totalnie oderwane od życia.
Bo będziemy o tym mówili jeszcze
przy okazji rysowania.
Otóż problemem jest to,
że tworzenie oprogramowania
od razu w kodzie,
wiedząc, że tego kodu
nie będzie 500 linii, tylko 50 tysięcy,
zaryzykuje teraz
ogromną nieodpowiedzialnością,
bo to będzie bardzo długi,
ciężki proces usuwania błędów
z książki grubości Harry Pottera.
To będzie długi, ciężki proces.
A jeżeli macie takiego Harry Pottera
i nie macie żadnego rysunku,
to wprowadzenie zmian
albo nowej funkcjonalności
będzie naprawdę niemalże
przeglądaniem całego kodu,
bo większość rzeczy gdzieś tam
będzie się odwoływała.
Wzorce projektowe, o których
będziemy mówili na tych zajęciach dużo,
służą m.in. do tego, żeby dowolnie
duży system podzielić na skończoną listę
małych kawałków do ogarnięcia
na jednym ekranie komputera, monitora.
To jest takie ogólne przesłanie.
I teraz tak.
W 1992, 1993, 1994 roku
mówiło się, że paradygmat obiektowy
to jest łączenie obiektów,
łączenie danych i funkcji w obiektach
i dziedziczenie.
I to jest kompletna nieprawda.
Bo już wzorce projektowe
opublikowane, opisane
kilka lat później,
będziemy o nich mówili.
Np. jeden z podstawowych wzorców projektowych
jest separacja danych i funkcji.
To się nazywa fabryka.
Zupełnie inna klasa, inny obiekt
powinien stworzyć i stworzyć
i zwalidować fakturę,
a zupełnie inny powinien zapisać ją
na dysku czy w jakiejś bazie.
Powód jest bardzo prosty
z perspektywy biznesowej.
Jak wam się wydaje?
Teraz tak.
Jeżeli walidację faktury
wpakujecie do klasy faktura,
to znaczy, że każdy obiekt
będzie miał tą konkretną metodę
walidacji faktury.
I wy te obiekty potem,
bo tych faktur jest milion,
a teraz wyobraźmy sobie,
że ten system działa 10 lat
i przynajmniej raz w roku
ustawodawca zmieni zasady
naliczania podatku.
To znaczy, że klasa faktura
będziecie musieli w niej co roku
jako deweloper
zmieniać metodę walidacji faktury.
A ta klasa
waliduje wszystkie obiekty klasy faktura
od ostatnich 10 lat.
Jak sobie poradzicie z tym,
że walidacja wam się zmienia co roku,
będzie bolało?
Będzie bolało.
To będzie bardzo dużo linii kodu.
Będzie bolało.
A jeżeli oddzielicie to
i zrobicie tak, że klasa faktura
sama się nigdy nie waliduje,
w związku z tym
repozytorium na 10 milionów faktur,
obiektów będących fakturą,
nie waliduje tych faktur.
W związku z tym możecie
cyferki na fakturach zmieniać
nawet co 5 minut
i powstają zupełnie w innym komponencie.
Czyli jest komponent,
który tworzy fakturę.
Faktura wytworzona nigdy nie jest drugi raz
walidowana, bo pogrzyba.
I ona sobie idzie do szafy.
I teraz możecie nawet co miesiąc
zmieniać metodę walidacji faktury
w tym komponencie, który tą walidację wykonuje,
a faktury, które są zwalidowane
pakować do dowolnego repozytorium
i nie martwić się,
że każda wymaga innej walidacji.
Bo starych faktur drugi raz nie walidujemy,
a nowe faktury walidujemy według
nawiązującej metody.
Proste jak konstrukcja cepa.
Wystarczy odseparować.
To jest podstawowy wzorzec projektowy
zwany repository.
Separujemy repozytorium co do zasady
nigdy nie powinno trzymać żadnej logiki biznesowej.
Właśnie z powodu, o którym
Wam powiedziałem.
A to jest dopiero początek dramatu,
który niektórzy uprawiają.
Jeżeli mówimy o paradygmacie obiektowym,
to nie jest to dziedziczenie
i łączenie funkcji danych w obiekcie.
To jest po prostu dzielenie
aplikacji na komponenty,
które do siebie gadają.
I koniec.
Pojawia się jeszcze bajer
pod tytułem polimorfizm.
Po co my dzielimy aplikacje
na komponenty?
Oczywiście jest dodatkowy,
żeby nie było, hermetyzacja.
Co to jest hermetyzacja?
Kto mi powie?
Hermetyzacja to jest cecha
mówiąca,
że obiekty
niczego nie współdzielą.
Nawet jednej linijki kodu,
ani informacji.
Obiekty co do zasady
nie współdzielą niczego.
Po co to robimy?
To jakiś bajer?
Ktoś nam wymyślił?
Czy to jakiś korzyść z tego jest?
Jaki jest pożytek hermetyzacji?
Zależy trochę też
od sytuacji biznesowej.
Nie ma ukrytych zależności
Nie ma żadnych.
Jeżeli mamy dwa
odseparowane kawałki kodu,
czyli dwa komponenty,
to znaczy, że jak jeden się wysypie,
to ten drugi co najwyżej
zobaczy, że ma trupa obok siebie,
ale się nie wysypie.
Dzielimy duże systemy na komponenty,
które są hermetyzowane
z powodów dwóch. Po pierwsze,
jeżeli są hermetyzowane,
czyli niczego nie współdzielą,
to my możemy nad każdym z nich
pracować niezależnie, bez obawy,
bo w najgorszym przypadku
taki obiekt po prostu nie odpowie.
Wywołamy jego operację
i będzie trup.
Ale nie spowoduje to tego,
że jeżeli mamy jakiś kawałek kodu
i ten fragment kodu w jakiejkolwiek formie
jest współdzielony między kilka obiektów,
to jak tu coś się spieprzy,
to leczy jak domino.
Po tych wszystkich pozostałych elementach,
które współdzielą.
I właśnie się dowiedzieliście,
dlaczego dziedziczenie jest masakrycznie
szkodliwą metodą projektowania.
To macie logikę rozsmarowaną
na kilku poziomach
i jak coś rypnie, to leci całość, zawsze.
Aplikacje, niestety, w C++
mają tą nieprzyjemną cechę,
że one są zawsze monolitem.
Z uwagi na strukturę dziedziczenia.
One są absolutnie zawsze monolitem.
One nigdy nie są obiektowe,
bo niczego tam nie hermetyzujemy.
Tam współdzielimy absolutnie wszystko praktycznie.
To jest problem
z dziedziczeniem.
Krytyka dziedziczenia się plącze
od dobrych kilkunastu lat.
To, czy jakiś język ją wymusza,
czy nie, no C++ praktycznie wymusza.
To jest inna bajka.
Dlaczego o tym tyle mówimy?
Javę wymyślono
tylko z tego względu,
że w Javie niewyrażono dziedziczenia.
Bo jeżeli w C++ można napisać strukturalnie,
tak w Javie już nie można.
Ja mówię szczególnie o Javie EE.
Otóż,
jeżeli mamy C,
to w Javie nie ma tym kodem.
Czyli jeżeli mamy aplikację
napisaną w C czy w C++,
to część logiki zawsze będzie
w tej relacyjnej bazie danych w tych relacjach.
Bo nie ma innej możliwości.
Java to jest tylko takie małe lekarstwo na to,
że jeżeli mamy aplikację w C,
to ona pod spodem ma bazę
i te relacyjne tabele.
Jeżeli mamy aplikację w Javie,
to tabele mogą nie być połączone z sobą,
bo w Javie będzie
dla każdej tabeli osobna klasa
i te wszystkie związki relacyjne ze SQL-a
są przeniesione do kodu Javy.
I to jest sama różnica.
Pożytek z tego jest taki,
że można w dowolnym momencie wymienić
motor bazy danych.
Minus jest taki, że przenoszenie modelu relacyjnego
z tymi wszystkimi kluczami i przyległościami
do kodu,
komplikuje go jeszcze bardziej niż w C.
Efekt jest taki, że aplikacje Javowe
są masakrycznie kosztowe
w wytwarzaniu i otrzymywaniu.
Jedyny plus Javy był taki,
że nie było w sensie danych,
w sensie infrastruktury
i to był jedyny plus.
Drugi plus, niektórzy twierdzą,
że pisząc aplikacje w Javie można nie znać SQL-a
i to jest prawda.
Mamy aplikacje w Javie,
mamy potem mapowanie obiektowo-relacyjne,
tego można nie umieć,
automat nam te tabele zrobi.
Zależy, czy chce się napisać aplikację,
czy chce się napisać dobrą aplikację.
To jest bardzo ważna uwaga
dla naszego kolegi,
bo jak ktoś napisał dobrą aplikację,
to już jest całe zajęcia.
Ale to prawda jest,
że jak ktoś pójdzie jak małpa,
to zrobię takiego knota,
że w głowie nie mieści.
Są niezbędne fakty,
że to generalnie nie ułatwia nam życia.
Puszczę Wam fragment referatu
sprzed chyba dwóch,
może góra trzech lat.
Sekundę, tylko znajdę
i zaraz udostępnię ekran.
Referat jest w miarę świeży,
ale w różnych formach
i w różnych formach
pojawia się na konferencjach
i to właśnie deweloperów.
To nie są jacyś tam mityczni
nawiedzeni analitycy od obrazku.
To są konferencje deweloperów.
O, jest.
Dajcie mi sekundę, to udostępnię.
Dobra, moment, moment, moment.
YouTube, dobra.
To jest reklama, sorry.
Jeszcze nic nie widzimy i tak.
Wiem, wiem, wiem.
Ale słyszycie.
Znajdę ten fragmencik
obiektowy, dobra.
Okej, zaraz udostępniamy ekran.
To jest chyba to.
Jeszcze raz. Zapomniałem dźwięk puścić.
Sekundę.
Jeszcze raz to.
Z dźwiękiem.
Dobra, widać faceta?
Na YouTubie?
To jest jeden z najbardziej znanych
prelegentów, autorów książek.
Facet napisał jakieś miliony linii kodu
i tak dalej. To jest konferencja
sprzed trzech lat.
On jest akurat w miarę najbardziej znany.
Z tego względu, że dużo pisze.
I ma swój...
Jako autor wielu książek
i praktyk jest zapraszany na konferencję.
To jest akurat Continuous Delivery, którą on
współorganizował. I co tutaj ten pan
napisał?
Jak powiedziałem wcześniej,
jest to błąd, by to zobaczyć jako
pewnego rodzaju liniowa progresja
zgodności języka.
Gdy wszystko to się działo,
poza tym, w porównaniu do tego,
OO zostało wymyślone.
Termin OO został wymyślony
przez Alan K. w 1966 roku.
Ale te pomysły, które doprowadziły do tego,
miały miejsce kilka lat przed tym.
Nawet tak wcześnie jak w 1961 roku.
Pierwsza prawdziwa
język OO była symulacją
OO, który został stworzony w 1965 roku.
Ale były
wcześniejsze próby.
Radykalny krok OO był
Smalltalk w 1972 roku.
Paradigm OO nie jest naprawdę
tym, co większość ludzi myśli.
Nie jest naprawdę
dotyczącym pochodzenia.
A ponieważ jest dotyczącym złożenia danych i działania,
myślę, że większość programerów OO
powiedziałaby, że to jest o wiele więcej
dotyczące polimorfizmu.
Później Alan K. powiedział to.
Przepraszam,
że od dłuższego czasu
nazwałem ten temat obiektami,
ponieważ to daje wielu ludzi
zainteresowanie się lepszą ideą.
Większą ideą jest przemówienie.
Myślę, że to, co K.
tutaj oznacza,
jest to, że prawdziwa wartość
jest to, że możemy przemawiać przemówienie
do czegoś, a on wygadza, jak
przemówić to przemówienie.
Możemy przemawiać to samo przemówienie
do dwóch różnych rzeczy,
a każdy z nich zajmuje się tym samym przemówieniem,
ale w inny sposób.
To jest
polimorfizm, naprawdę.
To jest prawdziwa wartość OO,
a nie przemówienie.
W rzeczywistości, w wersji 1972
Smalltalk nie wspierał
przemówień.
W modelu Boba Martina
to...
Przepraszam,
mam pan wyciszony mikrofon.
O, teraz
słyszycie, tak?
On potem jeszcze mówi
o Bobie Martinie. To jest gość, który napisał
książkę Clean Code i Clean Architecture.
O tym pogadamy później.
Głównie o Clean Architecture.
Otóż
co tu zostało powiedziane?
Po pierwsze, obiektowość to nie jest dziedziczenie.
Obiektowość
polega na hermet...
i nie jest łączenie funkcji i danych.
Obiektowość polega na totalnej separacji
i na polimorfizmie.
Separacja, czy tam
hermetyzacja, polega
na tym... cel jest taki,
jeżeli mamy duży system, to nie możemy
pracować na monolicie, bo on będzie masakrycznie
kosztowny w utrzymaniu i rozwoju.
Jeżeli mamy duży system, to musimy go
pociechać na kawałki
z powodów dwóch. Po pierwsze, niezależne
kawałki można niezależnie tworzyć,
nawet w różnych językach programowania.
Dwa, niezależne kawałki powodują to,
że jak coś się wysypie, to jeden kawałek,
a nie cały system.
Jedyną szkodę, jaką może wyrządzić
niedziałający komponent, jest to, że będzie trupem,
który będzie milczał, nie będzie odpowiadał na pytania.
I to jest jedyna szkoda, jaką
może wyrzucić tak zwany
uszkodzony, niedziałający obiekt. Oczywiście jak jest
dobrze napisany, bo może wyrypać jakieś błędy,
głupie odpowiedzi dawać i tak dalej.
To temat na inne spotkanie. Druga rzecz,
to jest właśnie polimorfizm.
Polimorfizm bardzo
upraszcza strukturę kodu.
Jak wam się wydaje, co jest
największym problemem
w tak zwanych modelach dziedzinowych?
Czym w ogóle dawać
model dziedziny systemu?
Tak zwany domain model w literaturze
anglojęzycznej.
Często powtarzane słowo, domain model.
Co to za cudo?
Otóż domain model, to jest mechanizm
dziedzinowy, branżowy działania.
Czyli na przykład, jeżeli mamy księgowość,
to ten zbiór reguł,
mówiący, że faktury
czy w ogóle dowody księgowe są
dobre lub złe, to jest ten,
niektórzy to nazywają
business rule, engine, whatever.
To się nazywa dziedzinowy model, domain model.
Domain model to jest to miejsce,
które obsługuje mechanizm
działania logiki aplikacji.
I teraz
kolejny problem, jaki się pojawia
w aplikacjach monolitycznych,
który rozwiązuje kwestię komponentowości,
to jest to, że tych
modeli nie da się zmieszać.
Jak wam się wydaje, na czym polega,
dlaczego to się bierze, że modele relacyjne
są takie ogromne?
Jednym z powodów jest to, że postawienie
model relacyjny, jak wiecie
z SQL-a, to są tabele
powiązane z sobą.
I należy i
tam nie ma redundancji.
I teraz wyobraźcie sobie taką sytuację,
że chcecie na przykład aplikację, która
obsługuje sprzedaż
i
naprawy.
Na czym polega
ten problem? Zaraz wam pokażę.
Jeżeli chodzi o domenowość.
Znajdziemy sobie drugi obrazek.
Dajcie mi sekundę i udostępnię
ekran. Momencik.
No.
O, to jest to. Dobra.
Momencik.
Udostępniamy okienko.
To to jest separacja kontekstu.
Akurat ten artykuł jest z 2014,
ale Fowler napisał
swoją książkę o wzorcach projektowych.
Pierwsze wydanie. To był początek lat 90.
Popatrzcie na to.
Klasyczna
sytuacja, kiedy mamy
dwa konteksty biznesowe.
Jeden to jest sprzedaż,
obsługa sprzedaży, a druga to jest obsługa
zgłoszeń serwisowych, uszkodzeń, whatever.
Etikety mamy, tak? I zwróć uwagę na taką rzecz,
że po lewej stronie
mamy takie rzeczy jak klient i produkt.
I teraz
jeżeli mamy
bazę produktów
zwaną potocznie cennikiem,
to tutaj produkty
mają tożsamość, bo każdy
produkt w cenniku może
wystąpić tylko raz i ma swój unikalny numer.
Tak?
To samo jest z klientem.
W bazie klientów,
czyli na stole, gdzie są dokumenty
z klientami, każda karta klienta
może się pojawić tylko raz.
A teraz mamy taką sytuację,
gdzie jak
sprzedaliśmy te rowery czy odkurzacze,
to teraz kolekcjonujemy
informacje o zgłoszonych uszkodzeniach.
I teraz na czym polega problem?
Że w obszarze
sprzedażowym
klient, customer
występuje tylko raz, bez redundancji,
ma tylko aktualne dane
i ma swoją tożsamość.
Po prawej stronie tożsamość ma
zgłoszenie serwisowe, ale jeżeli
ten sam klient tych zgłoszeń
zrobi dziesięć, to ten klient
tam się powtórzy dziesięciokrotnie.
Ten sam.
Problem jeszcze polega na tym, że owszem,
ktoś powie, że my możemy się teraz pobawić
na instalacje, tabele pośrednie, whatever.
Super. Problem polega na tym, że nasz klient
w bazie sprzedażowej
na przykład może sobie
raz w roku zmienić adres rejestrowy,
który będzie nadpisywany standardowo.
I teraz w bazie sales
klient będzie występował
tylko raz z aktualnym adresem.
A w obszarze obsługującym
zgłoszenia, ten klient na
przestrzeni ostatnich dziesięciu lat
zmieni piętnaście razy adres.
Ale ja muszę mieć na zgłoszeniach starych
jego stare adresy, bo nie wolno tych dokumentów
komplikować. I to jest początek dramatu
z modelem relacyjnym, bo się zaczyna
masakrycznie komplikować.
Pierwszą rzeczą, którą
należy zrobić, to odseparować
to na osobne repozytoria.
Nawet gdyby były relacyjne, będą znacznie
prostsze. Bo po prawej
stronie bazą kluczową będzie ticket,
a po lewej stronie będzie na przykład
klient i tam, nie wiem, jakieś tam inne piernicze.
Chodzi o to, że problem polega na
tym, że w bazach
relacyjnych jednym z największych problemów
jest pojęcie tożsamości. I klucza.
To jest jeden z największych problemów
spójności baz danych.
I największym wywiązaniem jest sytuacja,
w której mamy w tej samej bazie dokumenty,
które się zmieniają w czasie.
Ich struktura się może zmieniać,
sposoby walidacji. Musimy wszystko zmienić, tak?
Jakbyście przejrzeli faktury w Polsce
na przestrzeni ostatnich 30 lat,
to się za web złapiecie.
I teraz wyobraźcie sobie, że one są od 30 lat
w tej samej bazie. Ktoś by chciał.
A zmienia się ich troszeczkę struktura,
podatki, walidacja.
Tam się zmieniło kupa rzeczy przez 30 lat.
Utrzymanie tego w jednej bazie jest masakrycznym wyzwaniem.
To jest powód, dla którego
skomplikowane systemy,
które mają relacyjny model danych,
tak naprawdę co jakiś czas trzeba je przepisać
i zmigrować dane do innej struktury,
bo już te lepienie na gumę
do życia zapałki się nie nadaje.
A to już nawet nie chodzi o krytykę
systemu relacyjnego.
To nie jest kwestia krytyki.
Po prostu to nie działa.
Bazy relacyjne są doskonałe do hurtowni danych
i do obliczeń. Są najgorszym rozwiązaniem
do strukturalnych dokumentów.
Faktura ma trzy poziomy zagnieżdżenia.
Mamy faktura, produkty.
W produktach są detale produktu,
a w detalach mogą być jeszcze jakieś cechy.
Macie dwa, trzy poziomy.
Gdybyśmy fakturę pokazali
w postaci pliku XML-owego czy JSON-a,
to tam będzie tych wcięć dwa, trzy,
cztery, pięć.
To są totalnie strukturalne dokumenty.
Dlatego, jak nam się wydaje,
na świecie,
jaki procent aplikacji zwanych
fintechem obsługuje nadal COBOL?
W Stanach jest to 70%.
W Stanach jest to 70%.
W Stanach jest to 70%.
A wiecie dlaczego?
Bo przeniesienie bazy strukturalnej COBOL-a,
która jest pierońsko szybka na dokumentach,
do bazy SQL-owej
jest dramatem wynajmnościowym.
Nikt tego nie zrobił.
Nie ma takiej ilości komputerów
i procesorów, żeby to działało.
A przeprojektowanie tego
też nie ma większego sensu.
Jak wam się wydaje, pytanie też jakieś z historii,
kiedy powstały bazy nie SQL-owe
i po co?
Z powstaniem COBOL-a?
Czy po części, tak?
Otóż bazy nie SQL-owe,
zwane potocznie no SQL,
bo ten skrót znaczy not on SQL,
one powstały w warunkach akademickich
mniej więcej w 98 roku.
Wersja produkcyjna
to była po pierwsze Mongo
2003. Od tamtej pory
niektóre motory, na przykład Postgres,
obsługuje nierelacyjne modele, nie tylko te.
Powód był bardzo prosty.
Jeżeli łatwiej jest
konserwować jedną linię kodu
wyciągającą fakturę, niż 50 linii
SQL-a,
to znaczy, że przy dużych systemach
aplikacje zbudowane na SQL-u
będą przynajmniej 50-krotnie droższe
w wytworzeniu, bo trzeba napisać
50 razy więcej kodu. Jedna linijka
versus 50, a to są małe aplikacje.
A jak baza ma 5000 tabel,
to to już jest dramat kosztowy.
To są grube meddejsy.
To nie są dyskusje na świecie.
To nie są kwestie ideologiczne.
Są to tylko i wyłącznie
koszty wytworzenia i utrzymania.
Reszta się nie liczy.
Jeżeli przyjdzie Wam księgowy
i on się dowie,
że ten super system wysokiej jakości,
który się nie psuje,
kosztuje 10 milionów,
a tamten kosztuje pół miliona
i robi to samo,
a jeszcze przy najbliższych 10 lat
będzie 20 razy tańszy w utrzymaniu,
to każdy księgowy ten drugi wybierze.
To nie jest kwestia ideologiczna.
To będzie czysty pragmatyzm.
Przy dużych systemach
kluczem jest utrzymanie i rozwój.
Nigdy powstanie od zera.
Nigdy.
Samo wytworzenie aplikacji,
okej, ale to się w końcu,
to będzie w końcu działało.
Tak po pół roku, po roku.
W końcu kiedyś, jak to się mówi, skończymy.
A przed nami będzie 10-15 lat życia z tym,
gdzie zmienia się biznes, prawo,
zmienia się wszystko.
Nie jest sztuką napisanie miliona linii kodu.
Sztuką jest to ogarnąć przez 10 lat.
Bo to wszystko żyje.
Dlatego dzielimy te duże systemy,
szczególnie duże na kawałki,
bo wtedy mamy koszty zarządzania
jednego kawałka i one się nie propagują na resztę.
To jest fragment,
to co macie przed sobą to jest jakiś tam fragmencik.
Fragmencik
z przyczyn, dla których
dzielimy to na kawałki.
I teraz, jeżeli mówimy o
komponentach,
to na to wszystko nakłada się kolejny problem.
System jest duży.
Tych kawałków jest dużo.
A my musimy się komunikować już jako dewelopery,
projektanci. Przychodzi nowy członek
zespołu projektowego.
Aplikację tworzymy,
będzie duża i chcemy się upewnić,
czy te komponenty będą się kupy trzymały.
To nagle się okazuje,
że robimy to samo.
Wyobraźcie sobie,
czy ktoś kiedyś z was rozebrał komputer
na drobne?
Tak.
To ile tam jest tych kawałków?
Każdy ma swój procesor.
Słuchajcie.
Karta grafiki ma swój procesor.
Dysk twardy
ma swój procesor.
Bardziej mikrokontroler.
Jak zwał tak zwał. Tam jest jakaś logika.
Zwróćcie uwagę, ja mówię procesor
w rozumieniu tamte bity
i tak dalej.
Wiele z nich
jeszcze ma w tym EPROM-ie kawałek
programu, tak jak ten sterownik
do wtrysku.
To znaczy, że komputer
tak naprawdę składa się z kilkunastu,
a jak jest duży z kilkudziesięciu małych komputerków
połączonych do kupy.
To jeżeli już to wiecie
i prawdopodobnie wiecie dlaczego.
Zwróćcie uwagę, wymiana karty graficznej
jest bezbolesna dla reszty komputera.
Jeżeli ktoś sobie zmieni dysk magnetyczny
na SSD, reszta komputera tego nie zauważy.
Jak być może wiecie, ekran LCD
ma też swój sterownik.
Czyli ma swój procesor.
Wszystko w komputerze ma swój procesor.
A teraz wyobraźcie sobie, że próbujecie napisać
taki jeden wielki sterownik
dla wszystkiego w komputerze
mając tylko jeden procesor.
Jeden centralny procesor
i tam jest wszystko.
Grafika, dysk,
wszystko tam jest.
To jest koszmar.
Oczywiście mamy takie małe komputerki jednopłytowe,
tylko to są takie pojedyncze rzeczy, wąsko specjalizowane.
Dysk twardy, sterownik ekranu.
One też są w środku podzielone bardziej.
Jednopłytkowe.
Na tej płytce jest w końcu znowu kilka, a nie jeden.
To znaczy, że
nawet takie urządzenie jak komputer,
nawet mniejsze, ten sterownik pralki,
one są połączone na niezależne od siebie komponenty.
Jak wam zdechnie dysk twardy,
to wam zdechła tylko pamięć,
a nie cały komputer.
Dokładnie to jest powód,
dla którego duże systemy
już na poziomie logiki kodu
dzielimy na małe kawałki.
Specjalizowane małe kawałki.
Istotą obiektowości
jest to, że one są niezależne
i wymieniają komunikaty.
Nie dziedziczenie i nie łączenie funkcji i danych,
bo to są akurat antywzorce.
Dziedziczenie powoduje, że wszystko jest monolitem,
a łączenie funkcji i danych
powoduje, że mamy ogromny problem
z obsługą historii chociażby.
Powiem taką mini anegdotę
u mnie z pracy, trzeba też
dzielić, bo wychodzą później nam
monolity rozproszone.
Oczywiście, ale zwróćcie uwagę,
że jeżeli ktoś ma,
mam parę znajomych jeszcze tam
funkcjonują w Microsoftie,
i on mówi, ok Jarek, nie mamy tego Dynamixa,
bo dwóch kolegów pracuje w dziale,
to jest ten duży ERP.
Nasz sprzedawca mówi, że ten ERP
jest modułowy. No nie jest modułowy,
bo spodem jest jedna monolityczna
relacyjna baza na 6500 tabel.
Także to, że tam są jakieś komponenty
to jest ściema, bo nawet jeżeli macie
dwa kawałki kodu, a one
współdzielą te dane, to jak coś się wysypie
to leci jak domino. Jak ta baza leci
cały system. Absolutnie wszystko leci.
Dlaczego? Bo baza jest centralnym punktem
integracji modułów.
Obiektowość chroni nas przed tym,
polega na tym, że
obiekty się komunikują,
jeżeli dwa obiekty mają coś
z sobą wymieniać,
to one się komunikują na poziomie komunikatów,
a nie współdzielą tą samą bazę danych.
Integracja poprzez
współdzielenie bazy danych jest jedną
z najkosztowniejszych i najtrudniejszych
typów integracji.
Bo to jest tak, byście chcieli powiedzieć
OK, ilu was tu jest?
22 ludzi mam na sali, tak?
Co jest lepsze? Jeden wspólny plecak dla wszystkich?
Z przegródkami?
Czy każdy ma swój plecaczek na plecach?
No oczywista oczywistość, nie?
Bo jak ktoś sobie w swoim...
Bo teraz zwróć uwagę na taką rzecz.
Gdybyście mieli jedną wspólną torbę,
czy taką wielką walizkę lotniczą
na 22 osoby, to nawet jak jednemu pęknie
mój ulubiony przykład, tak?
Komuś słoik z dżemem
strzelił w walizce, tak?
Te dwie osoby mają upaprane wszystkie ciuchy.
Nie?
A jeżeli wy będziecie mieli każdy swój plecaczek
i komuś z was pęknie ten słoik
z dżemem, jak ktoś woli
to może być masło orzechowe,
to z 22 ludzi
jedna ma problem,
reszta śmiga, nawet nie wie o tym,
co się stało.
To jest powód, dla którego my duże aplikacje
dzielimy na kawałki, zwane komponentami.
Ale to są komponenty.
I teraz pojawia się pojęcie mikroserwisy
w architekturze.
To jest kolejny wzorzec
na poziomie high level design,
którego będziemy korzystali.
Z czym nam się kojarzy mikroserwis?
Z małym serwisem.
A czym jest ten serwis?
To jest jakiś
kawałek czegoś, kodu,
aplikacji, systemu, który serwuje nam
jakąś konkretną małą funkcjonalność.
No i niestety
to jest problem, że tak nie jest.
Jeżeli ktoś pójdzie w narzędzia,
problemem tej branży jest to,
że ludzie się uczą,
z podręczników narzędzi,
a nie z podręczników akademickich.
Bo
te wszystkie herezje o dziedziczeniu
wzięły się stąd, że ludzie się nauczyli obiektowości
z podręczników C++,
a dzisiejsze problemy z mikroserwisami
wzięły się stąd, że ludzie się nauczyli
z kubernetosa i z paru innych jeszcze rzeczy.
To są tak naprawdę od strony architektury
trochę dramatem, o czym zaraz wam pokażę dlaczego.
Dobra, na razie popatrzmy
tutaj.
Otwieramy okienko.
I na razie piszmy coś takiego.
Microservices.
Architekt A.
Nawaliłem literów, jakby się śpieszy.
Michael.
Dobra.
Obrazki.
Co my tu mamy?
Te obrazki nie są skomplikowane.
Próbuję znaleźć taki mój ulubiony,
bo najstarszy,
żebym miał ideę mikroserwisów.
O, to jest jeden z najstarszych obrazków.
To są mikroserwisy.
Widać?
To jest high level design,
architektura mikroserwisowa.
Mikroserwisem, bo ja czasami widzę
w kodzie, każda operacja
z osobną klasą i to jest dramat.
Bo normalny, duży system,
w miarę duży, to będzie
50, 100 klas, ale nie 500.
To, co mamy na ekranie.
To jest pierwotna
idea mikroserwisów,
polegająca na tym, że my separujemy,
mikroserwisem jest wąsko specjalizowany
dziedzinowy komponent,
a nie jedna funkcyjka.
Co my tu mamy na obrazku?
Po lewej stronie macie klasyczny monolit.
Jedna centralna baza danych,
warstwa dostępu, business logic,
user interface, taka klasyczna java
i przyległości.
Co by się nie sypnęło, to leci całość.
Mikroserwisy, jako ideę mikroserwisu,
idea podziału aplikacji na komponenty,
polega na tym, że
dowolnie większy system, jeżeli jest
więcej niż jedno dziedzinowy,
każdą dziedzinę, czyli ten domain model,
zamykamy w jednym komponencie,
który się nazywa mikroserwis.
Mikroserwis to nie jest jedna pojedyncza funkcyjna,
typu, nie wiem, pierwiastkowanie,
albo dodawanie brutto do netto.
Mikroserwis to jest na przykład
walidacja i trzymanie faktur.
No tak.
I wtedy mówimy o mikroserwisach.
Mikroserwisem jest to, że on ma fakturę.
Klasa faktora ma 15 operacji
i każda z tych operacji jest jednym mikroserwisem,
to to jest herezja.
Nie wiem, czy wiecie, bo to jest herezja.
Mikroserwisem będzie na przykład
po prawej stronie
będziemy coś podobnego robili właśnie na laboratorium.
Mamy taką sytuację.
Mamy aplikację w firmie handlowo-usługowej
i my potrzebujemy
faktury. Widać mój kursor,
tak przy okazji?
Na ekranie?
Tak, widać.
Mamy komponent faktury,
mamy komponent zamówienia,
mamy komponent klienci,
mamy komponent na przykład raporty sprzedaży.
I mamy komponent user interface,
który po prostu wyświetla
on to z perspektywy użytkownika
on to zagreguje do postaci
czterech opcji w menu.
I teraz zwróćcie uwagę na taką rzecz.
Cechą tej architektury mikroserwisowej
widzicie
czy coś was tutaj zastanawia
na tym obrazku?
Zwróćcie uwagę, że nie ma żadnej
poziomej integracji.
Te komponenty się nawzajem
nie widzą.
To jest...
Ma to sens czy nie?
No ma.
Bo jak są niezależne
to nie po co mają się widzieć.
A teraz pytanie brzmi.
Jak przekazać dane z zamówienia do faktury?
Tu macie zamówienie, tu są faktury.
Skąd faktura będzie wiedziała
co było na zamówieniu?
Albo dostała wcześniej od UI-a
w zapytaniu.
Albo powinna być bliżej siebie.
To znaczy ten drugi badań jest gorszy.
Nie powinny być razem.
Jeżeli my wiemy, że...
Bo to jest taki mały haczyk.
Na papierze zamówienie od faktury
się graficznie niewiele różni.
To są zupełnie inne biznesowe logiki.
Zamówienia mają reguły wewnętrzne firmy.
A faktury z ustawy.
One w ogóle żyją własnym życiem.
Teraz ten komponent
on ma tak naprawdę
dwie rzeczy do zrobienia.
On pokazuje użytkownikowi
co mu w tym momencie wolno zrobić
i on robi prostą rzecz.
Jeżeli mamy wystawić fakturę
na podstawie zamówienia
to jest taki scenariusz.
Pokaż listę zamówień.
Użytkownik wybrał jedno zamówienie.
Pobierz całe zamówienie.
Trzymaj sobie w łapce.
Poproś fakturę o nową, pustą.
To co sobie zapamiętałeś z zamówienia
wystaw do faktury.
Wystaw na ekran, żeby użytkownik
uzupełnił resztę.
To znaczy, że przeniesienie danych
z zamówienia, bo to są te pozycje.
Zamówiłem pięć rowerów
na fakturze pięć rowerów.
To znaczy, że ten komponent tutaj UI
on z tego zamówienia wyciągnie
coś.
Pociągnie sobie pustą fakturę.
Do tej faktury to wstawi.
Pokaże na ekranie.
User tam na przykład zmieni z dwóch rowerów
na trzy.
To już jest skończone.
Tu gdyby były dane klienta
to będzie to samo.
Pokaż zamówienie. Tam będą dane klienta.
Gdybyśmy to zamówienie chcieli pierwsze.
I teraz inny scenariusz.
Chcemy zarejestrować nowe zamówienie od klienta.
No to kontekst jest taki.
Kto zamówił? Kowalski.
Pobierz dane Kowalskiego.
Trzymaj w łapie.
Pamięć podręczna.
Poproś o puste zamówienie.
Wstaw tam dane Kowalskiego.
Poproś usera żeby uzupełnił resztę.
Zachowaj.
Nie jest potrzebna żadna pozioma integracja.
W związku z tym tych zależności
jest bardzo mało.
Tu są trzy komponenty.
Ale gdybyście mieli trzydzieści komponentów
i dopuścili żeby one się między sobą komunikowały
to macie tak potężnie uzależnione moduły
w środku od siebie,
że ta aplikacja tak naprawdę staje się
jednym wielkim monolitem. Z powrotem.
Ten mikroserwis
to jest na przykład tak.
Gdybym miał miesięczną deklarację sprzedaży
tam obrotów czy podatkową
to ten mikroserwis nie musi mieć swojej bazy danych.
On po prostu weźmie
no tu akurat strzałki są trochę inaczej.
Tu byłyby zamówienia do faktury.
Weźmie faktury z ostatniego miesiąca
wygeneruje w locie deklarację podatkową
czy tam jakiś raport sprzedaży
i pokaże na ekranie albo na drukarkę wywali.
Koniec.
Ten mini system raportowy dopóki to jest mały
nie musi mieć swojej pamięci
bo on pobiera dane stąd.
Jak się rozrośnie to postawimy z boku hurtownię danych.
Ale nadal tego nie będziemy musieli ruszać.
Bo ten komponent
będzie robić te raporty w locie
jak to zacznie być uciążliwe
postawimy z boku hurtownię danych
i on sobie po nocy będzie brał potrzebne dane.
To jest idea mikroserwisów.
Na tym schemacie
mamy kilka wzorców projektowych.
Przede wszystkim tutaj mamy
jako takie mikroserwisy
to, że całością steruje UI
jest taki fajny wzorcec Saga się nazywa.
Niektórzy tutaj wstawiają po drodze jakieś tam szyny integracyjne.
Chodzi o to, żeby to generalnie separować
i nawzajem od siebie uniezależniać.
Jak się kończy
ignorowanie takich
dobrych praktyk?
Popatrzmy co mówi...
Słyszeliście o gwiazdach śmierci?
Jedne z najbardziej słynnych.
Amazon i Netflix.
Jeszcze Ebay dołączył.
Wiecie co to jest?
To jest architektura
pod tytułem
kilkudziesięciu, kilkuset ludzi robi aplikacje
nikt na tym nie panuje
wszyscy mają malutkie mikroserwisy
i każdy korzysta z czego co może.
Tak to wygląda po kilkunastu latach.
Po kilku nawet.
Oni sami się z tego ośmiewają.
To jest jakaś sztuczna inteligencja.
Nikt nie wie jak to reaguje.
W Ebayu w tej chwili
600 osób jest tylko po to,
żeby wstawić nowy mikroserwis
i przetestować.
600 ludzi, słyszycie?
Tylko po to, żeby bezpiecznie wstawić
kolejny nowy mikroserwis i go przetestować.
Bo
nawet jeżeli początki
to jest źródło.
Jeżeli dopuszczamy, że komponenty gadają
każdy z każdym, bo ktoś tak chciał
to po jakimś czasie jest to po lewej stronie.
To co macie w Netflixie.
Dlatego mikroserwisy
to jest
praktyka, idea, która nie dopuszcza
do tej komunikacji.
Serwisy deweloperskie
się gotują od tego błędu.
A te trzy są jednymi z najbardziej
od tego przybywa.
To są tak zwane słynne wtopy.
Albo jak ktoś lubi, fuck-upy.
Także jeżeli mówimy
o wzorcach projektowych
to one generalnie bazują
na separowaniu.
I teraz na to wszystko nakłada się ten problem.
Ten problem się nazywa
jak to ogarnąć.
Zanim ktoś napisze
te tysiąc linii kodu
czy pięćdziesiąt tysięcy linii kodu
trzeba sobie usiąść z ołówkiem
i narysować te pięć komponentów.
Ten obrazek z mikroserwisami,
który widzieliście przed chwilą
to jest kilka bloczków na kartce papieru.
Jeżeli ktoś projektuje
ma pomysł na nową aplikację
szczególnie właśnie biznesową
to on sobie takich bloczków pięć, sześć narysuje
na tych strzałkach się upewni
że to się w ogóle kupy trzyma
na kilku innych strzałkach, o tym za chwilę
przetestuje ten swój pomysł
i jak pięć czy dziesięć bloczków
uda się komuś połączyć
z strzałkami
i to się w ogóle będzie kupy trzymało
to jest jedna kartka A4
i robota na dwie, trzy godziny
i wtedy dopiero mówimy
okej chłopcy i dziewczyny
to teraz możemy przywalić
te dziesięć tysięcy linii kodu
bo kumamy co ma się wydawać.
A jak ktoś tego obrazka nie zrobi
i będzie próbował napisać
te dziesięć tysięcy linii kodu z palca
to nie ogarnia całości
bo nie jest w stanie
to jest problem z wielkimi aplikacjami
i to nie jest tak
że najpierw napiszemy milion linii kodu
a potem odpalimy sobie automat
który nam z tego UML-a zrobi
bo to już mu start zapowiedzie
rzecz polega na tym
że praca na obrazkach
wersja praca na kodzie
pracochłonnościowo jest nawet jak jeden do stu
to jest problem
jeżeli powiemy sobie
że do tysiąca linii kodu
za pierwszym razem
to znaczy że wpada ten rygor
że to będą mendejsy mendejsy mendejsy
i teraz jeżeli chodzi o UML-i projektowanie
teraz szybko
przełączę się na drugi ekran
zrobimy sobie za chwilkę przerwę
a po przerwie będziemy już rysowali
i kombinowali
zaraz zaraz
żebym czegoś nie zepsuł
okej
dobra
tu jest
a nie to miałem zrobić
dajcie mi sekundę jeszcze
coś zepsułem
dobra jeszcze
raz sekundkę
zdalną tablicę odpalić
okej udostępniamy ekran
widać moją tablicę
dzisiaj jest który
widać
trzynasty dziesiąty dwa tysiące dwadzieścia cztery
no dobra
i teraz tak
a już
tutaj
mamy
i tak
już
za
trzydziesiąt
dwa tysiące
dwa tysiące
trzydziesiąt
dwa
trzydziesiąt
trzydziesiąt
trzydziesiąt
bardzo fajną cechą, która jest
konsekwencją podziału na obiekty,
czy komponenty. Generalnie będziemy mówił o komponentach,
mówili. Zwróćmy na taką rzecz.
Mamy
ekipę remontującą mieszkania.
I jest tak. Hydraulik,
elektryk, tynkarz i malarz.
Pierwsza
najgorsza forma jest
ich tylko czterech.
I oni, żeby przeprowadzić remont mieszkania,
żeby wykonać swoją pracę każdy
we właściwym czasie w kolejności,
to oni muszą sami sobie przekazywać
polecenia. Hydraulik, jak
skończy, on musi wiedzieć,
hydraulik musi wiedzieć, kiedy
wpuszczamy elektryka, a kiedy
od razu tynkarza. To znaczy, że każdy
z tych ludzi tak naprawdę musi znać
minimalnie, w minimalnej
wersji, podstawy
remontowania
mieszkań. Bo oni muszą wiedzieć, komu
kiedy przekazać pałeczkę. Czyli każdy z tych ludzi
będzie obciążony logiką
pod tytułem zasady remontowania
mieszkań.
No to, okej, czyli mamy taką
już początki gwiazdy śmierci, nie?
Każdy do każdego. No teraz, okej, to
mówimy tak. Chłopaków i dziewczyny
damy spokój, zatrudniamy
piątą osobę. Kierownik zespołu.
Okej, było
czterech ludzi, jest pięciu do wyżywienia.
Ale
tych czterech
będzie potrzebowało mniej czasu.
Bo jeżeli mamy kierownika zespołu,
to ten kierownik wie, że
proste remonty to jest
hydraulik, od razu tynkarz i malarz.
Czasami jest tylko malarz. Czyli
ci cztery ludzie nie muszą
wiedzieć, kiedy i po co są
angażowani. Oni tylko czekają na polecenie,
żeby tam pomalować czy otynkować, nie?
Kierownik zespołu sam
w siebie nie potrafi niczego zrobić.
Ale on zna wszystkie warianty.
On wie, w jakiej sytuacji,
w jakiej kolejności ich do roboty
pogonić. I teraz uwaga.
Możemy sobie tak, że kierownik mówi tak.
Ty malarz, weź wiadro, weź pędzel,
idź tam na drabinę i pojedziesz
po tych ścianach tym kolorem, pędzlem, nie?
Czyli on mu tak naprawdę podektywuje,
co ma zrobić.
Sytuacja druga. To samo byłoby z hydraulikiem
i tak dalej. Sytuacja inna jest taka.
Malarz
jest mistrzem świata w malowaniu.
Jemu nie trzeba mówić, że farba,
że pędzel, że drabina. Jemu tylko
trzeba powiedzieć, co ma pomalować.
To znaczy, że logika malowania,
czyli koordynator zespołu w ogóle
może nie mieć pojęcia o malowaniu,
bo cała wiedza o malowaniu jest skupiona
w głowie malarza. Ten malarz co prawda
nie wie, jak się remontuje całe mieszkanie, ale
doskonale maluje, nie?
I teraz to samo jest z elektrykiem,
z tynkarzem i z hydraulikiem.
I teraz mamy sytuację prostą, bo
jeżeli kierownik zespołu
powie, malarz, do roboty.
Co się wydarzy?
Malarz będzie...
No pomaluje, bo nic innego nie potrafi.
On nic innego nie potrafi.
A teraz ten kierownik zespołu
mówi, hydraulik,
do roboty. Co się wydarzy?
No rury się położą, nie?
Zwróćcie uwagę, że mamy cztery różne obiekty
i każdy z nich ma jedną operację
o identycznym brzmieniu.
Do roboty.
To znaczy, że efekt, jaki uzyskam,
nie zależy od tego, co powiem,
tylko do kogo się zwrócę.
To znaczy, że mam bardzo uproszczone
słownictwo.
Największym problemem dużych
operacje
to są nazwy.
Jeżeli chcemy uzyskiwać różne efekty,
to tych nazw się robi dużo wtedy.
Tak?
W aplikacjach jest ogromny problem
z nazewnictwem, bo nam bardzo szybko
zaczyna brakować słów w języku tam polskim,
angielskim, whatever, tak?
A jeżeli korzystanie z polimorfizmu
polega na tym, że jeżeli chcemy coś zrobić,
to wystarczy, że wiemy, do kogo powiemy.
Już nie musimy wiedzieć, jakie to jest polecenie,
bo to jest to samo. Do roboty. Zrób coś, tak?
Malarz, do roboty, tak?
Czyli pełny remont mieszkania. Hydraulik, do roboty.
Elektryk, do roboty. Tynkarz, do roboty.
Malarz, do roboty.
Małe odświeżanie mieszkania. Malarz, do roboty.
Kierownik zespołu ma jedno proste polecenie.
Do roboty. On tylko wie
raz Kowalski, raz Nowak.
To bardzo upraszcza
pisanie kodu, konserwowanie
i przyszłe zrozumienie.
Bo to, co robi obiekt,
zależy od niego,
a nie od tego, jakie ma operacje.
To znaczy, że z perspektywy
projektanta, my mamy jakieś obiekty.
Obiekt A
jest jakiś obiekt B
i jeden do drugiego
coś mówi.
Tak naprawdę
wywołuje go operacje.
Ja na razie celowo nie rysuję tam tych atrybutów,
operacji i tak dalej. Po prostu A mówi do B
zrób coś, tak?
Jeżeli są dwa, no to pikuć.
Jak tego jest dużo,
jak tego będzie dużo
i tu się, to właśnie nie dopuszczamy
do tego A, B, C, D.
Nie dopuszczamy do tego, żeby każdy
gadał z każdym,
bo będzie bardzo szybko gwiazda śmierci,
tylko natychmiast
robimy z tego
człowieka, z tego obiektu
koordynator.
Jeżeli one
niczego nie współdzielą, to każdy
ma swoje repozytorium w środku
i nikomu, nikogo do tego
repozytorium dopuszcza.
Każdy z tych ludzi ma swoją szafkę w pokoju
i do tej szafki nie wpuszcza nikogo.
To znaczy, że nikt, bo ta szafka
jest bardzo ważna, bo
ta szafka, to tam są jakieś dokumenty,
walidowane.
Te dokumenty mogą mieć mniej czy bardziej wyrafinowane
formy ich tworzenia i tak dalej.
To znaczy, że jedynym sposobem,
no tak jak macie w dziekanacie,
jedynym sposobem, żeby dostać
kartę studenta, jest
podejść do dziekanatu i poprosić
panią, żeby dała. Nikt was do tej
szafy bezpośrednio nie wpuści.
Bo byście mogli zrobić coś, czego nikt się
nie spodziewa albo sobie nie życzy.
To znaczy, że, bo będzie drugim,
to jest podstawowy wzorzec,
czasami się
w różnych formach, na przykład saga
występuje. Rzecz polega na tym, że ten
użytkownik
może tylko uruchomić
miejsce, w którym jest menu, a to menu to są
konkretne scenariusze.
Te, one
między sobą do siebie nie gadają.
I na tym poziomie
high level design, to jest
standardowy wzorzec projektowy.
Popatrzmy dalej.
Jak wygląda w środku taki pokoik?
Mamy tą szafę
i zaczynają się schody,
bo tutaj jest, tutaj przychodzi jakiś
zewnętrzny ktoś, no on tak będzie
chciał mieć. To jest, to całe, to jest
nasze, na przykład A. Nasz komponent
A. Może nawet tak go narysuję.
To jest nasz komponent A.
Czyli jeden taki klocek,
nie A, przepraszam, B.
Jeden taki klocek jak tu.
I to kolejny wzorzec projektowy, na tym low level
design, to się nazywa lepiej lub gorzej low level
design.
Mówi tak, ok,
z zewnątrz, to mamy takiego gościa
przy drzwiach, on nie wpuszcza do środka,
ale na drzwiach jest wizytówka,
nie, tutaj tylko taki operacyjny, tak?
Dział prawny, polecenie,
do roboty, a na innych drzwiał,
dział sprzedaży, polecenie,
do roboty, nie?
I teraz tak, tu jest człowiek, który obsługuje
drzwi, sekretariat, okienko, obojętnie.
Ten mówi, ok,
jak dostanę jakiś kwit,
to ja potrzebuję jakąś logikę, nie?
Starszy specjalista do spraw.
Ok.
Ten starszy specjalista, nie? Wąsko
specjalizowany, mówi, ty, weź co,
zachowaj to, bo ja to nie kumam tej szafy,
ta szafa jest duża. No to mamy
repozytorium,
a repozytorium ma za plecami
szafę, stoi przy ścianie wielka
szafa, to nazwiemy umownie koperty,
o tym za chwilę. Ten wzorzec
nie pozwala na pomijanie niczego,
tego nie wolno robić,
zasada jest prosta, dowolny komponent
na niskim poziomie, ten właśnie dziedzinowy,
nie? Faktury osobne, zamówienia,
to on ma tak, na samym końcu przy ścianie
jest szafa na dokumenty.
Szafa trzyma
dokumenty, ale ich nie rozumie, nie czyta,
nie waliduje.
To jest bardzo skomplikowane.
Dużo półek, dużo segregatorów, lepszy
cyrk. Ta szafa
i oczywiście jedni mają dwie małe
szafy i mało półek
i mają karteczki w kuwetkach, w innym
pokoju będzie duża szafa, półki, segregatory,
koszulki. System
przechowywania dokumentów może być bardzo różny,
raz łatwy, raz trudny.
Nie chcemy tych ludzi
uczyć tej szafy,
to mówimy tak, tu przed szafą
stoi koleś, który tą szafą
zarządza. On tą szafę doskonale
ogarnia, reszta nie musi.
To znaczy, że człowiek, który tę fakturę już
sprawdził, mówi, Kowalski,
zachowaj to na później,
ja tej szafy nie okumam. No to
Kowalski, zwany repozytorium czy archiwista,
bierze ten dokument,
on też go nie czyta, ale on doskonale
się orientuje w tych półkach, segregatorach,
koszulkach, kuwetkach itd.
I on mówi, słuchaj, jeżeli ta faktura
ma unikalny numer, to
ja to schowam i kiedy tylko będzie chciał, to ja
ją znajdę.
I teraz tak, ten kawałek,
to jest wzorzec repozytory,
separacja
dostępu do danych od ich struktury,
ten kawałeczek
nazywa się envelope.
To jest taka ciekawostka, która jest
nie zbyt popularna.
O tym wzorcu mogliście nie słyszeć.
Otóż, wyobraźmy
sobie taką sytuację, że mamy dokumenty,
on ma jakąś strukturę, na przykład faktury
albo zamówienia. Ta struktura się zmienia co roku.
I my nie chcemy się od tej struktury uzależniać.
W związku z tym robimy bardzo prostą rzecz.
Ten archiwista,
on jest tutaj,
ten archiwista
robi prostą rzecz. On tych faktur nie czyta,
bo on tego nie umie, nie chce, on tego nie chce
na oczy oglądać. To on bierze prostą rzecz.
Jak ma dokument, to on
wyciąga kopertę, na tej kopercie
pisze z zewnątrz
ID tego dokumentu i ten dokument bez czytania,
do koperty wkłada.
Tą kopertę dopiero do szafy.
To znaczy, że szafa
z zewnątrz, na tej kopercie
może dodatkowo być ID,
nie wiem, data. Na każdej kopercie może być
ustalone 4-5 atrybutów,
żeby je było łatwo wyszukiwać.
A zawartość koperty jest
tajemnicą i dla szafy,
i dla repozytorium, dla archiwisty.
Efekt jest taki, że my w tej
szafie możemy trzymać dokumenty,
być może powiązane tematycznie,
ale one mogą mieć różną strukturę,
bo tych dokumentów nikt nie czyta.
Liczą się 3, 4, 5 atrybutów
na kopercie. Zwróćcie uwagę
na taką rzecz. Jak działa poczta
na całym świecie?
Jeżeli ja,
przecież każdy człowiek może
wysłać jeden do drugiego
absolutnie dowolną rzecz,
fakturę, kartkę na święta,
list miłosny, cokolwiek.
Poczta nie czyta tych dokumentów,
a doskonale nimi zarządza. Dlaczego?
Bo ona nie czyta dokumentów,
ale naszym obowiązkiem jest dowolny dokument,
o dowolnej strukturze, wsadzić w kopertę,
ale zwróćcie, że koperta ma już
narzuconą strukturę. Adres
nadawcy, adres odbiorcy.
I adres to są konkretne
pola. Koperta ma narzuconą
strukturę, w związku z tym poczta,
każda na całym świecie, poczta polska,
tu Royal Mail i tak dalej,
doskonale zarządza
milionami listów, nie czytając
ich.
Ten wzorzec projektowy właśnie nazywa się
koperta, envelope.
To znaczy, że tutaj,
rysuję jak to wygląda realnie.
Mamy klasę, która się nazywa
faktura. Ta klasa ma
operację przywołaj-zachowaj i ona ma
dwa atrybuty. ID
i na przykład JSON-dokument.
A tu jest tylko dawaj-zachowaj.
I nic więcej.
Gdybyśmy chcieli faktury
znaleźć na podstawie brutto i daty,
to po prostu robimy prosty zabieg.
Kluczowe atrybuty na kopercie.
ID,
cały ten
JSON czy XML,
data,
brutto i dwie operacje.
Schowaj, przywołaj.
Tak działają bazy dokumentowe.
Między nimi Mongo.
To znaczy,
że nawet jeżeli,
nawiązując do tego, co mówiliśmy wcześniej,
zamiast z bazy relacyjnej
wyciągać fakturę
selectem, który ma 50
linii, z tej bazy wyciągniecie
go, wywołując
jedną prostą operację z parametrem
na przykład ID.
To jest jedna linijka kodu.
I wyciągniecie z tej bazy dokumentowej
dowolnie skomplikowany dokument
w postaci JSON-a czy XML-a.
Najczęściej jest JSON,
ale nie tylko.
I to się nazywa koperta.
Envelope.
Ten cały skomplikowany
XML, on sobie siedzi cały
tutaj jako druga ciekawostka.
To tak przy okazji wam powiem,
żeby sobie wybrali porządek.
To jest taka, że
to was myślę, że zaskoczy.
Wiecie, że
dobrze zaprojektowana aplikacja,
która będzie bardzo szybka,
jeżeli chodzi o repozytorium,
nie obsługuje typów danych.
Po co nam typy danych?
To mi powiem.
Po co nam są typy danych?
To jest trochę taka
ewalidacja już.
W sensie...
Może też po tylu coś bardziej
efektywnie znaleźć.
Co innego jak mam na przykład
integra, co innego jak musimy
po stringu coś wyszukać.
Co to jest?
Co to jest?
Data.
Nie, to jest numer faktury.
Pudło.
Żeby wiedzieć, czym jest dany obiekt?
Po prostu...
Problem polega na tym, że...
Kolejne pytanie.
Co robi komputer w 99%?
Porównuje ciągi znaków.
Nic więcej nie ma.
Obiera prąd.
To jest efekt uboczny, negatywny.
Aczkolwiek ten prąd
jest bardzo ważnym elementem,
bo jak będziecie... Im więcej linii kodu
będziecie musieli w ten procesor wcisnąć,
tym więcej prądu pobierze.
Także zupełnie niechcący trafiłeś w bardzo dobry...
parametr jakościowej aplikacji.
Otóż ten ciąg znaków
nie mamy pojęcia, czym on jest.
Dopóki
tu ktoś na przykład
w tej postaci nie napisze
numer faktury,
a nie jakąś datę.
Kolejne pytanie.
Numer drzwi w hotelu.
Macie pokój numer 54.
Jaki to jest typ danych?
...
...
Tekst.
Nie liczba.
Widzieliście kiedyś, żeby ktoś pierwiastkował
albo mnożył numery w pokojach?
...
A widzieliście hotele takie małe,
gdzie pokoje się nazywają
Bratek, Kukułka, Skowronek.
Ja już takich byłem. Nie wiem jak wy.
...
Bo numery pokojów,
wbrew temu co słychać numer,
to są teksty.
...
Kolejna rzecz. A propos rozczarowań.
...
Ile dni roboczych jest pomiędzy 15 maja
a 25 września?
...
...
No porównujemy epocha obu,
tam odejmując jeden od drugiego
i konwertujemy na datę.
... Dni roboczych.
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
wam przyjdzie prawnik i powie tak, wiecie co?
pomiędzy majem a wrześniem są
weekendy, dwie niehandlowe
niedziele, trzy święta kościelne
jednonarodowe, nie ma żadnego wzoru
matematycznego na te święta, jesteście
ugotowani, jesteście ugotowani
robimy prostą rzecz
robimy sobie tabelkę
to jest tabelka tekstowa
i tu jest tak
0101 2024
i tu na końcu będzie
31.12.2024
tak?
tutaj będą napisane
dzień wolny, tak, nie
tak, znaczy się nie, nie, nie
tak, tu będą ewentualnie święta
dla jednego roku ta tabela ma
365 linii
jak macie taką
tabelkę, to stwierdzenie
ile jest dni roboty pomiędzy tym a tym
jest po prostu prostym przelechaniem
się kursorem, tempa, prosta, tania
operacja na tablicy
po prostu zliczamy ile linii jest
że to są dni
robocze, czyli nie są świętem
i nie jesteście się w stanie pomylić
tablica
na 365 wierszy
jest jednym z najszybszych
sposobów frulowania kursorem
i filtrowania
czyli na tej tablicy
zrobicie to samo co paluchem
jak ktoś wam powie ile jest dni
roboczych pomiędzy 5 maja a 18 października
to lecicie paluchem
i zliczacie czarne dni w kalendarzu
operacja jest prosta jak konstrukcja cepa
na typach danych
data w bazie danych jest praktycznie
a wykonalna
dlatego wielu ludzi
tego nie robi
taka ciekawostka dla was
sobie kiedyś się pobawcie
zwróćcie uwagę, że przetrzymywanie
danych w postaci tekstów
jest najprostszą, najszybszą
i najbezpieczniejszą rzeczą pod słońcem
i to jest
bo sama
sama baza danych się bardzo upraszcza
bo ten motor baz danych jest
koszmarnie prosty
nie wiem czy wiecie
ja robię takie eksperymenty kiedyś z studentami
jak wam się wydaje
macie bazę, macie jakąś tabelę
niekonieczny kalendarz
na 100 tysięcy wierszy
takie hipotetyczne dokumenty
gdzie jeden dokument to jest
jeden wiersz takiej tabelki
tam będą redundancy, wszystko
i to będzie plik CSV na dyskie
identyczne dane
zapiszemy do bazy SQLowej
i usuniemy redundancję
jak wam się wydaje, który system będzie szybszy?
ten CSV będzie kilka tysięcy
razy szybciej działał
dlaczego?
bo nie ma żadnych operacji sklejania tabel
ani kluczy
dlatego taki Facebook
czy Amazon działa na bazie KeyValue
i na bazach dokumentowych
baza KeyValue zwana SQLowa
to zwykły dysk twardy
dowolne coś, co jest fakturą, zdjęciem, czymkolwiek
jest plikiem JPEG czy JSONem
i on ma tylko swoje ID
tak jak plik na dysku
czym to jest, jest w jakiejś tabelce
to wygląda mniej więcej w ten sposób
że jest tutaj ogromna terabajtowa przestrzeń
gdzie wszystko ma swoje ID
tu jest jedna duża tabela
która ma ID
a tu jest odnośnik do tej przestrzeni
a tu jest aplikacja i jej logika
ta aplikacja widzi płaską tabelę
i ID tego czegoś
a to, czy to jest plik JPEG
czy to jest JSON
nie ma znaczenia
bo ta cała przestrzeń, która jest pierońsko szybka
nie przetwarza struktury danych
w ten sposób na przykład działa cały eBay
i wszystkie bazy zdjęć
metadane są w tej tabelce
mimo tego, że plik JPEG
zawiera w sobie IPTC danych
one są przepisane tutaj do kilku kolumn
nie da się szybciej
to są terabajty danych
i albo jest to baza key-value
gdzie są tylko dwie kolumny
ID i odnośnik do miejsca na dysku
gdziekolwiek
albo jest to baza wielokolumnowa
wtedy jest to najczęściej baza dokumentowa
bo ma jakieś metadany jeszcze
to podaję jako przykłady
tutaj jest tylko jeden typ danych
tekstowy
jak to są cyfrowe rzeczy to mamy base-64
na przykład
wszystko zamienia się na tekst
z czego wynika to, że używamy tekst
że tak naprawdę wszystko jest stringiem
ciągiem znakowym
jak wam się wydaje
z czego to wynika
bo między dwoma systemami w sieci
nie da się przesłać typów danych
bo wszystkie zapytania restowe to są teksty
nie jesteście w stanie między komponentami
przesyłać typów danych
one mogą być w różnych językach
napisane
to znaczy, że operowanie typami danych
strasznie komplikuje cały system
najbezpieczniejszą formą jest tak
mamy repozytorium
bierzemy jakiś string
jeżeli potrafimy go zinterpretować
bo to był znacznik XML-owy
to my albo wykonamy operację mnożenia
albo wykonamy operację porównania
bo raz to jest nazwisko
a raz to jest
jak to jest moja data urodzenia
to będzie porównanie ciągu
będzie porównanie ciągów
a jak to będzie moja waga
a system w windzie będzie chciał zobaczyć
okej, waga ma nośność 300 kg
mamy taką sytuację
wyobraźcie sobie aplikację
wszyscy ludzie mają jakieś tam RFID-y
załóżmy, nie wiem
przyspawane do tyłu głowy
tam jest napisane między innymi ile on waży
no i wchodzicie do windy
winda ma czytnik RFID-ów
i tylko bierze
wlazło 6 ludzi
to ten czytnik sczytał każdemu z tego RFID-a
ile waży
jak suma przekroczyła 300 kg
to komunikat
jeden wychodzi
jak to działa
to działa w prosty sposób
w tym RFID-zie jest moja waga
w postaci tekstu
tak samo jak numer 51
ja ważę więcej
na drzwiach hotelu
ale RFID wysyła takiego hipotetycznego
JSON-a czy XML-a
waga 64
to ten system w windzie
bierze ciąg znaków ASCII 64
on dopiero go zamieni na liczbę
wykona sumowanie
i zatrzyma windę
jeżeli repozytorium
nie przetwarza typów danych
jest masakrycznie lekkie
przecież po co mi informacja
o typie
typu liczba naturalna
w 4 milionach rekordów
skoro w danej chwili
mnożony czy dzielony jest tylko jeden
czyli ja sobie pobieram
ten ciąg znaków z tej bazy
czym by nie była
z logiki wiem że to jest data
albo że to jest numer pokoju
a nie waga pasażera
wykonam jakąś operację
zgodnie z jakąś metodą
albo algorytmem
bo teraz pytanie mam do was
jeżeli macie adresy
przy ulicy
i ktoś wam powie proszę pana
ja mieszkam pod numerem
jerozolimskie 145
a mój szwagier
mieszka 5 budynków dalej
jaką operację zrobicie
proszę pana
no nie dacie 5
bo to nie ma sensu
musicie wiedzieć
że jeżeli to są domy przy jerozolimskich
tu jest 125
tu będzie 127
bo to po tej stronie nieparzystej
biorąc pod uwagę 4 wyburzenia
tu będzie 129
a tu będzie 141
i operacja pod tytułem
szwagier mieszka 5 numerów dalej
co by to nie miało znaczyć
to jest raz dwa trzy cztery pięć
szwagier mieszka tu
a tu może być 167
może być w ogóle 18
tak
po drodze zmieniły się standardy jakieś
oczywiście
to znaczy że tak naprawdę jedynym sposobem
odpowiedzenia sobie na pytanie
kto mieszka 5 numerów dalej przy tej ulicy
jest posiadanie mapy tej ulicy
nie ma innej metody żadna operacja matematyczna
nie kupi
to znaczy że tej matematyki w systemach biznesowych
praktycznie nie ma
słuchajcie gdzie byście nie kopnęli
praktycznie nie ma tam żadnej matematyki
jedyna matematyka
są przypadki dla dużych baz danych
gdzie warto użyć już jakiejś formy
dzielenia z tekstu na inne typy
to znaczy się
jeżeli macie hurtownię danych
w której macie gwarancję
że ta tabela to są wartości brutto faktur
i tu jest numer faktury
i tu jest wartość brutto
to może mieć sens deklarowania tej tabeli
jako wartości walutowe
bo tam są miliony operacji
na tej jednej tabeli
przy paraportach
też w niektórych przypadkach
dla indeksów samych żeby zaoszczędzić
tak czasami
często indeks nie jest tekstem
a po prostu jest kolejną liczbą naturalną
dlaczego no bo na tych indeksach mówimy
5 rekordów dalej to jest oczywiste
ale 5 numerów dalej
nie działa przy ulicy
dlatego hurtownie danych
to są zupełnie inne konstrukcje
ale w hurtowniach danych nie ma dokumentów
tylko są dane do przetwarzania
właśnie często matematycznego
że suma obrotów
że ile nie wiem
podzielmy sumę obrotów na województwa
ale tego nie robimy na dokumentach
bo to jest masakrycznie skomplikowane
dlatego najczęściej jest tak że jest repozytorium
jakieś tam
proces zwany ETL
i mamy hurtownie danych tamte
te wymiary nie te śmieszne gwiazdeczki
od dawna wiadomo
żeby tych dwóch rzeczy nie robić
na jednym repozytorium
natomiast my mówimy o systemach biznesowych
gdzie cechą systemu biznesowego
jest to że
każda operacja dotyczy jednego zdarzenia
jednego człowieka jednej transakcji sprzedaży
jednego roweru
nie robimy operacji masowych w biznesie
to jest dlatego
separujemy to
i w tej części biznesowej paradoksalnie
najwygodniej jest wszystko trzymać
w postaci tekstu dlatego bazy dokumentacji
walutowe wszystko trzymają w jasonie
i nikt nie bawi się w typy danych
po prostu musicie mieć
gdybyście chcieli coś tam nie wiem
brutto wyliczyć czy zwalidować fakturę
to bierzecie fakturę w postaci tekstowej
dopiero po swojej stronie
wy nie baza danych wy interpretujecie
że kolumna podatek to są cyferki
w procentach
że kolumna netto i brutto to są cyferki
dwa miejsca po przecinku
do pomnożenia czy do podzielenia
czy tam format walutowy whatever
ale wy ten typ danych jest potrzebny
w cudzysłowie walidacji
a nie w bazie danych
w bazie danych jest zakało
masakrycznie komplikuje to repozytorium
no i dobra także mamy
podstawowe wzorce omówione
bo będziemy na podstawie ich tworowali aplikacje
to jeszcze wam pokażę jedną rzecz na koniec
której być może nie widzieliście
zrobimy zaraz przerwę
a po przerwie będziemy
dostaliście maila
że macie sobie zainstalować w wizualach
chyba że ktoś siedzi na sali laboratoryjnej
dostaliście mam nadzieję
było
jak ktoś tego jeszcze nie zrobił
to już może zaczynać
a ja wam pokażę w międzyczasie
przed przerwą jeszcze jedną prezentację
dosyć ciekawą
w miarę świeżą
to wy sobie odpalajcie instalatora wizuala
macie klucze akademickie
to jest licencja
no tak przy okazji
jako studenci macie prawo tego używać
do wszystkich dowolnych rzeczy
no komercyjnych i tak się nie da
bo tam będzie znak wodny licencja akademicka
i tak dalej
bo autoryzowani jesteście
przez numer mailowy
adres mailowy uczelniany
a ja szybko tylko znajdę
tą prezentację którą wam chcę pokazać
przed przerwą
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
architektura kodu
Udostępniamy, teraz włączymy gdzieś inną przerwę, a z dźwiękiem.
To jest bardzo ciekawa prezentacja, ja wam potem wyślę linki do obu.
Widać?
Widać.
Dobra, co my tu mamy? Otóż prezentacja to jest pan, jeden z bardzo znanych wykładowców, który ma też referaty i się plącze po świecie, pan John Osterhout.
I on, to jest jego jedna z bardziej znanych prezentacji. Ja celowo biorę w miarę świeże, ta ma dwa lata, tak? Staram się wam nie pokazywać jako wykładowca.
Są rzeczy z tych 30 lat, które mają sens, tak? Ale chcę, żebyście wiedzieli, że to jest temat gorący, tak? Dwa, trzy lata, widzieliście, tak? To są ciepłe rzeczy, ciepłe jeszcze bułeczki w tej branży.
Otóż, o czym ten człowiek mówi? Ta prezentacja w ogóle, to jest...
To jest...
To jest prezentacja, która była na jednym z konferencji,
taką wprowadzającą.
Czym się różnią świetni programiści od pozostałych?
Nie taki, wiecie, zwykły proszek i tak dalej, nie?
I cóż my tu mamy? No nie będę teraz całej puszczał.
To jest ważny slajd.
Co jest problemem w tej branży?
Dekompozycja systemu na kawałki.
To jest największe wyzwanie.
I teraz ta dekompozycja,
tutaj on napisał, że elita programistów
jest ponad dziesięciokrotnie efektywniejsza.
Jak wam się wydaje,
co to jest efektywność programisty,
czy zespołu deweloperskiego?
Co to jest ta efektywność?
Efektywność to jest czas,
jaki upłynie od momentu,
kiedy ktoś zgłosi problem biznesowy,
do momentu, kiedy dostanie ten ktoś
działającą biznesową aplikację,
a jej wysoka jakość polega na tym,
że ona relatywnie szybko powstała
i jest tania w utrzymaniu.
To jest efektywność dewelopera, programisty.
Jeszcze zobaczycie,
software engineer, programmer
to są zupełnie dwie inne rzeczy,
a to to później.
Otóż, przepajny referat,
ma około godziny.
Pokażę wam tylko jedną rzecz z niego.
A propos architektury, tak?
A propos architektury...
O!
To jest ten fragment.
O kurcze!
To jest ten fragment.
Nie ten.
Nie ten.
O! To miał być.
To jest jeden
z kluczowych
elementów, sposobów
tworzenia dobrej architektury.
Otóż, co to jest?
Jeżeli komponent,
na przykład będący klasą,
to ten obrazek,
to zielone,
to jest interfejs,
ilość operacji w interfejsie,
powierzchnia,
to jest, że tak powiem,
logika, funkcjonalność tej klasy.
Czyli ta klasa coś robi, tak?
Tam jest upchana jakaś logika, metody, whatever.
I teraz, tak zwane szerokie klasy,
to są klasy,
które mają bardzo bogaty interfejs.
Jest cała masa operacji.
Czyli, żeby z tej klasy skorzystać,
trzeba wydać
jej bardzo dużo poleceń,
i jeszcze wiedzieć, w jakiej kolejności
należy to zrobić.
Klasy tak zwane wąskie i głębokie,
to są klasy, które
ukrywają całą tą logikę,
a interfejs idealny,
to jest jedna operacja.
Co to powoduje?
Powoduje to, że jeżeli mamy klasę,
która ma wiele operacji,
to znaczy, że reszta systemu
jest silnie uzależniona
od tego interfejsu,
bo to jest tak z tym malarzem, nie?
Weź farbę, weź drabinę,
wejdź na drabinę, umocz pędzel,
pojedź po ścianie, tak?
To jest właśnie klasa, która ma bardzo płytki,
szeroki interfejs, tak?
Możemy malarzowi wydać, po prostu
podyktować mu, co on ma zrobić.
A jeżeli mówię nie,
cała ta logika, że trzeba na drabinę wejść,
że jak jest na dole, to nie trzeba na drabinę wejść,
że pędzel trzeba umoczyć w farbie,
bo suchy nie maluje,
ukrywamy tą całą logikę w środku
i mówimy tylko malarz do roboty.
To znaczy, że ta klasa,
niezależnie od tego, jak bardzo zmienimy jej
w przyszłości, jej logikę,
nikt tego nie zauważy,
bo jest cały czas jedno polecenie, do roboty.
Zwróćcie uwagę na taką rzecz.
Jakbyście zatrudnili człowieka do sprzątania mieszkania
i powiedzieli tak, wiesz co, ty, Kowalski,
weźmy szczotkę,
przeleć się po mieszkaniu,
nie zapomnij o kuchni,
pamiętaj, żeby tą szczotkę co chwilę odszepać,
jak to wiaderko będzie pełne,
zaczynamy mówić osobie sprzątającej,
że ma posprzątać.
No to idziemy w tym kierunku,
deep classes.
I mówimy tak,
zatrudniamy do sprzątania człowieka,
któremu ja nie muszę mówić, co ma robić.
I jak przyjdzie Kowalski, tak,
Kowalski, posprzątaj.
I Kowalski ma całą tą logikę w głowie,
że on ma po pokojach polecieć rekurencyjnie,
że te koty ma wszystkie pozbierać,
on to wszystko wie.
Ja mu tylko mówię,
czyli ja, żeby skorzystać z klasy sprzątacz,
wystarczy, że powiem, do roboty.
Jaki jest tego pożytek?
Taki, że jeżeli cała rodzina się nauczyła,
że jak krzyknie,
Kowalski, do roboty,
to mieszkanie jest odkurzone i posprzątane w ciągu godziny
i nagle przychodzi ktoś z was
i mówi tak, wiecie co?
Kupiłem sobie odkurzacz rumba,
to taki, wiecie, odkreslony sam do taki robot.
I teraz ten odkurzacz rumba ma mikrofon,
ja mu ustawiłem interfej w ten sposób,
że jak ten mikrofon zarejestruje
polecenie
Kowalski, do roboty,
to ten odkurzacz zasuwa po chałupie.
I teraz cała reszta rodziny,
od dwóch lat,
Kowalski, do roboty,
wyczyszczony,
a ja teraz całkowicie wymieniłem implementację,
wywaliłem gości,
bo za dużo żar,
kupiłem odkurzacz rumba,
ustawiłem mu interfejs, żeby reagował
na polecenie Kowalski,
wstawiłem ten odkurzacz rumba do mieszkania,
Kowalskiego zwolniłem z roboty
i zwróćcie uwagę,
że nikt z członków rodziny
nie zauważył tej zmiany,
a nadal ktoś reaguje na polecenie do roboty,
nie Kowalski.
Łapiecie?
Wymiana komponentu,
całkowita wymiana implementacji
jednego polecenia,
dlaczego?
Bo ta reszta nie musi tłumaczyć Kowalskiemu,
co ma robić,
tylko Kowalski miał prosty interfejs,
jego nazwisko, ID, Kowalski, do roboty.
Wymieniłem Kowalskiego
na odkurzacz rumba
i reszta wielkiej rodziny
nawet nie poczuła różnicy.
Nie musieli się uczyć obsługi odkurzacza,
bo on nadal reaguje
na hasło Kowalski do roboty.
To jest
idea wąskich interfejsów
i głębokich klas.
Aplikacja,
trzeba trochę pomyśleć,
żeby tą klasę zaprojektować,
ale aplikacja staje się bajecznie prosta
i tania w utrzymaniu i rozwoju.
I teraz na tym tle
mam do was pytanie.
Jeżeli ktoś ma aplikację
czy framework,
gdzie są klasy,
które mają wiele atrybutów
i każda z tych klas
ma operację get set,
to co to jest?
Co to znaczy,
że ktoś ma klasę na przykład faktura
ona ma 40 atrybutów
i żeby tą fakturę wyciągnąć
to ja muszę powiedzieć tak
get data wystawienia,
czyli ja muszę wydać 40 poleceń
w tej klasie
jak dostanę te rzeczy
to ja muszę po swojej stronie
sklecić do kupy tą fakturę
i muszę wiedzieć jak ona ma wyglądać
a jak mi ktoś zmieni treść faktury
to ten cały kawałek kodu
nadaje się do przepisania.
Żart?
To jest dramat projektowy,
który jest częścią bardzo wielu frameworków
z Java E na czele
i w większości C++
z bazami danych.
To jest absolutny dramat.
Grzebanie w tym to jest
tak zwana jedna wielka bryła błota.
To się nazywa big ball of mud,
kolejny antywzorzec.
Dlaczego wam o tym mówię?
Po pierwsze dlatego,
że masa frameworków,
wiele z tych frameworków
w latach 90
gdzie zostały przeniesione
logika pod tytułem tabelka
i kolumny w tabelkach
na przykład Java EE
i część frameworków C++
dotnet podobnie.
Oczywiście można by napisać inaczej, lepiej.
Ale wielu ludzi jak małpa korzysta z tych frameworków.
Wiele narzędzi IDE
natychmiast generuje get set dla każdej klasy
jak tylko naciśniecie jeden klawisz.
A to jest absolutny dramat.
Bo skorzystanie z danych w jednej klasie
wymaga wydania
wywołania kilku, kilkunastu, kilkudziesięciu operacji
i wykonania operacji ostatecznej
po swojej stronie.
A gdybyście mieli klasę,
która nie ma 30 getterów, setterów
dla faktury, tylko ma jedno
dawaj fakturę, zachowaj fakturę
i na polecenie dawaj fakturę
wylatuje wam w jednym kawałku
JSON czy XML
to jest tak zwana poezja prostoty.
To jest ta prawa część, to jest to.
Świetna prezentacja na temat
budowania architektury
i tu właśnie
człowiek wam tłumaczy
na czym to polega, że z zewnątrz
mamy aplikację
ta wystawia faktury z zamówień i ta
tylko z jakiegoś powodu
jedna jest ponad dziesięciokrotnie
droższa w wytworzeniu i utrzymaniu.
A z perspektywy usera robią to samo.
Drugi powód
jak ktoś wam powie, że
jest świetnym zespołem, bo dowożą projekty
to ja powiem
łaski nie robi, bo dzisiaj
decyduje o tym niestety główny księgowy.
Dowożenie projektów
jest tak samo bezsensowne
w sensie nie wiem kiedy i za ile
ale w końcu będzie działało
jak przywiezienie człowieka na lotnisko taksówką
5 minut po odlocie samolotu.
Ten taksówkarz dowozi wszystkich.
Mało kto zdążył na samolot.
To jest problem dzisiejszego biznesu
dobrych kilku lat.
Nie jest żadną sztuką w końcu
wyrzeźbić tą aplikację.
Sztuką jest, żeby ona była do końca roku.
Bo taki jest plan marketingowy.
Dowożenie nie jest
żadnym sukcesem.
Łaski mi nikt nie robi.
Dlatego my zaczynamy się przepraszać
z wzorcami projektowymi, z UML-em itd.
Dobra.
Robimy jeszcze przerwę.
Widzimy się za 10 minut i wszyscy już macie
odpalonego wizuala, prawie przynajmniej.
Jakieś pytania?
A, jeszcze jedna uwaga.
Pomyślcie sobie jaką aplikację
byście chcieli na tym laboratorium zaprojektować.
Obsługa kina, sprzedaż z magazynu
co tam, wymyślcie sobie coś.
No bo będziemy robili razem wszyscy jedną.
Każdy osobno, nie będzie pracy grupowej.
Będziemy projektowali jakąś aplikację.
Nie będzie to jakiś mega system, bo nie będzie czasu.
Ale aplikację taką
nawet powiedziałbym średnio zaawansowaną
jesteśmy w stanie do końca tego laboratorium
zaprojektować.
To teraz lecimy na przerwę, a wy kombinujecie co byście chcieli stworzyć.
Dobrze.
Dzięki za uwagę.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
No dobra.
Jesteście już po przerwie?
Chyba tak?
Chyba tak?
Chyba tak?
Dobra.
Kto ma pomysł? Jaką aplikację zaprojektujemy?
Kto ma pomysł? Jaką aplikację zaprojektujemy?
Ja mam swoją.
Którą bym chciał zrobić.
Powiedz.
Prosta taka aplikacja do przetrzymywania
informacji ile jest książek.
Taka biblioteczna,
pseudo.
No dobra. Biblioteka nie jest głupym pomysłem.
Nawet chyba kiedyś była robiona.
No dobra. Biblioteka, tak ci rozumiem?
Książki, zbiór zasobów, wypożyczenia, zwroty, tak?
Tak, wraz z dodatkami.
Że rekwestor tego,
zgłaszanie na przykład, że chcę
jakąś książkę, żeby była dodana do biblioteki.
Przeszukiwanie z jakichś
zewnętrznych źródeł, to już tam.
Że chcę
tą książkę, że wpisuję nazwę
i z zewnętrznego mi pobiera
jakieś książki do wyboru na przykład.
Tak?
Tak.
Są jakieś sprzeciwy, czy nie ma?
Nie słychać.
No dobra, to polecimy biblioteką.
Ja teraz szybko uruchomię.
Wy uruchamiajcie bieżące paradigma.
Nie będziemy robili osobno
szkółki, tylko będziemy na bieżąco
pracowali tak, że będziecie widzieli co ja klikam.
W zasadzie będziemy to robili razem.
Będziemy razem na ten temat dyskutowali,
robili, ja wam będę mówił dlaczego
ta czy inna forma jest lepsza czy gorsza, jakie ma wady
i zalety, a wy będziecie
wizualu. W zasadzie wszyscy
odtwarzali to, co ja będę robił.
Oczywiście będziemy to robili razem, ale ja będę tutaj
tym
gównodowodzącym, że tak powiem.
Nie będziemy się bawili
tak, że ja wam dam zadanie,
a po dwóch tygodniach się okaże, że wybraliście
kiepski pomysł.
Tylko będziemy to robili razem.
Zakładam, że więcej się nauczycie,
a przy okazji poznacie wizuala jako nawędzie.
Otóż pierwszą rzeczą,
my na uczelni mamy wizual paradigma,
ale celem tego laboratorium są dwie rzeczy tak naprawdę.
To laboratorium ma dwa zadania.
Pierwsze zadanie nauczyć was projektowania
aplikacji na poziomie high level design
czy w ogóle na poziomie projektowania bez kodu.
Zobaczycie, że to się da
i to ma ogromne zalety, a po drugie
nauczycie się używać
profesjonalnego
narzędzia projektanta, bo
niestety takie zabawki jak
Dravio czy Lucidchart
to są zabaweczki, czy tam jakieś Miro.
To są po prostu zabaweczki na poziomie
powerpointa. Bardzo kosztowne.
Nie dlatego, że są
one są tanie w internecie.
Kosztowne, bo jak ktoś sobie zrobi w Miro
15 schematów blokowych, a potem
go kierownik projektu poprosi o dokumentację
A4 na 30 stron, bo klient
żąda, to będziecie klepali te
JPG po nocach przez dwa tygodnie.
Aplikacje typu
CASE Computer Aided System Engineering
to są aplikacje, to jest taka aplikacja
to są narzędzia pracy
no takie podobne do jakiegoś tam nie wiem Autocada
nie wiem, być może widzieliście w telewizji
siedzi sobie człowiek, ma takie 3D
i on tam te kółka zębate, skrzynie biegów
on na rysunku przetestuje, że to się kupy trzyma
naciska guzik, wyskakuje specyfikacja
do magazynu, to macie wziąć z magazynu
to macie do kupy złożyć, będzie silnik.
To my w tej branży mamy takie same narzędzia.
Czemu są duże, kosztowne
i pracochłonne? Jest dokładnie odwrotnie.
Jest dokładnie odwrotnie.
Bo wygenerowanie dokumentacji z takiego narzędzia jak
Visual zajmuje 10 sekund
po dwóch modyfikacjach 200 stron
a jak ktoś ma Miro albo
Dravio to ma robotę na tydzień.
Takie są proporcje.
Pod koniec semestru
sami będziecie widzieli
różnicę. To nie jest moją rolą dzisiaj
was do czegokolwiek przekonywać. To laboratorium
to są dwie rzeczy. Nauczyć się projektować aplikacje
rozwiązywać problemy. Dwa, nauczyć się
robienia tego profesjonalnym narzędziem.
No dobra, ja odpalam
swojego Visuala
udostępniam ekran
i on jest.
Visual, Visual
trzeba go uruchomić
dobra, ok
biblioteka
moment
jeszcze raz
ciach, ciach
okienko
Visual
Powinniście mieć taki ekran po uruchomieniu.
Macie taki?
Tak, tak jest.
Teraz tak, biorąc pod uwagę, że
Visual, jedną z jego przyjemnych cech
to jest zresztą powód dla którego używam
to to, że to jest aplikacja wielojęzyczna
tak, także i żeby nam było łatwiej
to ja wiem, że ktoś z was może mieć przyzwyczajenie
do angielskiego, ale to od razu
dam taką radę rynkową.
Ja mam świadomość, że przeciętny koder
tłucze po angielsku, bo
języki programowania to w zasadzie
innym językiem
nie operują. Problem polega na tym, że
wy z ludźmi w Polsce
musicie się komunikować po polsku
z klientem we Francji po francusku
a w Chinach po chińsku
to znaczy, że dokumentacja ma powstać w 100%
po polsku, a to, że ona
będzie pod maską gdzieś tam
anglojęzyczna to jest inna bajka
dlatego teraz, bo ona się standardowo
uruchamia w wersji angielskiej, także
przełączymy, wy sobie wszyscy
przełączycie na wersję polską
klikamy
okno czy tam window u was będzie
opcje aplikacje
application options
wyskoczy wam taka rameczka
widać u mnie
tą ramkę na środku?
Dobra, wybieramy opcje
ogólne czy tam general chyba
appearance
i tu znajdujemy język polski
i zróbcie to wszyscy, bo ja będę
na laboratorium operował polskimi nazwami w menu
na swój użytek będzie sobie przełączał dowolny język
ale na laboratorium będziemy używali wersji polskiej
i potem mamy kontrola pisowni
zmieniamy ten amerykański
na polski
jak naciśniecie OK
to u was wyskoczy komunikat, że macie wyjść z
Visuala jeszcze raz i wejść
jeszcze raz
jeszcze raz
czyli mamy tak
macie
wersje anglojęzyczne
będziecie mieli window
potem będzie application options
jak wam wyskoczy ramka application options
tam u góry będzie general
znajdziecie zakładkę appearance
i znajdujecie język polski tutaj na liście
odklikujecie to
potem będzie spell checker
kontrola pisowni i wybieramy z listy polski
jak te dwa ustawienia zmienicie
naciskacie OK
i pojawia nam się komunikat, że powinniście
uruchomić powtórnie Visuala
bo on po prostu musi z pliku czytać z dysku
te polskie menu
i zróbcie to tam pewnie wam zajmie
paręnaście, dziesiąt sekund
i teraz tak
jeżeli chodzi o projektowanie aplikacji
to robimy to w ten sposób
ja może się na chwilę przełączę na jeszcze inny
na
uruchomcie tego Visuala
przechodzę na kolejną moją ściągawkę
sekundę
OK
przeglądamy, przeglądarka jest
tu jest moja przeglądarka
OK
dobra
tu moja ściągawaczka jest
od końca lat 90
jak tylko powstały metody obiektowe
w ogóle obiektowe tworzenie oprogramowania
to cykl produkcji wygląda
mniej więcej w ten sposób
to jest jedna z ilustracji
co to jest?
ok
to jest jedna
to jest akurat książka
z 98 roku pierwsze wydanie było
ona się nazywa
Agile Development żeby nie było niejasności
otóż
praca zaprojektowania aplikacji
wygląda w ten sposób
ale musimy najpierw zacząć
zwróć uwagę na taką rzecz
z perspektywy użytkownika
co widzi user? widzi ekrany
nic więcej nie widzi
to znaczy, że my musimy
żeby rozpocząć pracę nad oprogramowaniem
musimy zacząć od umówienia się co będzie w menu
jak już będziemy wiedzieli co będzie w menu
to każda opcja w menu de facto będzie formularzem
jak w menu będzie np. wypożyczenia
no to będziemy musieli mieć
formularz wypożyczenia
jak będzie w menu książka, zbiory, zasoby
to potrzebny jest formularz, nie wiem
jaka jest ta biblioteczna książki
jakoś tam ją nazwiemy i tak dalej
jak będzie np. w menu będzie opcja czytelnicy
to my musimy mieć profil
albo kartę czytelnika
to znaczy, że najpierw
ustalamy do czego ta aplikacja
służy i to są de facto jej opcje
w menu
jak już będziemy wiedzieli do czego ona służy
zawieramy umowę, że pierwsza wersja to służy do tego
zasoby, wypożyczenia, zwroty
nie wiem i tak dalej
dowiecie się, że
czym dla was jest funkcjonalność
jak ktoś mówi, że
ja bym chciał jakąś funkcjonalną
np. wasz kolega powiedział, że chciałby taką
funkcjonalną, że nawet z zewnątrz
będzie mógł pociągnąć dane książki
którą biblioteka powinna mieć
to czym jest ta funkcjonalność
jak ta funkcjonalność się na menu objawi
czym jest funkcjonalność
jeszcze raz
całym takim blokiem
no właśnie to jest największy mit, że funkcjonalności
nie są blokami kodu
chodziło mi, że
tego w obrazku takim blokiem
bo
fizycznie to może być cały serwer gdzieś
działający, coś robiący nawet
wróć uwagę na taką rzecz, że jeżeli ja powiem
że okej mam system
do fakturowania
i chciałbym mieć taką funkcjonalność
żeby było np. żebym ja mógł skojarzyć
fakturę z zewnątrz
z zamówieniem
co to będzie
przychodzi wam biznes
tacy ludzie, którzy generalnie chcą
używać, oni nie mogą tego rozumieć
oni nie są programistami
nie są projektantami
pojawia się wymaganie, powinna być funkcjonalność
polegająca na tym, że ja mogę sobie
łatwo skojarzyć, sprawdzić
fakturę do zamówień
co to będzie
jak to się objawi z perspektywy
aplikacji
to może być user story
ja jako dyrektor handlowy chciałbym mieć możliwość skojarzenia
faktury z zamówieniem
super user story i co teraz
co powinno się wydarzyć w tym momencie
to jest cały kawałek
to jest dużo rzeczy
bo to jest UI wyświetlanie
to jest przy tworzeniu nowego zamówienia
faktury
skojarzenie później z zamówieniem
od razu przy generowaniu
to jest jakiś kawałek, którym skojarzymy już obecne rzeczy
albo zrobić to dynamicznie
że za każdym razem
jak chcemy skojarzyć fakturę
to musimy poszukać zamówienia
albo zrobić to
już przelecimy całą bazę
i zrobimy skojarzenia
w bazie jakiejś
powiemy, że to jest z tym skojarzone
i to zapiszemy
to jest i teraz to co wasz kolega powiedział
to jest ten cały poziom niewiedzy
w tym momencie
to co on powiedział jest wszystko prawdą
pozostaje wybranie metody
w tym momencie
dopóki my nie wiemy co tak naprawdę chcemy zrobić
ani tego nie potrafimy wycenić
ani powiedzieć czy to jest w ogóle możliwe w tej aplikacji
a jeżeli tak to jakim nakładem pracy i środków
od czego byście zaczęli
powiem od razu tak
ten numer z bazą danych będzie najgorszą koncepcją na tym świecie
ale można
to że można to ja wiem o tym
wiecie to jest tak
że widzieliście ten slajd
są ludzie którzy tworzą aplikacje dziesięciokrotnie szybciej i taniej
to my się tego chcemy nauczyć
ten numer skojarzenia w bazie danych
to bardziej mi chodziło
że do wartości faktury
dopisujemy idx
jakim jest skojarzona
z jakim zamówieniem
to już brzmi rasonia
teraz wyobraźcie sobie
że my będziemy projektowali aplikacje
i nigdy na tym laboratorium nie padnie słowo
baza danych, tabele czy to nie daj Boże SQL
cała aplikacja
to jest skończony zestaw
formularzy ekranowych
i jak sobie przypomnicie architekturę mikroserwisów
sprzed przerwy
mamy taką sytuację
jest faktura, jest zamówienie
nie ma żadnej wspólnej bazy danych
to znaczy że ktoś
najprawdopodobniej zrobi coś takiego
zamówienia
nie wiedzą
w momencie kiedy wystawiacie zamówienie
albo je rejestrujecie
nie macie pojęcia
o tym jaka powstanie faktura w przyszłości
no bo nie wiecie
to znaczy że zamówienia
nie będą brały udziału
w tym procesie myślowym
podstawowa zasada aplikacji
szczególnie biznesowych
nie fałszujemy historii
zamówienie przyjęte
na przykład 1 października
sekundę po naciśnięciu OK
staje się dokumentem, zasobem read only
koniec
nie fałszujemy historii
z czego to wynika?
z kodu? nie
ja mogę grzebać jak będę chciał jako programisty
to będę grzebał w tej bazie na 20 lat wstecz
z czego wynika podstawowa zasada
od momentu ich wytworzenia
aplikacje biznesowe mają jedną wredną cechę
one są częścią biznesu
to znaczy że jak ja dostanę zamówienie
to ono jest bardzo prawdopodobne
że jest to papierowy lub pdfowy
podpisany dokument
nie wolno go modyfikować
nie wolno fałszować kwitów
to jest podstawowa zasada systemu w biznesie
papier czy komputer
tego absolutnie nie zmienia
bo jeżeli ja u siebie
jeżeli ja dostałem zamówienie od klienta
to ten klient ma swój egzemplarz u siebie
ja mam jego egzemplarz u siebie
i ja prawdopodobnie w tym moim systemie
przepisałem kluczowe rzeczy do mojej aplikacji
nie mogę tego modyfikować
bo to znaczy że mój dokument będzie inny
niż u klienta, to jest klienta dokument
jak wystawiłem fakturę
i wystawiłem ją, wysłałem do klienta
do urzędu skarbowego
od momentu kiedy faktura dostała OK
jest read-onlym dokumentem
do końca świata
to jest problem aplikacji biznesowych
w związku z tym
jeżeli chcę skojarzyć fakturę z zamówieniem
to robię tak naprawdę
na papierze
upewniam się potem tobie w aplikacji
prostą rzecz
zamówienia są nietykalne
ale ja na fakturze mogę dodać pole
numer zamówienia
w związku z tym żeby wystawić fakturę
muszę wskazać o które zamówienie chodzi
w związku z tym wiem które
zamówienie chodzi
wstawię ten numer na fakturze
w pole numer zamówienia
wypełnię resztę faktury i po krzyku
i problem rozwiązany
natychmiast
co się nie zgadza
jak będę chciał znaleźć
i teraz tak
ktoś mnie zapyta OK
ja jako dyrektor handlowy chciałbym zobaczyć
czy to zamówienie jest zafakturowane
prosty scenariusz
masz zamówienie na ekranie które chcesz sprawdzić
weź numer tego zamówienia
do komponentów faktury
i poproś o fakturę
w której wartość pola numer zamówienia
to jest ten ciąg znaków
uwaga porównanie tekstów
i dowiesz się że taka faktura istnieje
albo że nie istnieje
koniec i kropka
trzy linie kodu i po krzyku
to są dosłownie kilka linii kodu
przeczytaj numer zamówienia
zapamiętaj sobie
idź do faktur
poproś fakturę w której pole numer zamówienia
zapamiętałeś
dostaniesz odpowiedź
i tą odpowiedzią będzie ta faktura
lub będzie odpowiedź nie ma takiej
jak takiej nie ma to zamówienie jest nie zafakturowane
proste
to jest mniej niż 10 linii kodu
użyłem dwóch formatek
dwóch komponentów aplikacji
nawet przez sekundę nie padło słowo SQL bazy danych
taka funkcjonalność powstanie w tej aplikacji
ja to już generalnie
jak ktoś mówi inaczuje tak?
ktoś będzie z kartką papieru w WMLu
wymyśli to w 15 minut albo w godzinę
jak na strzałkach mu się to będzie kupy trzymało
bo on ma te dwa mokapy ekranów
to on powie koleżance kodele od kodowania
ty tutaj masz już takie coś nie?
10 linii kodu
rano zaczęliście pod koniec dnia jest zrobiony i przetestowany
bo to jest taka robota
przez moment
przez moment
największym problemem w aplikacjach biznesowych
jest rozwiązywanie problemów
na papierze
na schematach blokowych
no bo to co wam teraz powiedziałem
to jest standardowe podejście
no ale jak ktoś to pierwszy raz w życiu zobaczył
no to pewnie będzie kombinował
ale pamiętajcie w systemach biznesowych
dokumenty są nienaruszalne
nienaruszalne
nie wolno fałszować historii
to jest podstawowa zasada systemów biznesowych
nie wolno modyfikować faktur wystawionych
cudzych zamówień
w ogóle cudzych dokumentów
niczego
bo pamiętajcie że każdy wystawiony dokument
podstawową logiką świata biznesu
jest to że jak ja wystawiłem fakturę
swojemu klientowi
to u klienta i u mnie jest ten dokument
one się nie mogą nawet na przecinek różnić
bo jeżeli w mój system
pozwala na modyfikowanie faktur historycznych
to was urząd skarbowy rozniesie na strzępy
jak tylko to zobaczy
to jest problem
systemy biznesowe to są systemy które są
trwale one są silnie osadzone
w czasie
możecie sobie w sterowniku w trysku
do samolotu do silnika możecie grzebać
do bólu
w fakturach nie ma ręka boska broni
w historycznych tego nie wolno robić
to jest też problem baz relacyjnych
nie wiem czy wiecie wiele systemów relacyjnych
takich ERPów ma z boku postawione
głupie repozytorium na Sharepointie
i tam są dokumenty historyczne
i historyczną fakturę biorę z Sharepointa
a nie z ERPA
bo ten ERP po dwóch upgradeach ma już inną strukturę danych
i to samo zapytanie SQLowe
dzisiaj da inny efekt niż to samo
sprzed pięciu lat
za to się idzie siedzieć w skarbówce
to jest problem
no dobra czyli mamy taką sytuację
nasza aplikacja to będzie skończona
liczba kilku formatek ekranowych
na tych formatkach będziemy rozwiązywali problemy
formatka ekranowa to będzie
pozycja w menu to są przypadki użycia
w WMLu każdy przypadek użycia
będzie miał jakiś swój jeden dwa trzy scenariusze
i my musimy na poziomie
high level design zaprojektować
te kluczowe komponenty
a na poziomie low level design
w środku każdego komponentu narysować co tam się wyprawia
i koniec
to dajemy te obrazki koderom
ciach ciach i po krzyku
bo jak koder ma
na piętnastu stronach czy nawet na pięćdziesięciu
dowolnie duży system sprowadzony do kilkunastu komponentów
i każdy komponent
jako kod mu się mieści na jednym dwóch trzech ekranów
to on to ogarnie bez problemu
on się nie musi martwić o zależności
między komponentami
bo myśmy je narysowali i przetestowali
taki projekt idzie po prostu
płynie jak rzeczka
takich obrazków znajdzie się dużo
to jest tam nie pamiętam to jest chyba książka
z dziewięćdziesiątego ósmego roku
podręcznik akademicki ze stanów
już tutaj za bardzo przewinąłem
podręcznik akademicki ze stanów
odgrzebie
bo to jest recenzja tej książki
a jeszcze wam pokażę
kilka innych
obrazków
to jest
o to już widzieliście
to jest fragment książki
z dwa tysiące dwunastego roku
podręcznik do inżynierii oprogramowania
to jest kolejna książka
dwa tysiące trzy
te obrazki się niczym nie różnią
przypadki użycia
high level design low level design
to są generalizacje
to są modele pojęciowe
jeszcze będziemy o tym mówili
nie mylcie dziedziczenia
nie mylcie dziedziczenia z generalizacją
potem zobaczycie
ja wam potem pokażę
będziemy mówili o architekturze
tutaj dwa słowa na ten temat
otóż
jeden
to mi umknęło
jeden z sygnatariuszy
Agile Manifesto
Alistair Coborn
on jak robił doktorat ponad dwadzieścia lat temu
uporządkował kwestie architektury
w sensie środowisko i reszta
dla którego powstała java
otóż biorąc pod uwagę
że masakryczna
że macie już ten serwer
i tam ten sklep internetowy działa
i ten cały kod absolutnie cały
od pierwszego ekranu do jakiegoś dna
bibliotek
to będzie jakiś kod
jaka część kodu na serwerze
realizuje logikę biznesową
tak myślicie
to jest około 5%
bo cała reszta
to co nazywamy lepiej lub gorzej
wymaganiami poza funkcjonalnymi
wydajność na jakieś podziały
na jakieś fragmenty tego jest masa
to jest coś czego my nie tworzymy
tylko korzystamy z gotowych rzeczy
to co macie na ekranie
to co Coborn opublikował w 2005 roku
jako tak zwaną architekturę heksagonalną
wtedy to się dzisiaj raczej nazywa
porty adaptery
to jest coś takiego
logika biznesowa to jest to żółte
aplikacja to jest ten kod który powstaje od zera
wszystkie inne rzeczy będące
licencjonowanym czymkolwiek bądź
od sterowników baz danych poprzez jakieś tam
nie wiem mega wypasione
moduły do load balancingu
i tam nie wiem wysyłania
maili czy smsów
obojętnie kodowania ssl
to jest poza tą czarną linią
i to co jest
to żółte to jest aplikacja którą my będziemy
projektowali ta reszta to jest jej środowisko
czyli jeżeli padnie hasło
że ja potrzebuję
dzisiejszą datę
skąd my weźmiemy dzisiejszą datę i godzinę
to środowisko
no dokładnie nikt tego nie wiedział co napisał
tylko po prostu wśród
wielu adapterów do dysku
jest jeden z nich mamy adapter
mamy ileś tam środowisko ma swoje
API tak ja po prostu wiem skąd
mówię tak dawaj datę i godzinę i dostanę
ja nie muszę go kodować
nie muszę tak
a jeżeli będę chciał
zobaczymy jak
kolejne pytanie takie kontrolne
zabawowe
na fakturze trzeba wstawić
mamy tą bibliotekę
i chcielibyśmy żeby na każdej
karcie wypożyczenia było nazwisko
bibliotekarza który akurat był za ladą
jak to zrobicie
ma ktoś pomysł
zaraz będziemy na tym siedzieć
w sensie tak już
nisko czy
macie
jesteście projektantami oprogramowania tak
i przychodzi do was ktoś
to może tak
wam już się to podniosło pewnie zakładam że tak
to teraz
jeszcze bym nie zepsuł
w sensie bo chcę powiedzieć że po prostu zalogowany
użytkownik który wypożycza od razu
przy okazji
jest przy używaniu i nic więcej
ale ten użytkownik w systemie tam nie wiem
w jakimś linuksie windowsach whatever
ma założone konto tak jak moja
koleżanka na gmailu
buziaczek24
to jest jej login i co wpiszesz to na kartę
wypożyczenia
środowisko zna login
środowisko niekoniecznie znia imię i nazwisko
ja mogę sobie jako login wpisać
Jarosław Trochkarzewiński tak mam na gmailu
ale kiedyś miałem to ja Jarek
moja koleżanka do dzisiaj ma
swoje stare konto buziaczek24
i co jej zrobisz no nic
a ty masz napisać po bożemu Anna Kowalska
i co teraz
to skądś muszę zaciągnąć to imię
nazwisko
mogę fizycznie zapytać użytkownika
mogę no
kwestia
taka że każdy użytkownik powinien się
autentykować
do tego środowiska
i teraz zwróćcie uwagę że
to jest dopiero początek problemów
jakie będziemy rozwiązywali
dobra aplikacja
dobrze zaprojektowany system
ma dwie cechy
bardzo trudno wpisywać głupoty
idealne bo niemożliwe
ale jest jeszcze druga cecha
która budzi dużo kontrowersji na świecie
otóż tą cechą
dobra aplikacja nie ma konta administratora
nie wiem czy wiecie
dobrze zaprojektowane oprogramowanie
biznesowe w ogóle aplikacja
nie ma konta administratora
jak wam się wydaje z czego to wynika
bo to znaczy że haker
bezpieczeństwa
normalny haker dzisiaj
nie próbuje łamać szyfrów
bo to jest robota dla komputerów kwantowych na lata
tylko idzie z butelką dobrej wódki
do super usera
albo wamuje się innego konto
bo ma admin login i hasło
admin 123
takich kont nie wolno projektować i zakładać
znaczy wolno
to są bardzo paskudne niebezpieczne aplikacje
zaraz sobie to narysujemy
po kolei macie to co ja mam na ekranie
tak?
dobra i teraz tak
klikamy sobie
a ja mam przekonfigurowane trochę
projekt
klikamy projekt
ja będę starał się mówić wolno
ale gdybym przesadził ktoś się zgubi
to mówcie mi od razu
tak klikamy parametry
i tam w polu nazwa projektu
wpisujemy
biblioteka
albo nie inaczej
aplikacja
wspierająca
pracę
biblioteki
zaraz wam powiem na czym polega problem
sam się zapamiętam własne sidła
aplikacja
otóż przekonacie się
w czasie pracy
aplikacja
wspomagająca
pracę
dlaczego tak?
otóż
każdy system
z kolei na uwaga dla projektantów
oprogramowanie
to nie jest wyspa na pacyfiku
to oprogramowanie jest częścią firmy
w tym przypadku jest to część biblioteki
na czym polega problem
wielu projektantów
że zapominają o tym
że to jest fragment większej całości
to znaczy że
jakbyście poszli
wyjdźcie na ulicę
i zapytacie się pierwszego przychodnia
co oznacza słowo biblioteka
to co usłyszycie?
co oznacza słowo biblioteka?
tak
budynek
to instytucja
to znaczy że słowo biblioteka
nie powinno być nazwą oprogramowania
z uwagi na prostą
należy absolutnie unikać
wszelkich niejednoznaczności
w waszym projekcie
każde słowo powinno mieć
w projekcie jedno znaczenie
to jest jeden z głównych problemów
wielu projektów
ja mam świadomość
że ludzi prawdopodobnie nazwałoby
ten system biblioteka
i to już jest początek dramatu
bo jeżeli ja powiem
czy mógłbyś przyjść do biblioteki dzisiaj
to gdzie pójdziesz?
do komputera czy do tego budynku?
oczywiście że do komputera
jest bliżej
niekoniecznie
to zależy
natomiast ty się domyślasz tego
to że będzie bliżej
to niekoniecznie
że pójdziesz na ciebie w piwnicy
a budynek będzie w sąsiednim mieście
na przykład pracujesz u hostera
jest firma hostująca
15 aplikacji w województwie
ty jesteś jej pracownikiem
i ktoś ci mówi
czy mógłbyś przyjść do mnie do biblioteki
to pójdziesz do piwnicy
bo masz bliżej
a tak naprawdę był to mail
od kierowniczki biblioteki z Pcimia
i ty dopóki się nie dopytasz
o ile się dopytasz
ma dwa znaczenia
biblioteka oznacza twój komputer w piwnicy
którym się opiekujesz
i budynek w Pcimiu Dolnym
a to jest dopiero początek dramatu
dlaczego to jest takie ważne?
co robi aplikacja biznesowa?
przetwarza reguły biznesowe
czym są reguły biznesowe?
to są zdania w języku polskim
ja mam teraz regułę biznesową
prawnik napisał regulamin
biblioteka jest dostępna w godzinach 8-16
co to oznacza?
no niekoniecznie
bo biblioteka jako budynek
pracuje 8 godzin w ciągu doby
a aplikacja 24 na 7
bo po to powstała
kiszka
aż nie wpadłeś w własne sidła
nie jest takie proste
znaczy się wolno
nie należy używać słów
w więcej niż jednym znaczeniu
bo głupi regulamin biblioteki
staje się niezrozumiały
biblioteka jako budynek
jest otwarta od 8 do 16
działa całą dobę
i tam możesz robić nawet rezerwację książek
i jesteście ugotowani
bo prawnik napisał
biblioteka jest dostępna w godzinach 8-16
i jak ktoś tego nie zrozumie
to komputer wyłączy o 16
co będzie bardzo głupim pomysłem
a to jest dopiero początek dramatu
to jest dokładnie ten powód
dla którego jak macie system HR-owy
to jak ktoś nazwie jakąś klasę pracownik
to już przegrał
bo pracownik to jest ten twór białkowy
homo sapiens przed komputerem
i jak macie regułę biznesową
w umowie o pracę
w regulaminie obowiązków pracowniczych
że tylko pracownik może zmieniać
adres domowy
a ktoś napisał w kodzie
że klasa może
no to zależy
jeżeli mamy prawnik pisze
regulamin w tej firmy
tylko pracownik może aktualizować
adres zamieszkania swój
i to jest Jan Kowalski przy komputerze
a w tej aplikacji jest klasa
komponent i ktoś go nazwał pracownik
to co oznacza ten punkt w regulaminie
to jest problem
może tylko klasa może
no to pracownik też siedzi
i co zabronisz mu
każda niejednoznaczność
powoduje że
na tej sali jeżeli mamy dwa
jeżeli to zdanie można zrozumieć
na dwa sposoby
to prawdopodobnie na tej sali
11 osób powie tak jak ty
a drugi 11 powie tak jak ja
słuchajcie nauczcie się jednej rzeczy
model pojęciowy i słownik pojęć
to jest rzecz święta
tylko jest bardzo ważna rzecz
model pojęciowy obejmuje firmę
i komputery w niej
a nie tylko komputery
jest ogromny problem z tymi słówkami
kiedy ten problem wychodzi
próbowaliście kiedyś migrować dane
z jednej aplikacji do drugiej
dużej
to potrafi być
nierozwiązywalny dramat
z uwagi na niejednoznaczność
ludzie którzy dbają
o jednoznaczność pojęciową
w swoich programach
tworzą aplikacje
z których migrowanie danych jest bardzo łatwe
bo nie ma problemów z niejednoznacznością
ludzie którzy zapominają o tym
żeby się nad tym trochę pochylić
doprowadzają do sytuacji
kiedy migracja
to nawet nie musi być migracja
to jest głupia integracja dwóch aplikacji
potrafi być dużym wyzwaniem intelektualnym
tylko z powodu niejednoznaczności
etykiet
i nazwy dokumentów
w ramach jednego systemu
nie powinna mieć nigdy sytuacja
kiedy jakakolwiek nazwa jest niejednoznaczna
co znaczy że każde słowo użyte w kodzie
w architekturze
z zasady jest identyfikatorem
z zasady
biblioteka
w aplikacji biblioteka
w ogóle w firmie przepraszam
oznacza budynek
to co mamy na ekranie
jest to aplikacja wspomagająca pracę biblioteki
i wtedy mogę napisać
w regulaminie
biblioteka jest czynna w godzinach 8-16
aplikacja wspomagająca pracę biblioteki
jest czynna całą dobę
tada nie mam problemów
prosty regulamin
wszyscy wiedzą o co chodzi
pilnujcie tego
od pierwszej sekundy projektu
należy pilnować słownictwa
bo można sobie niesamowitą krzywdę zrobić
a jeżeli nie wam
to budżetowi tego projektu
a więc ta aplikacja będzie się nazywała
i te cztery słowa
stają się natychmiast identyfikatorem tego systemu
natychmiast
ale nikt się nie pomyli
jak ja mu powiem
że biblioteka jest od 8-16
biblioteka tak
a ten system internetowy nie
bo to jest to
pamiętajcie o tym
firma analizowana
tutaj wpiszmy wit
każdy wpisuje tutaj swoje imię nazwisko
tylko z uwagi na to
imię nazwisko i numer tego
albumu
zaczynamy od tego
od naszych funkcjonalności
tutaj was nie przetrzymał
kiedy my kończymy
sekundę
a numer albumu to po nazwisku tak
tak tu wpiszemy
imię nazwisko i numer albumu
ja akurat nie mam numeru albumu w tej uczelni
ale wy macie
tu opis projektu
i piszemy
oprogramowanie
wspomagające
zarządzanie
zasobami
biblioteki
dobrze
dla mnie to jest zwalienie
na kontrolę ortografii
szczególnie jak szybko piszę
na wykładach
wspomagające zarządzanie
dobra
po prostu będziemy
nie zawsze
ale będziemy w tych polach
wpisywali jakieś teksty
jeżeli byśmy wpisywali
automatycznie dokumentację
tego systemu
z tej aplikacji
to zobaczycie
że te komentarze
się bardzo łatwo
i ładnie
układały
dobra
czyli tak
każdy wpisał nazwę projektu
autor
każdy swoim nazwisko
co tu jeszcze
zasłonić
dobra
i teraz tak
pierwszą rzeczą
to tu po lewej stronie
jest tak zwane repozytorium
jeżeli ktoś nie ma
bo ja mam już przekonfigurowane potrzeby
ja te aplikacje używam na co dzień do pracy
wybieramy opcję widok
panele
jak ktoś jeszcze tego nie ma
panele
wyskoczę wam to okienko
tak jak u mnie
i tą pineskę stawiamy do pionu
żeby nam nie znikało
my musimy to na własnym rzutach
bez przerwy na to się patrzyli z boku
ta pineska do pionu
i teraz pierwszą rzeczą
otóż wszystkie diagramy
są potencjalne
generalnie diagram jest modelem
tak jak rysunki techniczne na budowie
to nie są płaskie obrazki w powerpoint
lucid chart czy w jakimś tam drawie
to są po prostu pełnowartościowe modele
zaczynamy od porządkowania tego modelu
i budowania jego struktury
klikamy prawym klawiszem
wybieramy opcję model
nowy model
i nadajemy mu nazwę
opis
techniczny
aplikacji
no tak od razu na was
podobnie chodzi ta część
opisująca logikę aplikacji
jest nazywana
opis techniczny aplikacji
opis logiki
w object management group funkcjonuje
platform independent model
jest to model
my będziemy robili tak naprawdę
platform independent model
tak tu wpisujemy
platform
model
a
to jest tak naprawdę
na porządku napiszemy
model
niezależny
od
środowiska
implementacji
tak
model
niezależny
jest to bardzo ważne
żeby się nauczyć
że oprogramowanie
to jest na prawdę jego logika zachowania
a nie to co to jest c java python
czy coś takiego tak nie ma to znaczenia
każda dobrze zaprojektowana aplikacja
jest możliwa do implementacji w dowolnym narzędziu
jest tylko kwestia czasu
jak na to poświęcimy
jak się domyślacie w assemblerze
będziecie pisali 4 lata a w pythonie być może
4 tygodnie tak
ale nie ma czegoś
nie powinno być sytuacji w której
nie potrafimy udokumentować logiki
jaką należy odtworzyć w kodzie i to
w tej kolejności
naciskamy ok
i teraz pierwszą rzeczą od której zaczniemy
to będą właśnie przypadki użycia
czyli to będzie umowa do czego i komu
ta aplikacja służy tak
klikamy na tym prawym klawiszem
diagramy podległe
nowy diagram
i tu jest taka
tych diagramów tu jest dużo wizualu
i szukamy przypadki użycia
pojawi się
diagram przypadków użycia jak nam to wyskoczy
wyświetli się pewnie jako pierwsze
jak nie to klikamy tu myszką
następny
wybieramy pusty tak
tam są jakieś lepsze lub gorsze przykłady
to sobie to darujemy wybieramy pusty diagram
następny
opis techniczny aplikacji
ten use case diagram
wywalamy żeby nam nie brudziło
wizual podpowiada typ drabamu
opis techniczny aplikacji
naciskamy ok
pojawi się puste
pusty obrazek
z wszystkimi nazwami
ja sobie to pomniejszyłem
tu po lewej stronie to jest legenda symboli
otóż każda notacja UML w szczególności
to są dwie rzeczy
to jest legenda symboli
ich znaczenie jest bardzo ważne
i możliwości połączeń
otóż diagram przypadków użycia
jest bardzo prostym diagramem
zgodnie ze specyfikacją UML
ten diagram
ja może wam żeby nie było niejasności pokażę
bo jest dużo sporu na temat
specyfikacje
sekundkę
zaraz zobaczycie
dajcie mi sekundę tego pdf
pod ręką przygotowanego już
to sobie go szybko podniosę
UML
dobra
i
i
nie my tu jesteśmy
tu jesteśmy
tu mój kursor
dobra
dobra
widać specyfikację pierwszą stronę
widać
dobra
to jest specyfikacja notacji
ona cała ma prawie 500 stron
nas to niespecjalnie interesuje w tej chwili
yyy
zasłania mi to
się uczepiły mnie
te te
dobra
cała specyfikacja to jest
to się mówi dużo stron
gdzie macie spis treści
gdzie on tu jest
o to jest spis treści
całość ma
505 stron
przepraszam
a 800 prawie sorry
dobra
nas interesuje
na etapie
analizy i projektowania
nas interesuje może kilkanaście stron z tego
bo będziemy
tak dla waszej informacji
ale ma tak naprawdę
ona powstała z dwóch powodów
pierwszy najważniejszy
to jest obrazkowe projektowanie
oprogramowania
do tego nam jest potrzebnych kilkanaście symboli
bo nawet nie kilkadziesiąt
poznamy je na laboratorium
natomiast ona jest taka duża z tego względu
że Object Management Group to jest organizacja
która skupia między innymi
producentów różnego oprogramowania
i
takim drugim celem przynajmniej kiedyś
teraz już może mniej
jest tak zwana
reverse inżynieria kodu
to znaczy są aplikacje
Visual też to potrafi
że mając kod źródłowy
można go odtworzyć w postaci
diagramów UML biorąc pod uwagę
że w kodzie jest masa detali
to ten UML musi być na to przygotowany
i pozostałe że tak powiem 90%
UML to są te wszystkie detale
które w zależności od języka programowania
będą pokazane graficznie
w ogóle nie będziemy tego robić
ja czasami robię tą reverse inżynierię
bo to są wersje dyplomowe
ludzie tego używają do audytu kodu
natomiast generalnie tego się w zasadzie
nie robi na co dzień
diagram przypadków użycia
to jest najprostszy
to jest 18 rozdział to jest inna bajka
to jest najprostszy diagram w UML
bo on służy do zawarcia umowy
komu i do czego ta aplikacja
będzie służyła uwaga
ten diagram nie służy do modelowania
tego jak ona działa
jest jeden z najczęstszych
błędów u wielu autorów
przypadki użycia
to nie są żadne procesy
otóż w UMLu
i w starych książkach
to są pomioty z lat 80
bo UML powstał w połowie lat 90
a diagram przypadków użycia
to jest taki typ diagramu
obrazka
który powstał w latach 80
Jacobson
autor tego typu diagramów
on w latach 80
to była jego metoda
on potem pracował w IBMie
i tam są te include
extendy
tego jest masa
on całą aplikację niemalże
modelował tym jednym diagramem
tego teraz się nie robi
diagramy klas, komponentów to zobaczycie
dzisiaj przypadki użycia
służą tylko do narysowania tego
do czego ten system służy
i nie modelujemy architektury
przypadkami użycia
przepływów
też nie modelujemy tym diagramem
to jest obrzydliwe
prosty diagram
i zaraz będziemy go robić
wracamy teraz szybciutko do mojego visuala
wy macie swojego cały czas
o nie to miał być
jeszcze raz
nie mój visual
i teraz tak
aplikacja
jako tak jako całość
jest symbolizowana
tym prostokącikiem on się nazywa
domyślnie system tak
możemy sobie przeklepać tak
projekt
parametry
zapamiętujemy sobie tą nazwę
pełną
i wstawiamy
klikamy tu dwa razy
do edycji ciach ciach
i wstawiamy to
to jest nasza aplikacja nasz system
jak tylko ktoś się zgubi to mówcie
i teraz tak
użytkownikiem tej aplikacji
to?
tak tu macie po lewej stronie
tu po lewej stronie
w legendzie jest
ten symbol który się nazywa system
wklikujesz się nim do środka
i zmieniamy mu nazwę
ten prostokącik
reprezentuje całą aplikację
na tym poziomie
taki bardzo bardzo high level design
to jest tylko umowa
to jest czarna skrzynka
zrobimy sobie aplikację
zaprojektujemy
właśnie ją robimy
ona tak się będzie nazywała
to jest czarne pudło
to jest na razie komputer bez prądu
przypominam jeszcze raz do znaczenia
my jako ludzie nie używamy oprogramowania
bo nie jesteśmy w stanie
możemy używać komputera pralki
ekspresu do kawy
ale nie oprogramowania
procesor interpretuje program
my używamy komputera
smartfona nigdy kodu
ten symbol oznacza
aktor w WMLu jest każdym zewnętrznym bytem
nawet jak to się mówi
ludzki nie ludzki
aktor to jest pani bibliotekarka
ale aktorem będzie
na przykład zewnętrzny system
no i teraz nie będziemy się bawili
w analizę wymagań
bo to osobny przedmiot jest
będziemy te wymagania niejako intuicyjnie z głowy dawali
niewątpliwie użytkownikiem aplikacji
będzie bibliotekarz
nazwijmy ładniej pracownik biblioteki
pracownik biblioteki
pracownik biblioteki
biblioteki
biblioteki
czytajcie o wszystko
czytajcie o wszystko
czemu używamy
Pascal Case'a
wszystkie z dużych liter pierwsze wyrazy
to znaczy
to jest tak
jest kilka konwencji jak to się mówi na świecie
taką najpopularniejszą
konwencją
której ja jestem gorącym zwolennikiem
my dokumenty piszemy nie dla siebie
a dla innych ludzi
to znaczy, że mamy
dobrze, że o to pytasz
mamy taką sytuację
jest tak zwana reszta świata
bogu winni pracownicy biznesu
i są mistrzowie świata
w projektowaniu oprogramowania
czyli wy
to jest identyczna relacja
jakbyście byli na przykład
się cofnęli pamięcią do szkoły podstawowej
to w szkole podstawowej wy
nie wiem jak wy, ja na pewno
musiałem na przykład jako lekturę przeczytać
poemat pan Tadeusz
albo Sienkiewicza
jakiegoś tam
PAL 6
niech będzie
bo nie wiem dlaczego mi ten pan Tadeusz utknął
i teraz tak
wy jako uczniowie podstawówki
bez problemu tego pana Tadeusza przeczytacie
ale żaden z was
nie wiem jak wy, ja na pewno
ja nie jestem w stanie napisać
tak jak Mickiewicz konkurencyjnego poematu
bo ja nie jestem poetą
między wami
a biznesem jest identyczna relacja
oni nie muszą umieć
projektować oprogramowania
oni muszą umieć
ze zrozumieniem przeczytać
wasz projekt dlaczego
bo to oni są recenzentami waszej pracy
wy nie kodujecie dla siebie
nie piszecie tych kwitów dla siebie
wy te kwity piszecie dla nich
bo dopóki biznes
nie powie okej zgadzam się
taki system chce
to wy nie macie prawa palcem kiwnąć
i tak dalej
każdy dokument
z wyjątkiem kodu źródłowego
musi być czytelny
i zrozumiały dla sponsora projektu
i teraz jeżeli chodzi
o duże małe litery
generalnie na schematach blokowych
po prostu piszemy po polsku
po angielsku, po chińsku
nazwy własne piszemy
z dużej litery
tu możemy się bawić w ten sposób
że pracownik biblioteki
biblioteka będzie
z małej czy dużej litery
to już jest kwestia konwencji
bo możecie zwrócić uwagę
na to jak ludzie mają swoje
dane wpisywane
na wizytówkach
bierzecie wizytówkę i tam jest napisane
Jan Kowalski pod nazwiskiem
zależy od firmy
jedni wpisują stanowiska
z dużej litery jak zdanie
byłoby pracownik na przykład
na jednej wizytówce będzie napisane
być może napisane w ten sposób
na innej wizytówce
będzie tak jak ja napisałem
generalnie pamiętajcie
że należy pierwszą rzeczą
którą wy musicie przyjąć do wiadomości
zrozumieć jest wpisać
sobie do głowy kto jest
adresatem waszych dokumentów
bo nie piszecie dla siebie
każdy dokument projektowy
ma dwóch adresatów
pierwszy adresat to jest biznes
bo on płaci i chce wiedzieć za co
drugim adresatem dopiero
i aż są wasi koleżanki
i koledzy z zespołu
bo dokumentacja
którą właśnie robimy ma dwa cele
zapytać się biznesu
czy to jest to co oni chcą
a potem jak już was będzie
na przykład będziecie tym
software housem tak 22 osoby
wy będziecie wspólnie
czytali ten dokument
żeby zrozumieć co macie robić
a będzie jakiś tam
projektant starszy
młodszy koder większy
mniejszy będziecie podzielić na role
te dokumenty mają być
jednoznacznie zrozumiałe
dla wszystkich członków zespołu
bo jeżeli nie
to to będzie koszmarnie długi
kosztowny kiepski projekt
dokumenty służą do komunikacji
między ludźmi
popularna konwencja
to taka
sugestia dla was
to że w kodzie są konwencje
typu tamte podkreślenia za nas spacji
wielbłądzie ok
dokumentacji
bo to jest konwencja dewelopera
przeciętny śmiertelnik pracownik
księgowości będzie miał oczy jak pięć złotych
jak to zobaczy
musicie się nauczyć jednej rzeczy
piszecie do ludzi
ich językiem
ten diagram ma
adresata biznes
wy musicie uzgodnić
z prezesem biblioteki
co on chce
co wy dla niego za jego pieniądze zrobicie
należy
pisać do niego jego językiem
pamiętajcie o tym
jak być może wiecie
ja jestem praktykiem też
siedzę w tej branży 30 lat
studentów uczę od 2005 roku
do dzisiaj jestem projektantem architektem aplikacji
cały czas to robię
jeżeli biznes nie zrozumie waszej dokumentacji
ten projekt będzie dramatem
bo będziecie jak szczur w labiryncie
próbowali zrobić coś co oni być może zrozumieją
ale dopiero na testach odbiorczych
to jest bardzo późno
to jest pierwszym testem akceptacyjnym
u biznesu
gdyby ta biblioteka była z małej litery
ok
ale absolutnie nie będziemy brnęli
w jakiejś wielbłądzie litery
spacje zamiast te
jak to robicie w kodzie super
bo kompilator nie wybucha
jak piszecie do biznesu nie róbcie tego
biorąc pod uwagę
że jak będziemy na etapie
komponentów i klas
to chcielibyśmy żeby ten
żeby ten diagram miał coś wspólnego z kodem
ale żeby były zrozumiałe
to wizual ma piękną cechę
którą w narzędziach jest
jednoczesna wielojęzyczność
to jest coś takiego
gdzie to było
przekonfigurowałem sobie menu
tak jak język
konfiguruj języki
wy możecie sobie zrobić
do normalnego języka w języku polskim
tego nie róbcie co ja teraz robię
pokażę jak to wygląda w realnym projekcie
ja mogę zadeklarować
że bazowym językiem jest polski
ale potem mogę dodać jakieś mnemoniki
mogę sobie dodać na przykład nie wiem
java style
to znaczy
że od tego momentu
wszystkie
nazwy na diagramach będą przełączalne
ja tu na przykład sobie mogę zaraz zrobić
pracownik
biblioteki
załóżmy
że to ma sens
nie
i mogę się przełączyć
z powrotem na język ludzki
tak
widać
to jest powód
dla którego jak używacie dobrego narzędzia
to wasza pracochłonność na dokumentację
to są minuty a nie tygodnie
ja teraz piszę dla kierownika
dla dyrektora biblioteki
a jak będę chciał
gdyby było prawdą
że powinienem to trochę inaczej pisać dla członków zespołu
na jakąś inną konwencję
parześ jaką
i mogę to sobie pisać po swojemu
i wszystkie diagramy będą miały
dwie warstwy etykiet
komentarzy i tak dalej
łącznie z tym
że tym drugim może być na przykład język angielski
i wtedy powiedzmy siedzi kolega
i będzie tłumaczył wszystko na angielski
i ja będę mógł w dowolnym momencie wydrukować wszystko po angielsku i po polsku
jednocześnie
to tak a propos funkcjonalności aplikacji
nie będziemy tego robili
odpowiada na pytania generalnie piszemy dla ludzi a potem są możliwości
możemy dla siebie etykiety niektóre
bo pewnie nie wszystkie przemienić
na razie trzymamy się
nie będę bronił tej konwencji jak niepodległości
bo jak ktoś napisze z małej literki
nie ma dramatu
ale pamiętajcie to są teksty dla ludzi
i teraz magiczne słowo funkcjonalność
nie będziemy używali słowa funkcjonalność
bo jest bardzo śliskie
w WMLu żeby tego uniknąć
używamy pojęcia usługa aplikacji
przypadek użycia
przypadkiem użycia z aplikacji
pewne z fakturami coś robią
z zamówieniami z klientami
biblioteka
do czego nam ten będzie system służył
załóżmy że wasz kolega
który był autorem pomysłu
będzie takim naszym ekspertem dziedzinowym
do czego ta aplikacja będzie służyła
powinna chciałbyś żeby służyła
jesteś dyrektorem biblioteki
co byś chciał w menu zobaczyć
dodawanie książki
w sensie że już kupiliśmy
chcę ją zaimportować
chcę dodać książkę
że jeszcze jej nie kupiliśmy ale wiem
że nie będę chciał żeby była zamówiona
chcę wypożyczyć oczywiście książkę
i wyszukać książkę czy jest jakaś
jeżeli chcesz kupić książkę
kupiłeś książkę
i ona jest na półce
to ile formularzy będziesz miał
to jest twarda szkoła życia
teraz to jest bardzo ważny moment
bo
masz taką sytuację
do wszystkich pytanie
mamy młotek
idziemy od tyłu
co pan chce
wybić gwoździe
wybić szybę
przybić nogę
i drożniane kołki do nogi
no i on będzie miał tego 5
macie świadomość że to jest wszystko
jeden młotek
i tak musicie myśleć
przy aplikacjach
czyli to jest kwestia doświadczenia
to znaczy że ta aplikacja
będzie miała w menu
zasoby
biblioteczne
zwróćcie uwagę
no to już jako powiedzmy
no ja mam jak się domyślacie
trochę większe doświadczenie o was
zasób biblioteczny
to tam będzie jakaś karta książki
jeżeli ja mam karteczkę
formularz ekranowy
na którym jest
dany autora tytuł książki data wydania
ISB nie parę innych rzeczy
to nie ma żadnej różnicy
pomiędzy tym że ta książka już tam jest
czy to jest książka
którą ja bym chciał mieć
nie ma różnicy
to znaczy że my
potrzebujemy informacji o książce
a potem będziemy dywagowali
czy ta książka ma status zakupiona
zamówiona czy wyrzucona czy zbrakowana
nie
łapiemy
musicie
pamiętać
osoba która jest projektantem oprogramowania
nie może być
nie powinna być
odtwarzaczem w kodzie
pobożnych życzeń usera
bo tak powstają najgorsze
masę anegdot na ten temat
ja sobie ustawię
mamy taką opcję jak łączniki
i to jest taka opcja śledzenie centrum
to jest bardzo wygodne
zaraz wam pokażę
zaraz wam wyjaśnię o co chodzi
z tą anegdotą
zasoby biblioteczne
pracownik biblioteki
jeżeli on będzie użytkownikiem
on ma klepać w to menu
to łączymy to
to wygląda w ten sposób
oznacza
że ten użytkownik
pracownik biblioteki jako zewnętrzny byt
będzie korzystał z tej usługi aplikacji
uwaga
to nie jest system praw dostępu
bo użytkownikiem tego systemu
pytanie do ciebie
będziesz ekspertem
czy chcielibyśmy żeby czytelnik też mógł tam zaglądać
może
tak czy nie
okej
no to drugi aktor
i piszemy czytelnik
stawiamy go tu
i też łączymy z tym
jak wam się wydaje
uprzedzając fakty
niewątpliwie pracownik biblioteki
będzie mógł te zasoby edytować
nie
doda usunie
tytuł poprawi
czy czytelnikowi to będzie wolno robić czy nie
nie
macie pomysł
gdzie ten zakaz edycji
dla czytelnika
się objawi docelowo w tej architekturze
co to będzie
z czego wynika
że czytelnikowi nie wolno edytować
opisów książek
no nie
jemu tego robić nie wolno
wynika to na przykład z regulaminu
że
dane książki może edytować pracownik
a czytelnik nie
czy powinniśmy to tu narysować czy nie
nie
to jest menu
i teraz jeżeli będzie wymaganie
jeżeli napiszemy czytelnikowi
istnieje takie zdanie
czytelnikowi nie wolno edytować opisów książek
to znaczy że jest jakaś reguła biznesowa
jest to nie wiem
reguły biblioteki
wewnętrznym regulaminie
że czytelnikowi nie wolno tam grzebać
no tak samo jak klucze
nie klucze do magazynu tylko magazynie
reguły biznesowe to są elementy implementowane w środku
nie rysujemy tego na tym diagramie
ten diagram nam mówi
że w tej aplikacji
będzie
w menu pozycja zasady biblioteczne
tą opcję w menu
zobaczą pracownicy i czytelnicy
i teraz my możemy mówić o wymaganiach
i teraz klikamy
tego typu aplikacje
mają fajną
one powstały do tego żeby można było
te rzeczy które my gromadzimy
naszą wiedzę
żeby je we właściwych miejscach umieszczać
po kilku razach będzie więcej prawy
wasz kolega
mamy takie wymaganie
żeby czytelnikowi nie wolno grzebać w treści
klikamy prawym klawiszem
na tym przypadku użycia
wybieramy opcję
otwórz szczegóły
i tu jest zakładka
wymagania
każda opcja
w menu może być powiązana
z wieloma wymaganiami
że komuś nie wolno grzebać
że jest niedostępna po 16
no tam tych tzw. reguł biznesowych
ograniczeń może być dużo
i tu piszemy
klikamy tutaj dwa razy
i piszemy usługa
bo to jest ta usługa zasady biblioteczne
i piszemy
czytelnik
nie może
edytować
opisów
zasobów
i enter
jeszcze raz jak można wejść do tego
czyli tak
wracamy tutaj do diagramu
mamy ten diagram
to jest usługa
z tym bączkiem
zobaczycie później
jaka jest opcja
ta opcja w menu
gromadzi sobie wszystkie rzeczy
które jej dotyczą
a my już skończymy
tylko ten wątek
i kontynuujemy na koniec zajęcia
prawy klawisz
otwórz szczegóły przypadku użycia
klikamy
w tych zakładkach
wybieramy wymagania
klikamy tu dwa razy
i wpisujemy wymaganie
opisów zasobów
tu znowu jest kwestia konwencji
czy piszemy to z dużej czy z małej litery
załóżmy, że z dużej, bo to jest normalne
znakomitą większość, część tej dokumentacji
powinny być teksty po polsku
które są jednocześnie zrozumiałe dla biznesu
ale stanowią sobą regułę biznesową
albo inne rzeczy, to zobaczycie jeszcze
i enter
tą metodą
będziemy projektowali to dalej
tu tylko na sam koniec
jeszcze skorzystam z minutki
wam zabiorę, wasz kolega powiedział
że chciałby
do tego
ściągać biblioteki, te książki
i teraz zwrócę wam taką rzecz
pytanie do naszego eksperta
jeżeli chciałbyś ściągnąć dane książki nowej
to jak to zrobić w najprościej bibliotece?
jak to zrobić w najprościej bibliotece?
znaczy na przykład może inaczej
biblioteka, szukasz nowej książki
chciałbyś mieć dokładne dane, jest bibliotekarzem
to co zrobisz, gdzie będziecie szukać?
w jakimś ważnym systemie
tak, na podstawie numeru ISBN
tak?
no to klikamy znowu tutaj
wybieramy sobie aktora
klikamy
napiszemy tutaj jakiś tam, nie wiem
międzynarodowy
katalog
książek
załóżmy, że takie istnieje, są takie
ze trzy, cztery, co najmniej ja znam
międzynarodowy katalog książek
i nasz system
będzie z tego korzystał i robimy takie coś
przeciągamy to na to
i tu będzie strzałka ta
użycia, bo
to na przykład może być
załóżmy, że biblioteka narodowa
ma taki pełny spis numerów ISBN
to oznacza, że
bo ta linia oznacza
że czytelnik będzie korzystał
z tej aplikacji, ale
biblioteka narodowa nie korzysta
z naszej aplikacji, to my korzystamy
z biblioteki narodowej
to jest pewnie jakieś API, to będzie później
zaznaczyliśmy, że istnieje
dla nas zewnętrzne źródło
tych danych
a ta strzałka to zależność?
ta strzałka oznacza zależność
grot wskazuje na źródło uzależnienia
bo jak
klikam
z niebieskiej ramki i klikam
na aktora
to jeszcze raz wam pokażę
jak to zrobić najprościej
ja u siebie usunę
klikamy ten system i chcemy
tu się pojawi taka miniaturka
łącznika drag and drop
drag and drop
przenosimy to na aktora
puszczamy myszkę i wybieramy to
o tych drugich powiemy później
wybieramy to, jest związek zależności
ten diagram
informuje nas to, że będzie
projektujemy aplikację albo istnieje
mamy dwa
typy użytkowników
pracownik biblioteki średnicy
jedną z opcji w menu będą zasoby biblioteczne
nasza aplikacja będzie
korzystała z jakiegoś
katalogu książek
poza międzynarodowym
katalogiem książek jeszcze
aktywne jakieś
przeszukiwanie po
różnych empikach czy innych
od razu można kupić
masz rację
w tym momencie
to jest zadanie na później
bo co robimy
my możemy napisać w ogóle
katalog książek
załóżmy że wszystkie księgarnie
udostępniają katalog książek
to teraz w architekturze
o tym będziemy mówili później
ale to uprzedzając fakty
jeżeli ktoś nam powie, że takich katalogów jest dużo
to my jako architekci
powinniśmy napisać komponent
będący adapterem
który dla aplikacji jest
jednym punktem, a ten adapter jest podpięty
do 15 różnych bibliotek
i to on wyszukuje, a nie nasza aplikacja
bo ja tutaj wpisuję ISBN
jeżeli ja podepnę
do naszej aplikacji
tylko jedną, na przykład
to jest proste
ale tak jak powiedziałeś
ja bym chciał przeszukać wszystkie księgarnie
to znaczy, że ja muszę napisać
to będzie w środku komponent mikroservice
który będzie to robił
i teraz są dwa wyjścia
albo to będzie integralna część tej aplikacji
albo sobie na zewnątrz
postawisz jakąś hipotetyczną
szynę integracyjną
bo ten adapter może być twoją częścią
ale załóżmy
bo może być sytuacja na przykład taka
to narysujmy coś takiego
załóżmy, że ktoś napisał
robota webowego
napisał stronę
wyszukiwacz
wyszukiwacz
ISBN
załóżmy, że ktoś taką aplikację napisał
wyszukiwacz
wyszukiwacz
wyszukiwacz
wyszukiwacz
ISBN
i teraz
możemy sobie wyobrazić
że tu będzie tych aktorów jeszcze
tu będą wszystkie konkretne biblioteki podłączone
i księgarnie
mogę to rysować
ale nie muszę
to jest hipotetyczny
istniejący wyszukiwacz
ja będę korzystał na przykład z niego
załóżmy, że taki istnieje
to wywalam
załóżmy, że istnieje aplikacja w internecie
bo ktoś zrobił
która ma swoje API
i my mu ISBN
są takie aplikacje
można nawet zostawić
czyli to wy decydujecie
wy jesteście architektami tego systemu
jeżeli macie doświadczenie
i wiedzę
to od razu przywalicie wyszukiwarkę ISBN
a jeżeli nie
tylko jaki jest tego pożytek
ja na przykład tego nie wiem
albo nie ma na to pieniędzy
sam napisałem adapter do Narodowej
a za 3 lata
i ta aplikacja będzie w środku rozbudowana
za 3 lata ja ten mój adapter albo go będę rozbudowywał
i myślę, że wywalę cały kod
i napiszę 5 linijek kodu
które będzie korzystało z API tej wyszukiwarki
ale zmieniłem tylko i wyłącznie
jeden mikroserwis w mojej aplikacji
cała reszta aplikacja w ogóle nie wie
że taki numer wyciąłem
ok?
dobra słuchajcie
bo już jest 20 po
uwaga
naciskamy, żeby mi ktoś nie mówił
że mu wcięło
naciskamy CTRL S
bo na koniec semestru
ten plik w app
będziecie musieli oddać jako zaliczenie
także
CTRL S wybieramy plik lokalny
każde słowo gdzieś tam na dysku zapiszę
tu już wam nie pomogę
ja sobie tutaj zmienię nazwę
i też zapiszę
wit
zima 2024
laboratorium inżynieria programowania
ok
u mnie to będzie
tu
jest mój lokalny śmietnik
poszło
będziemy kontynuowali na zmych zajęciach
a mamy jakoś konkretnie nazwać
ten plik czy
on powinien wam się podpowiedzieć
nazwa tak jak u mnie
tak jak ta aplikacja
słuchajcie akurat
jak będziecie ten plik odsyłali
to on powinien mieć w nazwie
wasze imię i nazwisko też
ale i tak będziecie
to wysyłali na koniec semestru
do tego
na Teamsy do specjalnej zakładki
ale to jak chcecie
dzisiaj go możecie nazwać jak chcecie
przed wysłaniem trzeba będzie
do nazwy pliku dodać imię nazwisko numer albumu
a teraz to jest
wasz problem żeby wam to nie wcięło
przypominam jeszcze raz jak mi ktoś powie
na koniec semestru że mu pies zjadł pliki
i pendrive to to nie jest
nie zaliczy przedmiotu
jesteście studentami kierunku
informatycznego zróbcie sobie 4bk
nie przyjmuje
żadnych usprawiedliwień że mi wcięło
Zawadzki słucham Michał
tak pytanko bo chciałem zapisać się
teraz na onedrive sobie swoim szkolnym
i pisze że może uszkodzić
nie uszkodzić nie róbcie tego
uważajcie z onedrivem bo to jest tak samo
jak dynamiczna baza danych
ta aplikacja w momencie kiedy pracuje z plikiem
jest on najotwarty i visual
dał ci taki komunikat
bo visual precyzyjnie
kontroluje datę godzinę
i sekundę modyfikacji pliku
bo natychmiast ci zamelduje
że jest podmieniony onedrive
jak tylko zrobi backup albo sobie coś zrobi
to aktualizuje po swojej stronie numery
efekt jest taki że masz plik
visualowi się wydaje że to był
13 październik a twój onedrive
mówi że 14 i będziesz miał problem
ten pliki musicie zachowywać
u siebie na dysku
fizycznym na notebooku
a nie na onedrive
a pomiędzy pracą
można zapisać do przeniesienia
to znaczy się
backup można zrobić zawsze
natomiast on nie powinien być
dynamicznym zasobem w sieci
bo serwer onedrive
po prostu aktualizuje metadany
plików
wordowi to nie przeszkadza
visualowi przeszkadza bo visual wersjonuje
ja w visualu wersjonowania
nawet na lokalnym dysku zobaczycie
zresztą później po kilku razach
że tam takich plików vp coś tam będzie kilka
bo visual standardowo trzyma ostatnie kilka kopii
z uwagi na odzyskiwanie
i on niestety i system odzyskiwania
system wersjonowania w visualu
bazuje na dacie i godzinie i sekundzie
ktoś jeszcze
wspominał jeszcze pan na początku
o wykładach czy pan też może prowadzi
wykłady
a czy można mieć jakoś dodatkowo
do nich dostęp
wiesz co powiem tak
znaczy się zapytajcie w dziekanacie
jest taka opcja
że po prostu możecie być uczestnikiem tych wykładów
natomiast
studenci korzystają z nagrań
ale nie mam pojęcia jak
te nagrania które są w Teamsach
ja właśnie celowo zapisuję jako ja
znaczy włączam nagrywanie jako ja
a nie wy bo one są dla studentów dostępne
ale ja nie jestem do końca pewien
czy to jest tylko w ramach grupy
czy w ramach uczelni
sugestia jest taka
jak ktoś chce chodzić na wykłady
bo wykłady są otwarte na mój stan wiedzy
to tylko zapytajcie się w dziekanacie jak to formalnie zrobić
bo po prostu
w Teamsach wykłady
są udostępniane dla tych
dla uczestników grupy
tak na przykład jeżeli twojego nazwiska nie ma
na liście grupy wykładowej
to musisz
właśnie nie wiem jak albo dostać sobie
albo u administratora dostać
zapytaj w dziekanacie i zapytaj Solorza
na adres admin małpa tam witadu.pl
ja nie mam niczego
tylko temu możecie łazić na wszystkie
moje wykłady jakie wam się żywnie podoba
tylko musicie to uzgadniać z administratorem
czy dziekanatem
bo prawa dostępu na Teamsach są tam
do zrobienia nie mam pojęcia jak bo ja tego nie robię
ale nie ma problemu
z nagrań chyba może korzystać każdy
musicie się dowiedzieć
z nagrań wystarczy dać dostęp
osoba która zapisuje musi dać dostęp
prawdopodobnie tak
także jeżeli wam ktoś powie
że z nagrania nie ma ich dostępu
to po prostu nagrywane są w zasadzie
jak ktoś nie zapomni wszystkie wykłady
jak ktoś się do mnie zgłosi to ja udostępnię to nagranie
nie ma problemu
dobra słuchajcie kończymy
jakby coś to się widzimy
na następnym wykładzie
jak ktoś ma jeszcze jakieś pytania
proszę pisać na Teamsach
bo ja mam za niedługo następne
to zapisujemy na dysku
i do zobaczenia na naszych zajęciach
za dwa tygodnie
do widzenia
------------------------------------Dobra, a więc tak. Mamy bibliotekę. Przełącz się na diagramy jakie mamy. Mamy w prawym górnym rogu takie trzy małe ikonki.
Mamy diagram środków użycia. To szybkie przypomnienie. Będziemy tą aplikację projektowali, o to było do szczegółu.
Przypadki użycia są na samym szczycie zawsze, bo przypadki użycia są tą umową, która opisuje komu i do czego to będzie służyło.
Tutaj od razu jedno sprostowanie, bo w innej grupie takie pytanie padło.
A tak przy okazji, kto z Was miał do czynienia z diagramami przypadków użycia do tej pory? Gdzieś tam w pracy, gdzieś tam, gdziekolwiek widział?
No się zdarzyło.
I do czego służył ten diagram?
Do czego?
No?
No pokazywałem przypadki użycia.
No dobra, ale tak, słuchajcie.
Jednym z największych problemów w tej branży jest to, że ludzie coś robią i nie bardzo wiedzą po co.
No i teraz pytanie do wszystkich.
Z jakiegoś powodu miałeś przed oczami diagram przypadków użycia.
No architekt stworzył tego, przypadki użycia i przekazywał je deweloperom i oni później na bazie tego robili kod.
Na bazie przypadków użycia kod robili?
Nie tylko.
A co jeszcze było?
Nie pamiętam, ja jestem niestety devopsem, a nie deweloperem.
Aha.
Więc sam obok siedziałem tylko i na koniec, kiedy już ten kod powstał.
Okej. Pytam nie przypadkiem, bo generalnie dwa diagramy klas są w internecie chyba najczęściej i w ogóle w praktyce najczęściej psute i źle robione.
Otóż przypadki użycia, jak wam się wydaje, co to jest przypadek użycia aplikacji?
Wydaje mi się, że to jest konkretny przypadek, jaki występuje w aplikacji. Jak tego użyć?
I to jest właśnie najczęściej powtarzana definicja i najbardziej nieprawdziwa.
Pytanie analogiczne. Kto z was potrafi, no powiedzmy ciągnijmy z tobą jeszcze.
Jak ci się wydaje?
Ile przypadków użycie?
Ile przypadków użycia ma samochód?
Trochę.
Podaj przykład.
Jazda do przodu.
Słuchajcie, to jest właśnie problem tej branży, że to tak nie jest. Kupujesz samochód, po co ci on?
No tak dla szpanu, a czasem do jazdy.
Jeden powód, drugi. Czyli są dwa. Jeden dla szpanu, drugi... Znaczy dla szpanu możesz kupić pudło kartonowe, bo jeżeli chcesz mieć samochód dla szpanu, to kupujesz atrapę, stawiasz pod blokiem i wszyscy ci zazdroszczą.
Do momentu, kiedy nie próbujesz nim gdzieś pojechać. Czyli oprócz tego szpanu samochód służy do?
Jazdy.
Do czegoś jeszcze?
Tak, do jazdy, do podróży, do przewożenia rzeczy.
Czym się różni przejazd z domu do pracy od przejazdu z domu na wczasy? Poza tym, że dłużej trwa.
No niczym więcej.
Niczym się nie różni. Dokładnie. To do ilu rzeczy służy samochód?
No do jednej.
Do jednej rzeczy. To jest ten jeden jedyny przypadek używania samochodu. My używamy samochodu, żeby się przemieszczać. Do niczego więcej.
To czym jest zmiana biegów?
Parametryzacją?
Jest jednym z elementów, który jest prawdopodobnie niezbędny w czasie jazdy.
Tak samo jak gapienie się na prędkościomierz, naciskanie sprzęgła, a jak ktoś ma automat, to może nie mieć tego sprzęgła.
Problem polega na tym, że my, że bardzo...
Temat rzeka na inne spotkanie. Z czego to wynika?
Przypadki użycia nie służą do projektowania tego, jak się aplikacja zachowuje, bo ten diagram to jest umowa, która mówi komu i do czego to służy, a nie jak to działa.
To jest problem ogromny.
Bo samochód, mimo tego, że składa się dzisiejszy samochód przeciętny z kilkunastu tysięcy części,
służy do jednej rzeczy.
Do przemieszczania się.
My możemy... Zwróćcie uwagę, że my możemy mieć wariant. Zwróćcie uwagę, że czym się różni...
Wasz sąsiad na tylnym siedzeniu od czterech reklamówek zakupów z żabki w bagażniku.
Czy jest jakaś różnica? Poza kształtem?
Nie ma żadnej.
Samochód służy do przemieszczania się. Jedną z jego cech jest ładowność.
I albo jest to pięciu ludzi.
Jak położycie z tyłu siedzenia, to to będzie dwóch ludzi i dwadzieścia reklamówek zakupów z żabki.
To jest cały czas ten sam samochód, który służy tylko i wyłącznie do przemieszczania się,
a przemieszczając się w tym samochodzie jest jakaś zawartość.
Ludzie i bagaż.
W bagażu może nie być jeden człowiek, za kierownicą musi.
Nie będziemy teraz wnikali w samochody autonomiczne.
Zresztą one bez pasażerów nie jeżdżą, bo to nie ma sensu, bez łażynku.
Otóż, diagram przypadków użycia
jest po to, żeby ustalić,
co ma powstać
i do czego to coś służy.
Jeżeli zobaczycie kiedyś diagram przypadków użycia,
gdzie jest masa kresek, że kliknął, że mu lista opadła,
że dodał klienta, że go usunął.
To jest totalna ślepa uliczka,
bo przypadek użycia
wcale nie jest jednym krokiem.
Przecież, żeby się przemieszczać, to scenariusz brzmi.
Aktor wsiadł, nacisnął jakiś guzik, jakiś kluczyk włożył, coś tam nogami ponaciskał.
Ale generalnie się przemieszcza, bo żadna z tych czynności
sama z siebie do niczego nie służy.
Będziemy dzisiaj mówili o scenariuszu przypadków użycia między innymi.
Otóż, żadne pojedyncze czynności pod tytułem opadająca lista kontrahentu,
dodanie kontrahenta do bazy, żeby go do faktury dopisać,
żadna z tych czynności sama z siebie do niczego nie służy.
Nikt nie kupi systemu za małe czy duże pieniądze,
który będzie tylko i wyłącznie do tego służył,
że jak my klikniemy, to jakaś lista opadnie.
Takie coś nikomu do niczego nie służy.
Aplikacja może służyć do zarządzania,
możemy powiedzieć enigmatycznie, do zarządzania klientami.
Co to znaczy?
Że mamy jakiś zestaw danych o kliencie,
nazwijmy go umownie profil klienta.
Okej.
Aplikacja służy i teraz popatrzmy na nasz przypadek,
klikamy jeszcze raz diagram przypadków użycia, żeby się otworzył.
Mamy zasoby bieżące.
Mamy zasoby bieżące.
Mamy zasoby biblioteczne.
Okej.
To znaczy, że ta aplikacja w tej chwili służy do kolekcjonowania
informacji, wiedzy o tym, co w tej bibliotece jest na półce.
I teraz pytanie brzmi, czy to wystarczy?
Czy spis zasobów wystarczy?
Nie wiem.
Nie.
Bo ta aplikacja już wiemy, że służy do tego, żeby skatalogować te zasoby.
Do czego ona jeszcze będzie służyła?
Bo gdybyśmy mieli trochę szersze zajęcia,
to w większości przypadków, prawie zawsze,
zanim rozpoczniemy pracę z projektowaniem oprogramowania,
powinna powstać jakaś specyfikacja wymagań, analiza wymagań, analiza biznesowa.
Jak zwał, tak zwał.
To teraz powiedzmy sobie, musimy wyobrazić to.
Taki hipotetyczny proces.
Ile rzeczy się dzieje w bibliotece?
No ćwiczymy wyobraźnię.
Wypożycza się książki, oddaje się książki, kupuje się książki,
zamawia się książki.
Okej.
I teraz pytanie brzmi, bardzo dobrze, mamy to, co wasz kolega powiedział
i mamy aplikację.
Czy ta aplikacja będzie robiła wszystko to, co ten człowiek powiedział?
Wasz kolega?
Będziesz pomagała na pewno prawie wszystkie z tych rzeczy.
Tak? Będziesz kupował książki z pomocą tej aplikacji?
No ja bym chciał na przykład móc sobie w tej aplikacji kliknąć
ta jest do kupienia i później wchodzę sobie, patrzę jakie są do kupienia.
O, te.
Ale to nie jest sklep internetowy typu Empik, tylko biblioteka.
No ale ma wesprzeć mnie, że listę jakie książki to są do zakupu,
jakie wszystkie czytelnicy by chcieli dokupić.
Powoli, powoli. Okej.
I po to jest wyszukiwaczy ISBN, żebyśmy mogli przeglądać,
że ktoś może kliknąć, a ja bym to chciał, bo bardzo lubię tą bibliotekę.
W bibliotece dodaje się gdzieś na liście jakieś, co jest do kupienia
i później ktoś w dziale zakupu czy coś sobie klika, o, oni chcą to kupić,
już 8 osób chce to kupić, no to to kupimy.
Okej.
To co powinno się pojawić w menu?
Lista życzeń? Nie wiem jak to nazwać.
Kierunek słuszny.
Nazwijmy, dodajemy Bączek, lista życzeń.
W sensie przypadek użycia, tak?
Tak, bo tu Michał Zawadzki jest na ekranie, tak?
No to dodajemy, lista życzeń. Okej.
Czyli tak, zasoby biblioteczne i teraz tak, żebyśmy się nie pogubili w tym,
bo ta aplikacja też w tym pomaga.
Na początek tak, klikamy prawym klawiszem zasoby biblioteczne,
prawy klawisz, otwórz specyfikacje i tam piszemy opis, piszemy usługa
pozwalająca katalogować zasoby w bibliotece.
Tak naprawdę samo katalogować to znaleźć archiwum, nie?
Katalogować i przeglądać katalog.
No bo jak już mamy karteczki, to jest to samo, tak?
Zwróćcie uwagę, że przeglądać katalog, okej.
Klikamy listę życzeń, otwórz specyfikacje i piszemy usługa pozwalająca
zasoby w bibliotece i usługa pozwalająca katalogować zasoby w bibliotece i co jeszcze?
I przeglądać katalog.
I przeglądać katalog.
Pamiętajcie o jednym... Pytanie pomocnicze.
W jaki sposób użytkownik komunikuje się z komputerem?
Przy pomocy klawiatury i myszki. I trochę monitora.
Jak to trochę?
No trochę. No bo tylko na niego patrzę, ale nim nie dotykam.
No dobra, znaczy się są dotykowe, ale...
Klawiaturę, myszkę dotykam i patrzę.
No to teraz to... Dobra.
Musimy trochę nabrać odwyku od tej technologii.
Idziecie do biblioteki i to było, załóżmy, nie wiem, 40 lat temu.
Nie było komputerów w bibliotekach. Na czym polega praca z biblioteką?
Idę najpierw do... Najpierw potrzebuję znaleźć książkę, więc albo idę do pani bibliotekarki,
albo idę do tych karteczek, gdzie są opisane wszystkie, gdzie książki się znajdują.
Na razie mówimy o katalogowaniu. Jak wygląda katalogowanie książek?
Wyglądało katalogowanie książek, jak nie było komputerów?
No najpierw po... Kataloguję się po typie książki, w sensie czy to jest... Brakuje mi słowa.
Czy to jest właśnie fantastyka, czy to jest...
No dobra, to jest wszystko prawda, słuchajcie, to jest wszystko prawda, tylko... No dobra. I co dalej się potem robi?
No szukam działu z fantastyką na starcie.
A jak to robisz?
Patrzę oczami.
No.
Po wielkich podpisach przy półkach.
No.
Półkach.
Ale przecież jak pójdziesz do Narodowej, to nikt cię tam między te półki nie wpuści.
Aha, najpierw trzeba wejść, poprosić, zalogować się.
Nie było logowania się kiedyś.
Podać kartę biblioteczną.
A co to jest ta karta biblioteczna?
No to najpierw trzeba pójść do biblioteki zgłosić się, że chce się mieć kartę biblioteczną, żeby...
Dobra, czyli chcesz być czytelnikiem, okej, dostałeś tą kartę czytelnika, co dalej?
Wchodzę do biblioteki w końcu.
No.
Jeżeli ta książka nie jest jakaś taka, że musi bibliotekarz mi ją podać, to idę do wszystkich półek z książkami i szukam...
Na razie powiedziałem upraszczamy, nie wpuszczamy cię tam.
Tam są fajne książki, można ukraść, napluć, ukraść kartkę, wyrwać.
Nie wpuszczamy nikogo między półki.
Przychodzisz do biblioteki, masz już tą kartę, wszyscy myślą, tak?
Masz już tą kartę i przychodzisz do lady, bo dalej nie wleziesz.
No to podaję pani, panu...
Pani, panu tytuł i tego, i autora książki.
A skąd wiesz, że taka książka jest w bibliotece?
Pytam się, czy jest.
No to pani mówi, pan sobie sprawdzi, bo tu jest dwa miliony książek, nie wiem.
Pani ci powie i pan, że ona nie pamięta, ona nie ma w głowie dwóch milionów pozycji w tej Narodowej.
Ona się na tym nie zna, ona pracuje od wczoraj w tej Narodowej.
To trzeba gdzieś sprawdzić, czy w ogóle zawiera.
Gdzie? Gdzie?
No w jakiejś liście pewnie wszystkich książek.
Jak to się nazywa?
Jakbym wiedział, to bym powiedział.
Indexy jakichś książek?
Słuchajcie, wy musicie pójść i jakiś film historyczny obejrzeć.
Słuchajcie, człowiek z komputerem...
Znaczy, problem, słuchajcie, nie gniewajcie się, ale to jest problem tej branży w tej chwili, tak?
Że mówisz, że devopsem jestem. No możesz, nie musisz tego wiedzieć i umieć, tak?
Ale spójrzcie na to troszkę szerzej, tak?
Otóż problem w tej branży polega na tym, że większość ludzi nie bardzo ma pojęcia, na co się łapie.
Z programistami włącznie.
Słuchajcie, sami widzicie...
Ja nawet nie wiem, bo nie będę się pytał, tak?
Nie jest to moją intencją.
Pytanie was, kto z was na jakim stanowisku pracuje u siebie w firmie?
Zwróćcie uwagę, że nie ma w tym nic złego. Uczycie się. Błądzicie.
Biblioteka działa w ten sposób, że są karty indeksowe.
Jeżeli w bibliotece jest dwa miliony książek, to istnieje kiedyś szafa, a teraz komputer, w którym jest dwa miliony karteczek
i na każdej karteczce jest nazwisko, dane autora, tytuł, rok wydania, wydawca.
Być może jakieś dwa, trzy słowa streszczenia, pewnie jakaś klasyfikacja, że fantastyka, że dziennikarstwo.
To są tak zwane karty indeksowe książek.
To są formularze.
Biblioteka, żeby w ogóle mogła funkcjonować, nie może mieć tylko i wyłącznie samych książek, bo objętościowo jest to kilka budynków.
Znalezienie właściwej książki w kilku budynkach, na którym jest, to są setki tysięcy książek na półkach,
wymagałoby chodzenia między tymi półkami i spędzania tam całych tygodni.
A my przychodzimy do biblioteki po książkę i chcemy to załatwić w ciągu piętnastu minut, może pół godziny.
To znaczy, że przed tym magazynem książek, który jest tak naprawdę potężnym archiwum faktycznych książek,
stoi szafeczka i tam są szufladki.
Jeżeli ta szafeczka była drewniana, bo taka była wtedy, gdzie nic nadal nie są,
i teraz najczęściej jest tak, że my szukamy książek.
Jakie kryteria najczęściej jesteście w stanie podać w przeciętnej bibliotece, żeby znaleźć książkę?
No najczęściej jest to tytuł.
Albo szukamy książek według tytułu, albo według autora.
Wiele, bo nie wszystkie biblioteki mają katalogi działowe. Mają, prawie wszystkie.
To są trzy kluczowe kryteria.
Gdybyście chcieli pójść do biblioteki, nawet dzisiaj, to wam chyba już mówiłem,
i poprosić książkę, poproszę wszystkie tytuły książek, gdzie głównym bohaterem jest Jasio,
na takie pytanie wam nikt nie odpowie.
Chyba, że czytał przypadkiem tą książkę.
Janku, muzyka.
Janku, muzyka.
Natomiast nie ma, gdyby ktoś chciał odpowiedzieć na pytanie,
które książki w tej bibliotece mają Jasia jako głównego bohatera,
to musiałby je po prostu zacząć wszystkie czytać raz za razem i stawiać ptaszki.
Tu był Jasio, tu był, tu nie było, tu nie było, tu był.
To jest robota na kilka pokoleń.
Dlatego, nie tylko w bibliotece, w wielu rzeczy nie znajdziecie według dowolnej liczby kryteriów,
bo byłoby to po prostu zbyt kosztowne.
I teraz, jeżeli ta biblioteka będzie nie papierowa, tylko będzie to komputer,
to to działa identycznie.
Na pytanie, jak się człowiek komunikuje z komputerem,
odpowiedź myszka i klawiatura jest, wybaczcie, absolutnie najgorszą odpowiedzią.
Bo my się komunikujemy z komputerem poprzez formularze.
Żeby komputer wchłonął coś, to nie jest tak, że wy naciskamy klawisze.
Bo możecie mówić, tak?
Ja sobie wyobrażam, i są takie aplikacje, nawet na telefon.
Nie ma klawiatury, nie ma myszki, jest nieruchomy komputer i ma mikrofon.
I specjalny przetwornik, i można do niego gadać.
Myszka i klawiatura jest jednym z wielu wariantów komunikowania się z komputerem.
Wszystkie samochody mają komputer pokładowy.
Czy ktoś z was wywija myszką i klawiszami w samochodzie?
No nie.
Samochody nie mają myszki i klawiatury.
A tam w środku jest potężny komputer.
I on się komunikuje z wami.
Raz jest to ten moment, kiedy naciskacie pedał gazu.
Bo nie wiem, czy wiecie, już nie ma tej stanowej linki między pedałem gazu a wpryskiem paliwa.
Autopilot jest w samolocie.
Czy widzicie kiedyś pilota, który siedzi i tam myszką wali i jeździ po klawiaturze paluchami?
No nie.
Jest masa rzeczy, masa miejsc, przepraszam, gdzie nie ma żadnej myszki i klawiatury, a jest komputer.
Komputer komunikuje się z resztą świata, wymieniając komunikaty.
Obojętnie, czy to będzie jakiś interfejs API i tak dalej.
Nie ma to znaczenia.
Komputer bez komunikatu jest bezbronny.
I teraz, jak to będzie komputer biblioteki, to nie ma znaczenia,
czy my ten...
I teraz mamy kartę indeksową.
Chcemy wypożyczyć książkę.
I załóżmy, że bibliotekarz, żeby nam tą książkę wypożyczyć bez pudła,
bo na przykład mogę sobie wyobrazić, że są dwie książki z tym samym tytułem, ale różnych autorów.
To się może przytrafić, tak?
To znaczy, że...
Jeszcze jest jedna rzecz.
Żeby tą książkę z magazynu przynieść, to ten bibliotekarz musi wiedzieć, gdzie ta książka leży.
No bo tam jest dwa miliony książek w tej Narodowej.
Załóżmy.
Nie wiem dokładnie, ile tam jest książek.
To znaczy, że o każdej książce istnieje pewien minimalny zestaw danych.
To się nazywa karta indeksowa.
I tam na przykład będzie tytuł, autor, numer indeksowy,
czyli numerek, gdzie ta książka jest na półce i w jakim pokoju.
I być może, żeby ułatwić komuś dokonanie wyboru,
jest przyporządkowany gatunek literacki, jakieś tam może streszczenie.
To znaczy, że my, żeby taką książkę w ogóle dostawać,
musimy się dowiedzieć, czy w ogóle taka jest w zasobach.
Jeżeli okaże się, że ona jest, to będzie miała kartę indeksową.
Wtedy my sobie przepisujemy na tą kartę indeksową.
Pan Tadeusz Mickiewicz.
I przepisujemy.
Pozycja 2048.
To jest unikalny numer tej książki w bibliotece.
Idziemy z tą karteczką i mówimy, poproszę tą książeczkę.
A ta pani patrzy, ok.
I teraz, co jest dla niej, ta pani czy pan za ladą?
Co jest dla bibliotekarza istotne?
Numer indeksowy książki, czyli jej numer kolejny na półce,
czy tytuł i autor?
Tytuł i autor go kompletnie nie interesuje.
Bo ten bibliotekarz tego nie będzie czytał.
Ta kartka pełni podwójną rolę.
Tam jest zestaw informacji o tej książce.
Jest informacja dana dla nas.
Co to za książka?
Tytuł, autor i tak dalej.
I jest kluczowa informacja z perspektywy biblioteki.
Unikalny numer tej książki.
Bo te książki według ustalonej kolejności są na półkach.
Nie wiem, czy wiecie, książki w bibliotekach tych dużych
wcale nie są poustawione na półkach alfabetycznie,
tylko są w takiej kolejności, w jakiej były kupowane.
Bo gdybyście mieli bibliotekę i tam będzie 10 tys. książek
i ktoś nagle kupuje książkę na literę A,
to musiałby wszystko przesunąć.
I nikt normalny tego nie robi.
Jak macie małe osiedlowe biblioteki,
to sobie można pozwolić na to, żeby te książki tam układać
czy księgarnie, żeby te książki układać i przesuwać.
Kupujemy dwie książki i przesuwamy 2 tys. książek w prawo,
bo kupiliśmy encyklopedię na A.
I ona musi być po lewej stronie.
To są bardzo małe biblioteki i bardzo małe sklepy.
Jeżeli macie magazyn, bibliotekę czy dużą księgarnię,
i tam jest 100 tys. pozycji,
to nikt nie będzie przesuwał całej księgarni tylko dlatego,
że książkę na literę A kupił.
Dlatego jest katalog i w tym katalogu jest napisane,
że my znajdziemy książkę według tytułu czy autora
i jak już tą książkę znajdziemy, to tam jest jeszcze jak pole.
Numer na półce i idziemy.
Półka 45, pozycja 544. Tam jest ta książka.
Bez tej cyferki tej książki nigdy nie znajdziecie.
Bo książki są układane na półkach dokładnie w takiej kolejności,
jak były kupione.
Dzięki temu nigdy nie musimy tych książek przesuwać w prawo.
A my musimy tylko pamiętać o tym, że jak kupujemy książkę,
to nadajemy jej numer kolejny i na tej karcie indeksowej piszemy
Adam Mickiewicz, książka numer 5068.
I po krzyku.
I teraz tą karteczkę, bo karteczki są malutkie,
karteczki możemy przesuwać w lewo i w prawo.
Mamy taką dużą szafeczkę i jest tam jeszcze dwie szafeczki.
Jedna to jest alfabetyczny katalog tytułowy,
a druga to jest alfabetyczny katalog po autorach.
I przychodzi ktoś taki jak wy czy ja, szuka sobie.
I tak, albo będzie szukał na literę P Pan Tadeusz,
albo do drugiej szafy pójdzie i na literkę M będzie Mickiewicz Adam.
Jak już znajdzie, to zwróćcie uwagę, że przeciętny autor napisał
kilka książek, rzadko kilkadziesiąt, czyli taki homo sapiens jak ja czy wy,
pójdzie do butelki i tam jest 10 milionów książek, żeby było fajnie.
I on znalazł Mickiewicza.
I tam będzie, nie wiem, 16 pozycji.
16 pozycji to jest tyle karteczek.
To on sobie te 16 pozycji przejrzy i to nam zajmie 10 minut.
Wyciągamy kartkę P Pan Tadeusz, przypisujemy na swoją, idziemy do Lady.
Proszę panią, tą książkowską poproszę.
5 minut i książka jest wydana.
Tak, gdzie albutecha?
A nie klawisze i myszka.
To znaczy, że jeżeli tak to działa, to my tak to musimy teraz zrobić.
I teraz pojawia się, pojawia się teraz coś, co powoduje,
powoduje, że ta biblioteka w ogóle żyje, tak?
Ktoś z was powiedział, że biblioteka powinna przyjmować życzenia,
że chciałbym taką książkę wypożyczyć, a nie ma.
I załóżmy faktycznie, jak już ktoś po raz dziesiąty zapyta,
to my sobie tej książki poszukamy, załóżmy, nie?
Mamy lista życzeń.
Tu piszemy, lista życzeń, usługa pozwalająca rejestrować
propozycje nowych książek do biblioteki.
Pozwalająca rejestrować propozycje nowych książek do biblioteki.
I OK.
Przepraszam, a jak się wchodzi w tą specyfikację w przypadku życia?
Prawym klawiszem i u góry masz specyfikacja.
Otwórz specyfikację.
I naciskamy OK.
I teraz lista życzeń, to z tej opcji będzie korzystał zarówno czytelnik,
jak i pracownik biblioteki, nie?
No to łączymy czytelnika i pracownika do tej listy życzeń.
OK.
Żeby to było w miarę ładnie i czytelnie, to może zróbmy tak,
znaczy na razie nie kombinujcie.
Prawy klawisz na pustej przestrzeni, gdziekolwiek na pustej przestrzeni,
prawy klawisz, łączniki, na środku macie opcję łączniki
i znajdziecie opcję śledzenie centrum, tak trochę poniżej połowy.
Śledzenie centrum, niżej, niżej, niżej, oto.
I już.
To będzie nam się...
Ta opcja powoduje, że kreseczki się układają automatycznie,
tak powiedzmy łącząc hipotetycznie środki figur.
Załóżmy, że będzie trochę bardziej estetycznie.
A to musi być zaznaczone, tak?
Jeszcze raz.
To musi być zaznaczone, to śledzenie centrum.
Tak, tam trzeba postawić ptaszka.
Mógłby Pan jeszcze raz pokazać, jak zrobić to?
Jeszcze raz. Prawy klawisz na pustej przestrzeni, łączniki,
znajdujemy opcję śledzenie centrum, trzeba kliknąć i po krzyku.
OK.
Jak klikniesz, ptaszka w tym samym miejscu można postawić wielokrotnie.
OK. Ułożyło się, tak?
No dobra.
Ale ta biblioteka tak, mamy zasoby, mamy listę życzeń,
ale jeszcze nie można tej książki wypożyczyć, nie?
A jak się łączy te czytelnika i...
Znaczy są dwa sposoby, na razie nie klikajcie.
Są dwa sposoby.
Albo robimy na piechotę, tak jak w Pawle Polskim,
po lewej stronie macie legendę symboli, wybieracie klaseczkę związek
i łączycie...
I nie wiem, czy waszą grupę pytałem, bo mam trzy grupy w tym laboratorium.
Czy wy macie zajęcia z UML-a, oprócz laboratorium?
Nie.
O, dwa słowa, to będziemy jeszcze po drodze wpracali informacje
do waszej notacji.
Otóż, UML jest dosyć specyficzny,
jest dosyć specyficznym językiem, paradoksalnie bardzo prostym,
bo tych symboli jest bardzo mało.
I element na diagramie ma jakieś konkretne znaczenie.
Bardzo rzadko, akurat diagram przypadków użycia jest specyficzny,
bo to jest taki diagram dosyć obrazkowy.
Mamy jakieś jajeczka, które reprezentują przypadki użycia, o czym za chwilę.
Ten patyczak, to jest w oryginale Sticky Man,
ten patyczak oznacza tak zwanego aktora.
Ten diagram, zwany często diagramem kontekstowym,
to jest umowa na zakres projektu.
Prostokącik system oznacza nazwę aplikacji, to jest czarna skrzynka.
Patyczakiem jest wszystko to, co ma jakikolwiek logiczny związek z tym systemem,
ale nie jest jego częścią, czyli jest poza.
Użytkownik nie jest częścią aplikacji.
Jakaś zewnętrzna usługa ISBN nie jest częścią naszej aplikacji.
Zwróćcie uwagę, że biblioteka to jest budynek, ludzie,
być może jakiś system finansowo-księgowy,
tam będzie dużo różnych fajnych rzeczy w środku
i w tej bibliotece jedną z tych fajnych rzeczy,
jedną z wielu fajnych rzeczy,
będzie aplikacja wspomagająca pracę biblioteki.
Ale nie jest to ani system finansowo-księgowy,
nie jest to rejestracja środków trwałych,
typu półki, krzesła, stoły.
Ta aplikacja, to jest bardzo ważne,
my musimy powiedzieć, aplikacja będzie wspominała pracę,
może zmieńmy to na, nie biblioteki,
aplikacja wspierająca pracę bibliotekarza.
Warto pilnować kontekstu tego, bo gdybyśmy,
to było trochę uproszczenie,
a oprogramowanie wspierające pracę biblioteki,
to tak trochę cuchnie tym, że robi absolutnie wszystko.
Ale pytanie brzmi, czy księgowa też?
A ochroniarz na bramie też tam będzie?
No niekoniecznie.
I teraz ten tytuł aplikacji nie jest może specjalnie kluczowy,
bo kluczem są te wączki, te jajeczka.
To są przypadki użycia.
Tylko, że przypadkiem użycia tej aplikacji
nie jest klikanie prawem, klawiszem myszy
w rozwijalną listę książek,
tylko ta aplikacja służy.
Pracownikowi do zarządzania zasobami bibliotecznymi
czytelnik będzie miał listę życzeń.
Dlaczego podpięliśmy pracownika biblioteki do listy życzeń?
Może, żeby mógł ją przejrzeć i kupić jakąś dodatkową książkę na jej bazie?
Tak. I teraz, czy pracownik biblioteki będzie dopisywał swoje życzenia?
No raczej nie.
Hmm.
Czy to ma jakiś wpływ?
Ale może.
Wszystko zależy od tego, jak to ustalicie.
Chcemy raczej, że tak.
Bo nie zawsze będzie coś typu, że...
W sensie, powiedzmy przychodzi jakaś osoba,
mówi, że chce książkę, ale nie dopisze.
Inna osoba też przyjdzie,
powie, że chce tą samą książkę,
ale też nie dopisze.
I pracownik w końcu stwierdzi, a zobaczę,
że jest ta książka dopisana,
bo już trzy osoby były.
I samemu sam też może wpisać.
Nie wiem, czy macie świadomość,
że tą drogą napiszecie bardzo kiepską aplikację.
Czemu?
Otóż...
Na tych zajęciach się dowiecie jeszcze paru rzeczy,
być może dla was bardzo zaskakujących.
Otóż każda instytucja, każda firma,
biblioteka,
powinna być tak zorganizowana.
Nie musi być.
Słyszeliście o czymś takim jak bezpieczeństwo?
Ostatnio modne jest cyberbezpieczeństwo.
Co to jest cyberbezpieczeństwo?
Jak wam się wydaje?
Wszyscy o tym mówią.
Cyberbezpieczeństwo.
Co to za cudo?
Przeciwdziałanie niechcianej aktywności?
Dobry kierunek.
Przeciwdziałanie niechcianej aktywności.
To znaczy, że ktoś,
zanim się zabierze za cyberbezpieczeństwo,
a teraz skąd my wiemy,
które czynności są niechciane?
Z czego to wynika?
To jest dobry kierunek.
Wasz kolega bardzo mądrze powiedział.
A teraz skąd my wiemy,
czego nie chcemy w tej bibliotece?
Przeciwdziałanie niechcianej aktywności.
To znaczy, że ktoś,
zanim się zabierze za cyberbezpieczeństwo,
a teraz skąd my wiemy,
czego nie chcemy w tej bibliotece?
Na bazie ustaleń naszych?
Na bazie ustaleń naszych?
Tak?
No to ja ustaliłem z dyrektorem sprzedaży.
Ja nigdy w życiu, po moim trupie.
Przychodzi ktoś i mówi tak.
Dyrektor sprzedaży mówi tak.
Ja bym chciał, żeby ta aplikacja
pozwalała eksportować dane klientów
na pendrive'a w formacie excel.
Ustaliłeś. Dyrektor handlowy poprosił.
A w tym momencie,
jakby to usłyszał prawnik,
to by zzieleniał.
Czyli dyrektora handlowego nie pytamy o takie rzeczy.
To z czego wynika to bezpieczeństwo?
Dużo jest rzeczy.
Bo część to jest potrzeby biznesowe,
część to jest konkretnie
jakie są prawa,
część to jest bezpieczeństwo danych osobowych.
Ale właśnie usłyszałeś potrzebę
biznesową dyrektora. On tak uważa.
Ale się kłóci
z bezpieczeństwem danych
klientów.
Czyli są jakieś priorytety, tak?
Tak.
To teraz pytanie brzmi,
skąd my wiemy, co jest ważniejsze?
Kto jest ważniejszy? Prawnik w firmie
czy dyrektor handlowy i to, że on wynosi dane
tajemnice przedsiębiorstwa?
Wiadomo, że prawnik.
Chyba, że dostaje się po cichu
jeszcze trochę.
Ale o tym nie mówimy.
Jeżeli chcecie być ludźmi,
którzy tworzą dobre aplikacje,
to nie powinniście się nigdy
nikogo o nic pytać.
Nie wiem,
czy macie świadomość.
Tylko powinniście zajrzeć do ustawy,
do regulaminu. Czasami właśnie
ten prawnik jakiś regulamin napisał.
Czasami jakiś biznesowy ma prezes firmy
czy tam zarząd w ogóle.
Jest masa rzeczy.
To jest taki paradoks, o którym
w tej branży się mówi właśnie
nie pytajcie my dlaczego, pod stołem.
Natomiast my mówimy o tym, że my chcemy
zaprojektować naprawdę dobrą oprogramowanie.
Dobre oprogramowanie to jest na przykład
takie, dzięki któremu prezes
tej buteki nie zapłaci potężnej kary
za dwa miesiące.
I teraz
lista życzeń. Jak wam się wydaje?
Projektowanie aplikacji to nie sklepanie kodu.
Lista życzeń.
Podaję wam prosty przykład.
Pracownik buteki jest łapówkarzem.
Ma kumpla w księgarni.
W tej księgarni zalegają książki,
których nikt absolutnie nie chce kupić.
A ten księgarz chciałby
te książki sprzedać, żeby zarobić,
bo musiałby je wyrzucić albo
do kominka wrzucić.
No i teraz ten księgarz
przychodzi do pracownika buteki
i mówi słuchaj, dam ci tutaj
parę groszy, a ty wpisz na listę
życzeń wszystkie książki z mojej księgarni,
bo one się za żadne skarby nie chcą sprzedać.
I to teraz.
A nie może równie dobrze zrobić
tego z poziomu czytelnika?
Nie, bo nie jest
czytelnikiem. Bo jak on się zaloguje,
na swoje konto,
to jest pracownikiem biblioteki.
No robimy te dziury.
Nie, mówimy bibliotekarz.
To jest wielka dziura rzeczywiście.
Czy osoba, która przychodzi do bibliotekarza
nie może być czytelnikiem i sama po prostu
sobie do listy życzeń to dodać?
No i teraz ok, zróbmy tak.
I teraz wróćmy na taką rzecz.
Myślimy dalej.
Przeciętny czytelnik
jak często i ile wpisuje książek
w listę życzeń?
Jak wam się wydaje, tak na oko?
Dwadzieściaddziennie czy może
zaraz w miesiącu?
Dwadzieściamiesięcznie. Mam przykład konkretny.
Dobra, to może się zdarzyć.
To nie ja.
Może się zdarzyć.
Dlatego tutaj
osoba, która się zajmuje takim projektem
powinna zasięgnąć takiej
informacji możliwie
obiektywnej
z jakiejś statystyki,
bo źródeł jest masa.
Człowiek, który w przeciętnej...
Mówimy o bibliotece beletrystycznej.
To jeszcze zależy od rodzaju biblioteki.
Bo jak będzie to biblioteka uczelniana
to ja sam potrafię zgłosić
trzydzieści pozycji jednego dnia.
Rzadko, ale jest to możliwe.
My mówimy o normalnej bibliotece,
gdzie przeciętny
czytelnik... Jak wam się wydaje,
ile książek czyta przeciętny człowiek?
Takich beletrystycznych
z biblioteki?
Takich różnych, nawet narodowej.
Nawet jak będzie doktorantem,
to nie jest...
Słuchajcie,
to nie jest jakaś wielka
praca mózgowa. My możemy bez problemu
z dosyć dużą precyzją
opisać warunki pracy takiej biblioteki.
Zwróćcie uwagę na taką rzecz.
Przychodzi człowiek
i wypożycza
dziesięć książek każdego dnia.
I oddaje.
Grzecznie oddaje.
Przychodzi, bierze dziesięć
i następnego dnia oddaje te dziesięć.
I robi tak już pół roku.
Co byście o tym powiedzieli?
Dziwna sprawa.
Przyglądam na podejrzanie.
Podejrzane, nie?
Prawdopodobnie ściąga i skanuje, nie?
Na przykład. To jest jedno z...
Być może się nudzi, tak?
Zwróćcie uwagę na taką rzecz,
że projektowanie oprogramowania
może się... Można to robić tak na pałę
pod dyktando userów.
Tylko tak powstają bardzo niskiej jakości aplikacje.
Nie dlatego, że są błędy w kodzie.
Dlatego, że te aplikacje kompletnie niczego nie kontrolują.
I tak naprawdę nikogo w niczym nie wspierają.
Są zwykłym, tępym narzędziem
do klepania.
Ten mały procent, niestety,
aplikacji dobrze przemyślanych,
wspomagających firmę,
przecież biblioteka
wcale nie chce,
żeby ktoś sobie zeskanował wszystkie książki
Załóżmy, że ta biblioteka
bierze jakąś składkę członkowską.
Być może 10 groszy od książki.
Być może to jest totalnie za darmo,
ale ta biblioteka chce istnieć, tak?
Nie jest w interesie biblioteki
dopuszczenie do tego,
bo biblioteka te książki kupuje.
Pamiętajcie, że autor ma prawa autorskie.
Księgarnia pisze na każdej książce,
żeby tego nie powielać za bardzo.
To jest ciężki bój na tym świecie.
To znaczy, że zaprojektowanie takiej aplikacji
to nie jest tylko wyklepanie myszy,
klawiszy i formatki.
To trzeba się troszeczkę nad tym pochylić,
bo pojawia się pojęcie
albo cyberbezpieczeństwa,
albo w ogóle bezpieczeństwa
tej instytucji.
Jeżeli ktoś w ciągu pół roku
zeskanuje wszystkie książki z tej biblioteki,
to otworzy konkurencyjną,
za darmo elektroniczną.
I ta papierowa, bardzo potrzebna ludziom,
zniknie, o czym się przekonają za kwartał
ci pozostali, którzy uczciwie czytali
i zostaną na lodzie.
Projektowanie oprogramowania
to nie jest klepanie kodu.
To znaczy, że jak mamy listę życzeń,
to tam zaczynają się pojawiać
pewne reguły biznesowe.
Nazywamy je regułami dziedzinowymi,
logiką dziedzinową, obojętnie.
I na przykład,
żeby uniknąć przekupstwa,
to mówimy,
nie, pracownik biblioteki
nie będzie wpisywał życzeń,
bo nie ma tego w zakresie obowiązków,
a ja bym chciał.
To se zmień pracę.
O funkcjonalności biblioteki
trzeba zdecydować generalnie
sponsor tego projektu,
a nie pracownicy.
Bo jeżeli,
to są realia pracy w tej branży.
Jak wam się wydaje,
kto decyduje o treści umowy
o pracę z pracownikiem?
Pracownik? Nie, pracodawca.
Pracodawca ma konkretny cel.
Zatrudniam bibliotekarza,
żeby wypożyczał książki.
Wpuszczam czytelników,
żeby je wypożyczali.
Zatrudniam księgową,
żeby księgowała faktury kosztowe,
czyli ona nie będzie aktorem tego systemu.
Jest masa rzeczy,
na których ta aplikacja
nie powinna nigdy pozwalać.
Być może dla was zaskoczenie.
Wiecie,
być może się z tym nie spotkaliście.
Jak wam się wydaje,
co jest cechą dobrej aplikacji?
Ktoś do was przychodzi
i pyta was, tak?
Słuchajcie, jesteście na studiach
czy ambicją tej uczelni,
żebyście wyszli po tych studiach
to jest trochę szerszym spojrzeniem na świat.
Co jest cechą dobrej aplikacji?
Pamiętamy, że aplikacja ma sponsora,
jest firma, nie jedna służy do księgowania,
ta służy do wypożyczenia książek.
Co jest cechą dobrego oprogramowania, dobrej aplikacji?
Dobrą dokumentację ma.
To bez łachy, jak to się mówi.
Jak nie ma dokumentacji, to jest śmieciem.
Ale okej, jest dokumentacja,
ale dobra, po co nam ta dokumentacja?
Dobre pytanie.
Żeby jak ktoś zajrzy,
ktoś inny,
nie wiem, za jakieś parę lat,
żeby wiedział,
co w niej siedzieć
i jak ją można ewentualnie poprawić.
Żeby zrozumiał,
jak w ogóle działa, tak?
Bo tam będzie, nie wiem, 100 tysięcy albo pół miliona linii kodu,
mamy rotację pracowników,
po pięciu latach nie będzie nawet śladu
po ludziach, którzy kodowali.
A my chcemy zrozumieć, jak to działa.
I taką dokumentację właśnie w tych zajęciach robimy.
Co jeszcze jest cechą dobrej aplikacji?
Tylko zwróćcie uwagę, że dokumentacja aplikacji
nie jest cechą aplikacji,
tylko cechą projektu.
Bo to, że Wam fabryka książek,
to, że Wam fabryka samochodów
da instrukcję obsługi i dokumentację techniczną,
nijak się ma do tego, że ten samochód jeździ.
Nie?
Nie zapominajcie o tym.
Dokumentacja nie jest cechą aplikacji,
jest cechą projektu.
Tak samo jak rysunki techniczne samochodu.
Rysunki techniczne samochodu
to nie jest coś, czego używacie na co dzień.
Ale bez tych rysunków nie naprawicie samochodu.
Nie mylcie tego.
Co jest cechą dobrej aplikacji?
Niezawodność.
To jest tzw. wymaganie pozafunkcjonalne.
Każda aplikacja.
Samochód, komputer ma być niezawodny.
Ok.
Zapominamy o cechach pozafunkcjonalnych.
Co zostało?
Użyteczność, czyli że aplikacja jest przydatna,
spełnia takie ruchy, które powinna.
Czyli że bibliotekarz,
który wybrał jakieś funkcje,
to je dostaje w tej aplikacji.
Tak, tylko zwróćcie uwagę na taką rzecz,
że
oprogramowanie
ma pewne...
Wiele systemów,
oprogramowanie to jest jakiś system.
Statek jest jakimś systemem,
ruch miejski jest systemem.
Zwróćcie uwagę na taką rzecz.
Po co nam kodeks ruchu drogowego?
Jakiego grzyba nam kodeks ruchu drogowego?
Po co?
Po to, żeby dwa samochody się nie zderzyły?
Bardzo dobry odpowiedź.
Jakbyś to chciał uogólnić.
A dlaczego...
Z jakiego powodu dwa samochody mogłyby się zderzyć?
Chodzi o narzucenie
jakiegoś zestawu reguł,
żeby nie każdy robił
po swojemu, tylko...
No właśnie.
Istnieje system reguł.
Zwróćcie uwagę,
że kodeks ruchu drogowego...
My mówimy, to jest skutek,
bo na drodze jest bezpiecznie.
A dlaczego kodeks ruchu drogowego
jako zestaw reguł podnosi bezpieczeństwo?
Z czego to wynika?
Daje przewidywalność.
Bo ludzie są przewidywalni.
Bo jeżeli ja jadę prawą stroną,
i w tym kraju tak jest,
znaczy się w Polsce tutaj lewą,
to znaczy, że
jeżeli będą wszyscy przestrzegali,
to będą wzajemnie przewidywalni.
W tym przypadku wiemy,
że nie pójdziemy na czołowe zderzenie,
po swojej stronie.
Jeżeli ja jadę i jest skrzyżowanie
i ktoś tam atakuje z lewej czy z prawej
i są reguły, że tych z prawej
przepuszczamy, nie przepuszczamy itd.,
to znaczy, że reguły
powodują, że ludzie na drodze
są przewidywalni.
Pod jednym warunkiem. Jakim?
Że wszyscy się do nich stosują.
Że wszyscy do tych reguł stosują.
Czy wszyscy się do tych reguł stosują
na drodze?
Oczywiście, że nie.
Oczywiście.
Przecież to jest dramat,
że się nie stosują.
Nie stosują się,
bo mają te reguły tam, gdzie mają.
I teraz zwróć uwagę na taką rzecz.
Jeżeli ten system jest skomplikowany,
reguły
są rodzajem umowy.
Nie wszystkie jesteśmy w stanie wymusić.
Niektóre owszem.
Znacie przypadek wymuszania
reguł w kodeksie drogowym
na kierowcach?
Wymuszenie pierwszeństwa chociażby?
To jest łamanie reguł.
Ja mówię o tym, że jest jakaś reguła,
jest jakiś przepis
i mimo tego, że jakiś kierowca
nie chciałby go przestrzegać, my go zmusimy.
Macie pomysł? Bardzo prosty.
Ograniczenie prędkości.
Ograniczenie prędkości
nie tylko w Polsce.
Niekoniecznie na kogoś zmusza.
Tam jest znak drogowy, tam jest pisane
50 na godzinę. Oczywiście masa ludzi
nie tylko w Polsce, szczególnie jeździ
po mieście szybciej niż 50 na godzinę.
Znaki drogowe są informacją,
a nie zmuszeniem.
Policjant stojący.
Fotoradar.
Fotoradar poinformuje Cię,
że przekroczyłeś prędkość
i masz zapłacić mandat.
Policja?
Policja stoi
i zatrzyma Cię,
ale są tacy, co uciekają.
Później mamy sądy
o zabranie prawa jazdy w więzieniu.
To jest wszystko post factum?
No to...
Nic nas nie broni, możemy iść mordować.
Możemy.
Montujemy przy szkołach
garby na drodze. Jak będziesz jechał
szybciej niż 20, zniszczysz samochód.
Ale przejadę.
Zapewniam Cię, że
2 metry dalej już nie będziesz miał
zawieszenia. Spróbuj kiedyś.
Spróbuj przejechać po tych garbach.
Tylko się powiedzieć, że można
wjechać na chodnik i jechać chodnikiem.
Zwróćcie uwagę,
bo to są
dobre pomysły. My oczywiście możemy
wykazać dużo inwencji, żeby
te zabezpieczenia obchodzić, natomiast
projektant systemu będzie robił naprawdę
dużo, a jak będzie dobrym projektantem
to tego nie zrobicie, bo przy szkołach
mamy. Nie mamy przy szkołach
obniżonych krawężników.
Są barierki.
Te barierki są jeszcze na zakładkę,
żeby taki szczeniak
w pozytywnym sensie ze szkoły
nie wybiegł.
Te labirynty są przy przejściach dla pieszych
przy szkołach i są na przykład
przy przejazdach kolejowych, żeby nie można było
z biegu przelecieć. Trzeba po prostu
najpierw sobie biodro rozwalisz o ramkę.
Nie mamy, znaczy
rzadko kiedy jest to stuprocentowe zabezpieczenie,
ale bardzo często, jak jest dobrze przemyślane,
jest bliskie stuprocent.
Czyli jeżeli mamy szkołę,
krawężnik jest wysoki, są barierki
albo nawet słupki. Przy samym
wyjściu ze szkoły są barierki na zakładkę,
że trzeba zygzakiem przelecieć i są
garby spowalniające, to
trzymam kciuki za kierowcę, który
będzie chciał obejść te ograniczenia.
Nie tyle za kierowcę, co za jego samochód.
Jak sobie kupi wypasioną terenówę
albo przejedzie czołgiem,
to okej, tylko takich samochodów
jest co kot napłakał w mieście.
Przeciętny SUV straci zawieszenie,
jak tak przeleci.
To są tak zwane,
to się nazywa low by design,
czyli przestrzeganie prawa
przez projektowanie. I teraz w miastach,
bo oczywiście musimy podjąć decyzję,
jako projektanci,
które reguły
to będzie nasza prośba,
a które reguły
nie robimy. Otóż jeżeli jakieś
zachowanie ludzkie jest wyjątkowo
szkodliwe i ryzykowne, to my
będziemy je wymuszali.
Będziemy je wymuszali.
Projektowanie oprogramowania
jest bardzo podobną pracą.
I zwróć uwagę na taką rzecz.
Cecha dobrego
oprogramowania,
będziecie być może zaskoczeni.
Dobra aplikacja nie ma
konta administratora i superwizora.
Nie ma.
Nie wiem, czy
słyszeliście. Dobre oprogramowanie
użytkowe nie ma
takiego konta. Nie ma świętych klów.
Jak wam się wydaje?
Przeciętny haker
co?
Kogo będzie atakował?
Jakby chciał, nie wiem, wynieść dane,
czy zrobić coś tam, nie wiem, sfałszować.
Kogo będzie atakował przeciętny haker?
No rozgarnięty haker. Bo głupi haker
będzie łamał hasła.
Bazę danych.
Nie, będzie atakował miejsce,
które ma,
pracuje bez ograniczeń.
Tym miejscem jest administrator,
supervisor, który jak się zaloguje,
to może absolutnie wszystko.
Bo mamy użytkowników, temu nie wolno,
temu nie wolno, a supervisor może wszystko.
Jeżeli dostanie do bazy
danych, no to może
być wszystkim.
To jest nieprawda. Jeżeli taką bazę
stworzysz w swoim systemie, to jest to tak.
Dobra aplikacja
nie ma czegoś takiego, jak jedno uniwersalne
konto wejściowe do bazy danych,
gdzie można jednym selectem wyciągnąć
10 milionów rekordów.
W dobrej aplikacji nie istnieje taka funkcjonalność.
Zabezpieczenia systemowe
to jest coś, co nie ma nic wspólnego
z kodowaniem. Trzeba się nad tym
dobrze zastanowić.
Świat to robi od setek lat.
Tu niedawno
byłem w pewnym klasztorze. Słuchajcie, musicie zmienić,
znaczy nie musicie, powinniście zmienić podejście
w ogóle postrzeganie projektowania programowania.
To nie jest żadne klepanie kodu.
My tą aplikację zaprojektujemy
i nie napiszemy linijki kodu nawet.
Ona będzie, mam nadzieję, że
zdążymy,
perfekcyjnie zaprojektowana.
Jest sobie taki klasztor.
Zobaczmy, jest taka reguła. Przeor klasztoru,
tego klasztoru, wykombinował,
że
taki mnich nie powinien siedzieć
i wleć i puchnąć,
bo powinien jakoś tak, nie wiem, może pójdzie trawę
pokosić. Nie powinien być,
mieć zbyt dużej nadwagi.
Macie pomysł?
Co zrobić, żeby mnich nie żarł za dużo?
Wystarczy, żeby nie było jedzenia,
więc trzeba nie zamawiać jedzenia. Nie, no jeść trzeba.
Nie, kiepski pomysł. Nie trzeba.
Można mniej zamawiać. Wtedy będzie chudszy.
A jak chcesz go zmusić, żeby mniej zamawiać?
Przecież on ma kumpla z Aladą, który
jak poprosi za flaszkę, to mu wyda cztery michy.
To nie działa.
To korupcja jest, już system się zepsuł.
Korupcja nie jest elementem
budynku, klastoru ani aplikacji.
Korupcja jest na całym świecie.
Nie zabronisz korupcji.
Nie może być. Słuchajcie, umawiamy się, że
korupcja... przecież wszyscy wiemy, korupcja jest
brzydka, nie robimy tego, fuj.
No i robią.
Robi się prostą rzecz.
To się nazywa
reguły
mieszane w języki by design.
Wejście do kuchni
jest bardzo wąskie. Gruby mnich po prostu
nie wejdzie.
Ale wtedy wejdzie przez kuchnię, bo ma
tego. Nie wejdzie, bo to jest jedyne wejście.
Ale może mu go pod Aladą zapłacić,
żeby mu wyniósł przecież. Ten kolega
też musi tam wejść, musi być szczupły.
Wyobraźmy, macie klasztor
i nie wolno wynosić żarcia z kuchni.
To jest bardzo łatwe do osiągnięcia, bo
stawiamy jednego człowieka przy wejściu.
I mamy proste zabezpieczenie.
Jest sobie pomieszczenie,
które służy do jedzenia.
Żaden otwór
nie ma większych wymiarów niż.
Jak ktoś kupuje,
jak przynoszą zaopatrzenie,
to przez małą dziurkę
ziemniaczki tam po kilka sztuk
itd. To nie jest problem.
Wejście do kuchni,
bo byłem w tym klasztorze,
to są drzwi, taka w zasadzie
szpara bym powiedział, wielkości
przeciętny człowiek się bokiem
przejdzie. Człowiek z większym
brzuchem nie ma szans, żeby tam się dostać.
I to dotyczy także kucharzy.
Czyli mamy pomieszczenie,
do którego można bez żadnego
problemu
wrzucić dowolną ilość jedzenia,
bo przeciętny produkt żywnościowy
nie jest większy niż 2-3 pięści,
a żeby tam wszedł człowiek
bez wnikania, czy on jest kucharzem,
czy jest zwykłym, jedzącym, żarcie
mnichem,
musi się zmieścić przez te wąskie drzwi.
A teraz kombinujcie.
Ale już mamy założenie,
że kucharz daje pod
ladą mu dodatkowe michy.
Ale musimy takie założenie przyjąć.
No to i tak będzie gruby.
Nie będzie gruby, bo nie wejdzie.
A jeżeli się nażre, to nie wejdzie.
No nie wejdzie.
Słuchajcie,
ja wiem, że
szukacie luki w tym.
Ok, tylko zwróćmy uwagę na taką rzecz.
Wejście jest takie,
okienko zaopatrzenia
wielkości prawie że monitora,
no i co z tego?
Przecież jeżeli on,
jeżeli nie może wejść z siatkami,
bo duża siatka przez tą szparę nie przejdzie,
wielka torba przez to okienko nie przejdzie,
to
nadużywanie jedzenia w takim klasztorze
graniczy z cudem.
Graniczy z cudem.
Co zresztą, jak się okazało z historii,
było w tym klasztorze wyjątkowo skuteczne.
Nie ma zabezpieczenia,
prawdopodobnie,
tutaj można się,
są miejsca, gdzie pewnie by było.
Takich sytuacji jest masa.
Czy jakieś wyrafinowane,
długie hasła przed kogokolwiek,
przed czymś chronią?
Ja czasami słyszę,
o, dwanaście,
panie, pan się nie zna,
my tu mamy komputery kwantowe.
Na moim koncie...
To znakowe zapisane na karterce przed monitorem.
No.
Im dłuższe hasło,
tym bardziej będzie zapisane.
Robimy bardzo prostą rzecz.
Nie bawiąc się problemem bezpieczeństwa systemowo,
a nie bawiąc się w technologię.
Jeżeli ktoś ma,
przecież macie świadomość,
że wasza forsa w banku
to jest czterocyfrowy pin
do karty płatniczej.
Dopóki ktoś nie rozumie,
dlaczego
największe pieniądze
na tym świecie, w bankach,
są chronione czterocyfrowym pinem
do karty płatniczej,
dopóki ktoś nie rozumie,
w połączeniu z resztą,
to będzie wymyślał
dwunastoznakowe hasła,
które są absolutnie bezsensowne.
Pierwszodatkowo,
chyba tam pierwsze sześć,
albo osiem,
albo cztery cyfry
karty debitowej,
to jest tak naprawdę
identyfikator, jaki to jest bank.
Więc w tej kombinacji
zmniejsza się bardzo.
Mówimy pin do karty.
To są dowolne cztery cyfry.
Ja byłem zaskoczony
i można sobie ten pin zmienić
w większości banków.
Tym pinem mogą być cztery czwórki.
I żaden bank się nie obrazi.
Wchłonie
bez problemu. Spróbujcie.
Zabezpieczenie jest w innym miejscu.
Na czym polega zabezpieczenie waszych pieniędzy w banku?
Karta jest zabezpieczona.
Karta jest
poświadczeniem, że ja jestem sobą.
No niekoniecznie.
Mój brat pomaga mojej mamie
wyciągać pieniądze z banku.
Mamusia mu daje kartę.
On idzie do banku, wyciąga pieniądze.
Mamusia dostaje stówkę.
To już złamano pierwsze zabezpieczenie.
To nie jest żadne zabezpieczenie.
To jest problem, że to
nie jest zabezpieczenie.
Tak robi masa osób na świecie.
Masa osób, szczególnie starszych
prosi kogoś, dając mu
swoją kartę płatniczą
o przyniesienie gotówki z banku.
To nie jest absolutnie
żadne zabezpieczenie.
I nikt w banku
nawet na to nie patrzy.
Zabezpieczeniem jest to,
że funkcjonuje
kilka danych reguł.
Na przykład
wielkość pojedynczej wypłaty.
Czas między wypłatami.
Punkty,
w jakich można wypłacić.
Nie wiem, czy macie świadomość,
w banku
w każdym, pomijając detale,
istnieje parę reguł,
które zabezpieczają
przed tym, żeby nie można było
w krótkim czasie kartą płatniczą wyciągnąć kupy forsy.
Ludzie sobie ustawiają dzienne limity.
Jeżeli na przykład ktoś wie,
że generalnie płaci kartą,
a gotówki używa rzadko, to sobie ustawia limit.
Dzienny limit wypłaty gotówki
na przykład 300 złotych.
To znaczy, że
Połowa domyślnych to jest 100 tysięcy.
To zależy.
Nie wiem, gdzie masz w banku,
ale to jakiś dramat jest.
Słuchajcie, my mówimy o skutecznych zabezpieczeniach.
Ja nie mówię o tym, że ktoś łamie zasady.
Mówimy o tym, że
mamy teraz listę życzeń.
To są niekończące się dyskusje.
Otóż to, że ktoś znajdzie
lukę w systemie, jest możliwe.
Co wcale nie znaczy, że ta luka
ten system kładzie.
Przecież to, co wam teraz powiedziałam,
tak działają banki praktycznie na całym świecie.
Słyszeliście kiedyś
ile razy słyszeliście, że komuś wyprowadzono
trzeba być kompletnym idiotą,
żeby się zgonić na duże wypłaty gotówkowe.
A zresztą wiele banków i tak ma swoją
politykę restrykcyjną
i w momencie, kiedy ktoś nawet
będzie na tyle głupi, że sobie ustawi
10 tysięcy limit dzienny wypłaty,
to na 90%
w tym banku, jak ktoś wyciągnie
z tego więcej jak 500 złotych,
to pracownik banku dostanie lampę
i będzie natychmiast dzwonił, czy jest pan pewien,
czy to pan wyciąga tą wielką gotówę z banku.
Tak zareaguje prawie każdy bank.
Mówię prawie, bo znam takie, że nie.
Ja bym tam konta nie chciał mieć w ogóle.
Jest masa...
Ale to działa w drugą stronę, że
w niektórych bankach
to nawet nie pozwalają
niczego,
znaczy żadnej płatności
zrobić, bo wszystko jest podejrzane.
To są skrajności.
Słuchajcie, to jest prawda,
bo pamiętajcie, że każdy bank ma swoją politykę, tak?
Dla banku
to jest zawsze kompromis.
I teraz to są
niekończące się dyskusje.
Ja akurat miałem w tym do czynienia bardzo dużo,
bo nie tylko jak byłem
w wojsku zajmowałem się bezpieczeństwem danych
i transmisją, to jeszcze potem przez 10 lat
zajmowałem się
ochroną informacji.
Ludzie sobie w większości sprawy
nie znają z tego, że tam jest na zapleczu
i wszędzie oczywiście.
Jak się projektuje taki system,
to są przede wszystkim zestawy reguł.
I teraz wracając do naszej biblioteki.
Jeżeli my założymy, bo musimy coś założyć,
żeby przeciętny śmiertelnik
nie wypożyczać...
Zwróćcie uwagę, że prawie każda biblioteka
ma limit wypożyczeń. Z czego to wynika?
Skąd się bierze limit wypożyczeń
w bibliotece? Widzieliście bibliotekę,
gdzie można wypożyczyć 10 tys. książek?
Rzadko kiedy
weźmiecie więcej niż 5 na raz.
Z czego to wynika?
Żeby ktoś
nie wypożyczył całych, żeby jakby nie zapchał
całej tej biblioteki. Po pierwsze, żeby
żeby ktoś biblioteki nie
wyniósł w jednym razie.
Bo ja przyjdę...
Co pan chce? Ja poproszę wszystkie książki.
Zaraz podjedzie tutaj tir.
To jest reguła.
Czyli górny limit pojedynczego
wypożyczenia jest regułą zabezpieczającą
bibliotekę przed wyprowadzeniem zasobów
albo przed ich zniszczeniem.
No bo nawet jeżeli ktoś wypożyczy 10 tys.
książek, bo sobie
wykombinuje, że sobie weźmie książki na 20 lat,
to przede wszystkim nie przeczyta ich.
Bo mechanizm jest prosty.
Przeciętny człowiek czyta z jakąś
wielkością. My jako biblioteka
nie chcemy mieć każdej książki
w ilości 100 tys. egzemplarzy,
żeby każdy mógł przeczytać,
tylko robimy kilka założeń. Normalny człowiek
czyta jedną książkę tygodniowo.
Załóżmy, wymyślam.
To znaczy, załóżmy, że
niektórzy mieszkają daleko,
to on będzie przychodził
taki raz w miesiącu.
To znaczy, że jak przychodzi raz w miesiącu,
to ma sens mu dać 4 książek.
Nie ma żadnego sensu dawać mu
15 książek.
Nie będziemy go zmuszali tylko do jednej książki,
bo on ma za daleko
i nie będzie jeździł ze wsi do miasta po książki.
Musimy jakiś kompromis.
Czyli wykombinowaliśmy warunek.
Musimy to umieć uzasadnić,
bo to nie jest jakiś foch.
Rozumiejąc jak to działa,
rozumiejąc mechanizm działania
takiego czytelnictwa,
nakładamy limity.
Czytelnik może mieć wypożyczonych
najwyżej 4 książki.
Żadna książka nie może być trzymana
dłużej niż 2 miesiące.
Takich reguł nie jest dużo.
Jest kilka. Wystarczy przeczytać
regulamin przecież biblioteki.
Bo te reguły, one chronią bibliotekę.
Biblioteka musi być chroniona
przed zniszczeniem
z powodu niefrasobliwości czytelnika
i tam masy innych rzeczy.
My możemy wprowadzić karę
za przetrzymanie książki.
Nie możemy wezwać komornika,
żeby tą książkę odebrał.
Zakładamy milcząco, że przeciętny człowiek
w miarę chce, że raczej
nie chce płacić kar.
To znaczy, że pewne reguły są,
jak to się mówi, na prośbę.
Jak przetrzymasz, to trudno.
Musisz zapłacić dwie stówy.
Jak nie zapłacisz, skreślimy ci listy czytelników.
To ja pójdę do innej biblioteki.
Idź, zniszcz inną, nasza jest niezniszczalna.
Czyli są jakieś reguły,
które chronią bibliotekę.
Zwróćcie uwagę, że te reguły
chronią bibliotekę.
Staramy się nie być zbytnio
bez czytelnika.
Bo jak nam jeden czytelnik rozwali bibliotekę,
to pozbawiliśmy książek
pozostałych 10 tysięcy czytelników.
A tego nie chcemy.
Milcząco zakładamy, że na 100 tysięcy czytelników
jest jeden, dwóch, czterech złoczyńców.
Niekoniecznie założymy,
że wszyscy są złoczyńcami.
Jest masa założeń, które mają uzasadnienie,
jeżeli projektujemy to takie
hipotetyczne cyberbezpieczeństwo
naszej biblioteki.
To znaczy, że pracownik biblioteki
nie będzie wpisywał życzeń.
No bo nie.
Bo jest ryzyko.
Zarządzanie ryzykiem i ciągłością działania.
Bardzo niepopularna wiedza.
Umawiamy się, że pracownik biblioteki
nie jest
czytelnikiem.
Albo jeżeli jest za lato,
to nie jest czytelnikiem.
Jest to bardzo łatwe do osiągnięcia.
Gdybyśmy sobie przyjęli loginy,
to możemy przyjąć, że na tym świecie
jest to kolejne założenie bardzo wygodne.
Oni mają login swój prywatny
i być może służbowy.
Jeżeli Kowalski zaloguje się na
kowalskimaupa.fajna.biblioteka.com
to w tym momencie obowiązują go w tej aplikacji
reguły pracownicze.
Jeżeli on siedząc w domu przy internecie
zaloguje się jako
jankowalskimaupa.gmail.com
to jest czytelnikiem. Nie będzie miał dostępu
do żadnej funkcji bibliotecznej.
Będzie mógł sobie listę życzeń złożyć.
Jeżeli spodziewamy się nadużyć,
to piszemy, OK, lista życzeń.
Można przeciętny śmiertelnik,
jeżeli nie jest złoczyńcą,
zrobimy sobie badania,
załóżmy, statystyczne.
OK, przeciętny czytelnik jest w stanie złożyć
10 życzeń miesięcznie, czyli 11
nie pozwolimy mu wpisać. I koniec.
Nie można wypożyczyć więcej, nie można mieć
w domu więcej niż 4 książki z tej biblioteki.
Jak przyniosłeś dwie,
a masz w domu dwie, to możesz wypożyczyć
tylko dwie. Biblioteka wie, że
on jeszcze dwie trzyma.
Takich reguł nie będzie dużo. To będzie kilka, kilkanaście
reguł. I ta biblioteka będzie bardzo bezpieczna.
To, że znajdzie się jakiś
namolny człowiek,
któremu to się nie będzie podobało,
jest bardzo prawdopodobne. I zapewniam was,
że to kompletnie nikogo nie interesuje.
Jak ci się nie podoba z bibliotekę?
Tak samo jest z bankami.
To jeszcze pytanie. W jaki sposób będziemy weryfikować,
czy ktoś nie zakłada multikont
i czy nie łamie tych zasad?
No dobra. Macie jakiś pomysł?
Numer telefonu na przykład,
ale nie wiem, czy to jest dobre rozwiązanie.
Słuchajcie.
Zwróćcie uwagę.
Jak wam się wydaje, ile przeciętny
człowiek jest w stanie założyć sobie kont
pocztowych?
Ja mam chyba z 15.
No okej.
Jedno na minutę, bez problemu.
A jak się używa
strobyny darmowej, to jedno
na 15 minut.
Zwróćcie uwagę na taką rzecz,
bo to są niekończące się boje.
Siedząc nad takim
systemem bezpieczeństwa, mamy...
Słyszeliście o czymś takim, jak
Persona?
Otóż projektując
bank czy bibliotekę,
ten aktor
powinien mieć cechy.
Powinniśmy sobie stworzyć,
dopóki ktoś nie stworzy,
ten diagram przypadków użycia,
my się nad nim tutaj pastwimy,
bo to jest jeden z paradoksalnie
ważniejszych diagramów.
On będzie powiązany z pozostałymi.
Czytelnik powinien mieć swój opis.
Homo sapiens.
Zna język polski.
Normalny człowiek ma...
Telefonu, który się nie pokrywa.
Na dzisiejsze czasy,
załóżmy, że ma jakiś...
Załóżmy, że dzisiaj dorosły człowiek
ma telefon komórkowy. Jest to dosyć
odważne założenie, ale w większości
przypadków jest przyjmowane. Że taki człowiek
ma prywatny adres mailowy.
Znaczy się swój, taki osobisty,
nie firmowy. My możemy się
zastanowić, które z tych założeń
ma jakieś podstawy, a które nie,
bo to jest inna bajka. Ale musimy
sobie stworzyć taki ideał czytelnika.
Jego zachowań.
Jakbyście byli sklepem, to byście mieli
grupę docelową. Zwróćcie uwagę na taką rzecz.
Jeżeli ktoś zakłada
w centrum miasta cukiernię.
On robi dokładnie to samo.
Z perspektywy marketingowej tak.
Przeciętny... Mój klient. Mój klient
to jest człowiek, który lubi słodkie,
zeżre naraz do sześciu
pączków, czyli piekarz
sobie wyobrazi takiego idealnego
klienta. To się nazywa grupa docelowa.
I dokładnie pod tego klienta robi
ciastka i wszystkich innych olewa.
I on sobie normalnie świecie olewa.
Ja na przykład
jestem tym rzadkim typem, który lubi
czekoladę gorzką z bekonem.
Są takie w sklepach. Mało gdzie
można kupić. Nie wiem czy wiecie.
Myślicie, że przeciętny spożywczak
przejmuje się takim Żelińskim,
bo on przyszedł po czekoladę z bekonem
i mówi chłopie spadaj kurde.
Jeden na tysiąc przychodzi na molgach
taką czekoladę. Ja nie będę zmieniał całej
żabki tylko dla Żelińskiego. Żeliński wypadł mi stąd.
Nie interesują mnie w ogóle twoje pieniądze.
Jak masz takiego focha,
znajdź jelenia, która tego focha zrealizuje.
Ja jestem żabka.
Mój profil klienta obejmuje
nie wiem, wymyślam 90%
mieszkańców osiedla.
Wszyscy pozostali na drzewo.
Mówię poważnie. Na drzewo.
Nie jesteśmy w stanie zadowolić
aplikacją czy sklepem na rogu
100% populacji.
To jest absolutnie niemożliwe.
Nie macie wejścia.
Gdyby się okazało, że
istnieje na tej planecie
człowiek,
jeszcze być może jeden, który żre
gorzką czekoladę z bekonem,
to nie jest prawdą, że wszystkie sklepy
powinny taką czekoladę mieć na składzie.
Bo takich dziwnych
gustów na tym świecie są tysiące.
To znaczy, że doprowadzilibyście do sklepu,
zbudowalibyście sklep,
w którym na półkach 90%
towaru zalega latami,
bo macie jednego klienta na 5 lat.
Po prostu tych klientów najnormalniej w świecie
dostaną samemu. Mówię poważnie.
Banki robią dokładnie to samo.
Jeżeli trafi się człowiek z jakimś mega fochem,
to przeciętny bank powie
ja nie będę naginał swoich reguł.
Ty jak masz focha, to se idź gdzieś.
I są banki, które obsługują focha.
Na przykład przeciętny bank
rozgarnięty będzie wymagał
osobistego stawiennictwa przy założeniu
konta, bo to jest bardzo bezpieczne.
Jeżeli ktoś z Was, załóżmy,
ma takiego focha, że mu się nie podoba,
że musi pójść założyć konto osobiście,
to se założy konto w rewolucie,
które jest bardzo farnym kontem do nadużyć.
Tam trudno złożyć reklamację.
Natomiast mając tylko konto w rewolucie,
nie założycie głupiego konta na PayPalu.
Bo Paypal ma listę banków
i jeżeli banki
z osobistym stawiennictwem
potwierdzają, że taki
homo sapiens istnieje. Był tutaj twór białkowy,
nazywa się Żeliński, ma numer konta.
Jeżeli istnieją banki, a są takie,
albo instytucje finansowe,
które nie wymagają osobistego stawiennictwa,
to rachunek w tym banku
w wielu miejscach może być nieprzyjemny.
On jest przyjęty jako autoryzująca transakcja.
I powiem Wam, że
nikogo to naprawdę nie obchodzi.
Jeżeli ktoś ma takiego focha,
że będzie miał w banku i nie będzie,
że on nigdy nie pójdzie osobiście do banku,
to sam sobie nakłada ograniczenia.
Jest masa takich rzeczy,
słuchajcie.
Nie jesteście w stanie zbudować systemu idealnego,
ale możecie zbudować
system bliski ideałowi.
To się wiąże z tym, że zawsze znajdzie się pięciu ludzi,
którzy będą mieli focha i się na nas obrażą.
A my się na to nie obrażamy.
Biblioteka obsługuje dziesięć tysięcy mieszkańców,
piętnastu z fochem.
Wyjazd mi stąd.
Dlaczego? Bo liczy się bezpieczeństwo biblioteki
i jej zasobów. Nic więcej.
Nic się więcej nie liczy.
Odszczepieńcy mają potężny problem.
Tak myśli każdy,
uwierzcie mi, dobry architekt
aplikacji, osiedli, mieszkaniowych
i nie wiem czego jeszcze.
To jest duże wyzwanie intelektualne
dla projektantów systemów.
Mamy zresztą osobny przymiot.
Tutaj będziemy te reguły pisali później.
Należy zbudować kilka reguł.
Nie będziemy tego robili w tym momencie.
Natomiast realnie byłoby tak, że
lista życzeń jest
edytowalna dla czytelnika,
nie edytowalna dla pracownika biblioteki.
Jeżeli sobie wyobrazimy,
że przeciętny śmiertelnik ma
numer telefonu, to będziemy go
tym numerem autoryzowali.
Czyli przy założeniu konta dostajesz
SMS-em specjalny kod.
I nawet jak będziecie mieli tych kont mailowych
20 milionów, prawdopodobnie macie
jeden, może dwa numery telefonu,
bo nie 20 milionów.
Prawdopodobnie nie wyeliminuję tych nadużyć
w 100%, ale w 99%
i 99% na pewno.
Jest jeszcze
kolejny sposób weryfikacji, jeżeli jest
duże ryzyko.
Macie pomysł?
Bardzo nielubiany i choler nieskuteczny.
Adres zamieszkania.
Tak.
Na przykład bank, w którym ja mam konto
autoryzuje aplikację
na moim telefonie
odsyłając mi na papierze, pocztą
na mój adres zameldowania
ten kod.
Spróbujcie złamać to zabezpieczenie.
Życzę powodzenia.
Ja mam pieruńsko bezpieczne konto w banku.
Tylko, że ja nie mam fochów.
Ja się nie boję w ogóle o nic
w moim banku.
Bo jak zmieniłem telefon,
to miałem dwa wejścia.
Albo długa rozmowa z pracownikiem banku,
albo
zgłaszam,
bo nowy telefon to ma tam nowy e-mail.
Zainstalowałem sobie tą aplikację
i z banku dostałem
3 dni później na papierze kod autoryzujący.
Listem poleconym.
Spróbujcie to obejść.
Powodzenia życzę.
Panie!
Elektronika, papier.
Są
miejsca, gdzie się liczy bezpieczeństwo.
I niestety tam są fizyczne rośniki.
Tam trzeba się osobiście w banku pojawić.
Trzeba pięknie na papierze podpisać.
To się dzieje raz, dwa razy w roku.
Żadna ujma.
Spróbujcie to obejść.
Jest nie do obejścia.
Dlaczego?
Bo tam w banku ktoś siedział,
podrapał się w łeb
i powiedział tak.
Mamy tutaj parę milionów klientów.
Piętnastu z fochem, niech to do rewoluta idzie.
A my mamy bardzo bezpieczny bank.
Mamy ludzi, którzy dbają o pieniądze,
a nie dbają o swoją nadmierną wolność.
Są niekończące się dyskusje.
Uwierzcie mi.
Tylko, że w tym banku siedzi człowiek,
odpowiedzialny za bezpieczeństwo.
Jego interesuje to 99,9% klientów banku.
Pozostali go nie interesują.
Idź do konkurencji.
W każdym banku się dowiecie,
że jak wam się nie podoba regulamin,
to możecie bardzo spokojnie pójść do konkurencji.
Nie ma obowiązku.
Osobiście preferuję,
że trzeba pójść do instytucji,
żeby instytucje przesyłały mi na maila.
Na pocztę fizyczną.
Jest masa powodów,
dla których firmy robią różne rzeczy.
Nie będziemy,
bo to jest temat na osobne zajęcia,
bezpieczeństwo i nie tylko.
Podsumowując ten wątek.
Bezpieczeństwo polega na tym,
że my musimy zbudować
kilka reguł,
które łącznie będą czegoś pilnowały.
I teraz patrzcie na to,
czego tu jeszcze nie ma w tej aplikacji.
Macie archiwum książek.
Macie listę życzeń.
Jeszcze nie można z tej książki
niczego wypożyczyć.
Wypożyczenia.
Robimy przypadek pożycia
wypożyczenia.
Kogo my do tego podłączymy?
Znaczy,
czy możemy wypożyczyć książkę?
No tu zależy,
bo to jest ta kwestia,
że możemy czytelnikowi dać możliwość
rezerwacji książki,
żeby mógł sobie ją wypożyczyć,
ale samo wydanie książki
robi pracownik.
Pytanie, czy chowamy to
w tym samym bloczku,
że rezerwację książki
w celu wypożyczenia.
Do tego dojdziemy.
Pamiętajcie, że nie da się całej aplikacji
zaprojektować od razu. Ona będzie żyła.
Na razie pierwszą rzeczą,
którą powinien zrobić człowiek,
który kieruje takim projektem,
to powiedzieć sobie tak.
My musimy zamknąć pewien zakres projektu,
bo ta biblioteka
ma ruszyć za dwa miesiące.
Dobry projekt informatyczny
to jest projekt fix price, fix termin.
Pierwsza rzecz.
Robimy tyle
i zrobimy to za dwa miesiące.
Kolejne życzenia później.
Przy okazji inżynierii programowania.
Co jest bardzo ważnym elementem
tam, gdzie powstaje
oprogramowanie?
Dedykowane, ale w ogóle.
Co jest jednym z kluczowych elementów
w inżynierii w ogóle?
Oprogramowania też.
Bardzo prosta rzecz.
Musimy zdefiniować granice
pomiędzy tworzeniem oprogramowania,
a przejściem do fazy utrzymania
i rozwoju.
Jeżeli jakiś projekt nie ma tego terminu,
to znaczy, że jest bałagan.
To dotyczy odkurzacza,
samochodu,
oprogramowania dedykowanego,
wdrażania RP.
Musimy w projekcie wyznaczyć termin,
gdzie przechodzimy
od wytwarzania
do utrzymania i rozwoju.
Wytworzymy aplikację
w konkretnym czasie
za konkretne pieniądze,
mając konkretne wymagania.
Jak to zrobimy,
to potem będziemy płacili maintenance
za utrzymanie i rozwój.
Wtedy pojawią się nowe wymagania.
Ale istnieje moment,
kiedy kupujecie samochód
i od tego momentu
możecie go rozbudowywać.
Możecie sobie bagażnik dachowy przykręcić,
przyczepkę dokupić,
ale istnieje moment,
kiedy ten samochód został zrobiony
w takim stanie, w jakim jest,
ma skończoną liczbę funkcjonalności,
kosztuje pół bańki i poprosimy
oddany do użytku.
Od tego momentu
musi mieć taką datę,
bo jak nie,
to będzie zwykłym,
permanentnie rozgrzebanym czymś.
To znaczy,
że my w tej chwili zakładamy,
bo ten diagram do jednej rzeczy,
zamknięcie zakresu projektu,
co wcale nie znaczy,
że ta aplikacja w przyszłości
nie będzie rozwijana.
Przy okazji architektury mówimy o tym,
że dobra architektura,
to usłyszeliście chyba,
że jest ona zamknięta na zmiany,
otwarte na rozszerzenia.
Czyli na razie
rezerwacje później.
Oddajmy w końcu sensowny,
przydatny komuś system,
aplikację do użytku.
Potem będziemy ją rozwijać.
Nie możemy mieć permanentnie
rozgrzebanej piaskownicy.
Czyli na razie mamy wypożyczenia.
Ok. Kto wypożycza książki?
Dzisiaj zakładamy,
że jest czytelnik,
lada, bibliotekarz, nasz system.
To znaczy, że wypożycza
pracownik biblioteki.
Bo nikomu
nie wolno wziąć do łapy
książki z półki.
Przypominam,
że każdy system
ma to do siebie, że dzieją się rzeczy
poza tą biblioteką.
Ta aplikacja zakłada,
że istnieje...
Jeszcze raz.
Musimy połączyć pracownika biblioteki
z tymi wypożyczeniami.
Nie łączymy czytelnika.
Czytelnik może zgłosić życzenie.
Mamy zasoby biblioteczne.
Jeżeli chcecie, żeby Wam te kreseczki
tak ładnie wyglądały,
klikamy prawym klawiszem
na pustej przestrzeni gdzieś,
wybieramy łączniki
i tam u góry będzie...
Muszę to przetłumaczyć.
Takie coś jak łuk.
Będzie widać, która kreseczka,
którą omija.
Czyli na tym etapie
zamkniętym zakładamy,
że czytelnik widzi zasoby biblioteczne,
widzi formularz.
Pamiętamy, że komputer
komunikuje się komunikatami.
Tym komunikatem jest formularz.
Gdyby to była papierowa biblioteka,
to tym komunikatem jest
formularz papierowy.
Czyli czytelnik widzi, co jest w bibliotece,
może widzieć życzenia.
I teraz, jeżeli chodzi o tę regułę,
to...
To jest element wymagań.
Jest coś takiego,
jak reguły biznesowe.
Będziemy je spisywali.
Kliknijcie sobie...
Macie po lewej stronie w legendzie
reguła biznesowa.
U Ciebie na dole tam chyba czwarty, piąty od dołu.
Reguła biznesowa.
Kliknij gdzieś z boku.
Napiszemy...
One będą numerowane.
Zgłaszanie życzeń.
OK.
To jakoś literówę zrobię.
Reguła pierwsza prawym klawiszem.
Zgłaszanie.
Prawy klawisz.
Otwórz edytor reguł.
I piszemy regułę.
Życzenia
wpisuje
czytelnik.
My musimy teraz...
Co my musimy wiedzieć w tym momencie?
Bo to jest element budowania logiki aplikacji.
My musimy powiedzieć, co to jest czytelnik.
Klikamy, podświetlamy czytelnika.
To może dwa razy kliknę nim.
Prawy klawisz.
Stwórz pojęcie.
Pojawi Wam się z lewej strony słownik.
Widać? Wyskoczyło. Sam się zrobił.
Słownik. Na dole po lewej.
Mamy.
Teraz klikamy prawym klawiszem tego czytelnika.
Otwórz edytor pojęć.
I tu wpiszemy...
Kto to jest czytelnik?
BTC.
Wypiszemy.
Wypiszemy. Na razie tak na skróty.
Osoba wypożyczająca...
osoba mająca prawo wypożyczania książek.
OK.
Przełączy się na diagram przypadków użycia.
No, o tutaj.
Czytelnik się podkreślił.
A jak to się przerzuca?
Jeszcze raz?
Przełączę na ten diagram.
między diagramami możecie się przełączyć
albo za pomocą tej małej ikonki
taka miniaturka pulpitu po prawej stronie u góry
to co właśnie kolega pokazuje myszką
jak to klikniecie to wyskoczą
wszystkie diagramy
inną metodą jest kontrol tabulator
teraz tak
ta reguła, zwróćcie uwagę na taką rzecz
że brzmienie reguły
my nie musimy, możemy tą regułę
podpiąć krechą do tego bączka lista życzeń
ale nie musimy tego robić, bo ta reguła
regułą biznesową
tak się definiuje wymagania na logikę biznesową
z treści reguły wynika o co chodzi
przecież słowo czytelnik
jest nazwą aktora
pracownik biblioteki
musimy go zdefiniować
proszę podświetlić
nazwę pracownik biblioteki
kliknąć dwa razy, żeby się podświetliła do edycji
zaznaczyć, prawy klawisz
dodaj do słownika
o to
i piszemy osoba
zatrudniona w bibliotece
uprawniona do przyjmowania
i wydawania książek
i ok
jak będziemy
wszystkie te elementy
które są
jakimś konkretnym czymś
mają tak zwane nazwy własne
czytelnik jest czytelnikiem
musimy to zdefiniować
już wiemy kto jest czytelnikiem
zwróćcie uwagę na taką rzecz
czy można być jednocześnie
i czytelnikiem i pracownikiem biblioteki
nie
bo to nie ma sensu
jeżeli przyjmiemy
że nie wypożyczamy sami sobie książek
z wielu powodów
na przykład nadużyć
jeżeli ktoś jest w bibliotece za lado
w godzinach pracy
to wydaje i przyjmuje książki
a nie przychodzi po nie
jak chce po nie przyjść to po pracy może przyjść
ja mam dwa pytania
po pierwsze czy powinniśmy pilnować
żeby słownik dokładnie
tak samo wyglądał jak
nasi aktorzy
w sensie żeby to też było
z wielkich liter na przykład
czytelnik się zaczynał i tak dalej
czy to już takie obojętnie
to jest kwestia konwencji
najczęściej konwencja jest taka
że to czy dane słowo piszemy z dużej
czy z małej litery
zależy
zależy
na przykład
bardziej mi chodzi że zapisaliśmy już aktorów
z wielkich właśnie
i to mi się podoba
ale w samym słowniku trzymamy już z małej
na przykład
i teraz tak
generalnie
ja się spotykam z kilkoma konwencjami
najpopularniejszą konwencją jest ta
w której
słownik podobnie jak książkowy
słownik języka polskiego
wszystko jest z małej litery
z wyjątkiem nie wiem nazw miejscowości
czy państw tak
czyli klikamy po lewej stronie
bo pracownik biblioteki jako pojęcie
nie jest nazwą własną
tych ludzi tam jest pięćdziesięciu
klikamy pracownik biblioteki w słowniku
klikamy edycja
i zmieniamy na małe literki
to jest najczęściej spotykana konwencja
w słowniku
a jak się jeszcze raz do tego słownika
prawy klawisz na pojęciu słownikowym
po lewej stronie
pojawi się opcja
no edytor pojęć
i to jest ten ekran który macie
z uwagi na to że w języku polskim
nie tylko są końcówki
to tu jest taka możliwość
klikamy tam macie na tym szarym miejscu
takie coś jak pokaż inne formy gramatyczne
ale musicie kliknąć na ten napis
i dodajemy
pracownika biblioteki
dopisujemy z ręki
pracownika biblioteki
nie wiem pracownikom biblioteki
tam w przyszłości będzie można
dopisać wszystkie postępy
pozostałe
dlaczego tak robimy
bo wizual
jako narzędzie
pozwala wam bardzo
wręcz perfekcyjnie kontrolować
spójność całego projektu
chodzi o to żeby na przykład
jeżeli macie definicję czytelnika
czy pracownika biblioteki
po pierwsze nie używać tych słów w innym znaczeniu
po drugie żebyście widzieli
że w jakimś opisie
na diagramie gdziekolwiek
że to słowo w ogóle jest w słowniku
żebyście go niechcący nie zdublowali
tego samego tu jest niemożliwe
dlatego wizual
pozwala wpisywać
jako pomocnicza słówka
wszystkie inne formy gramatyczne
bo są języki nie tylko polskie
które mają flekcje i tak dalej
czyli jakbyśmy mieli regułę biznesową
czytelnik wypożycza
albo że czegoś nie wolno czytelnikowi
to będziecie mieli to słowo podkreślone
i będzie wiadomo że czytelnik, czytelnikowi, czytelnikiem
to jest cały czas to samo pojęcie
wracamy na diagram
w przypadku użycia
i teraz tak
ta reguła
jeżeli ktoś uzna że chce ją jawnie pokazać
no to może ją narysować na diagramie
tak jak myśmy to zrobili
i połączyć ją kreską do tej listy życzeń
natomiast tych reguł
nie będzie dużo
w przeciętnym projekcie tego jest
rzadko więcej jak kilkadziesiąt
żeby było łatwo operować w projekcie tym
to te reguły często są
wisywane w postaci tabelki
i wizual potrafi to robić
aże się będzie wam z tym pomagał
klikamy
w repozytorium projektu
przeglądarka modelu
klikamy na nazwie projektu
na nazwie projektu klikamy
prawym klawiszem
nowy model
model
nowy model
klikamy to
i piszemy model biznesowy
otóż jedna ważna istotna rzecz
reguły biznesowe są cechą firmy
a nie aplikacji
aplikacja ma je implementować
jeżeli mamy
my możemy sobie wyobrazić hipotetyczne regulamin biblioteki
i tam w regulaminie będzie napisane
cztery książki miesięcznie itd itd itd
to jest cecha tej instytucji
a nie aplikacji
aplikacja ma to implementować
prawy klawisz na tym modelu biznesowym
zrobimy sobie list
będziemy prowadzili listę tych reguł
nowy diagram
i tam pisze reguły biznesowe
reguła
lista reguł biznesowych
w każdym projekcie
następny model biznesowy
zmieńmy to na listę
na reguły biznesowe
ok
i mamy tabelkę
ona się podpowiada
macie numer reguły
nazwę tej reguły
treść tej reguły
jak klikniecie prawym klawiszem
to wam ten edytor reguł
otwórz edytor reguł
no to widać
i teraz tak
w niektórych projektach
szczególnie większych
możemy nie ma obowiązku
używać pojęcia typ reguły
bo to mogą być reguły
które są one wynikają na przykład
z prawa
mogą to być moje wewnętrzne reguły
czyli na przykład sam sobie
napisałem regulamin
jeżeli byłaby taka potrzeba
nie będziemy tego robili
bo tam będziemy pisali
typ reguły element regulaminu
albo element prawa
nie wiem być może
jakbyście robili
zwróćcie uwagę że gdybyście pisali
symulator jazdy samochodem
to niektóre reguły byłyby prawami fizyki
tak
przecież jeżeli mamy samochód
to on ma takie coś jak masę
prędkość i tak dalej
będzie pęd bezwładność
to znaczy że gdybyście chcieli napisać
to nie może być sytuacji
w której ktoś będzie mógł
sobie sparametryzować przy jakiej prędkości
wyleci na zakręcie
bo to są prawa fizyki tego nie modyfikujemy
ale w aplikacji gdzieś powinno być napisane
że masa razy prędkość
siła odśrodkowa czary mareszt
wyleciał na drzewo
czyli to będzie reguła
no nie nazwiemy tego regułą biznesową
ale to będzie jakaś reguła
i ona będzie niezmienialna
czyli my te reguły w szczególnie większych
punktach klasyfikujemy prawo regulaminy nie wiem prawa fizyki
i tam nie wiem co jeszcze
tutaj nie będziemy tego robili
tutaj są jakieś tam przykładowe
bo tam są trzy kropeczki można je edytować
my nie będziemy tego podziału stosowali
wracamy do naszego
diagramu środków użycia
ten nasz projekt jest relatywnie mały
także będziemy
będziemy
będziemy te reguły przykładowe rysowali
przesuńcie sobie tą regułę
gdzieś tam nie wiem
gdzieś po prawej stronie
obojętnie byle to było w miarę estetycznie
może tak
no i dobra mamy zasoby dotyczne
mamy listę życzeń mamy wypożyczenia
pierwszą rzeczą
którą należy teraz zrobić
to jest
założenie aplikacje projektujemy
w ten sposób że użytkownik
komunikuje się z komputerem jak się komunikuje
formularz ekranowy
jak my tam wyglądamy z czasem
bo my mamy dzisiaj trzy godziny
z kawałkiem
spojrza o które my dzisiaj kończymy
już nie przetrzymał no dobra
trzynasta piętnaście
trzynasta piętnaście
dobra
to znaczy że
wiecie co robimy sobie
jest dziesiąta trzydzieści
zrobimy sobie krótką przerwę za chwilę
ja wam teraz pokażę standardowy sposób
projektowania aplikacji znany jest
książek od słuchajcie końca lat dziewięćdziesiątych
mimo tego że wcale
nie jest specjalnie popularny
ale to nie jest jakaś wielka tajemnica
otóż
my komunikujemy się jako homo sapiens
z komputerem
formularzami
formularz deklaracji podatkowej
formularz faktury formularz opisu książki
formularz zamówienia
formularz formularz formularz formularz
my się jako ludzie nie komunikujemy pojedynczymi polami
jak wam się wydaje
jak się ze sobą komunikują dwa komputery
robicie integrację erpa ze sklepem internetowym
jak się komunikują
jak się projektuje integrację kto mi powie
macie pomysł
czy można na różne sposoby
jak
a co to jest api
no api okej
a co ono robi
no tak prawdę aplikacje mi ze sobą
wystawiają
definicję tego jakich danych oczekują
w jakim formacie
no i jak taka definicja wygląda
no na przykład w jasonie
a co to jest ten jason
format pliku
albo format danych bardziej
niekoniecznie to jest komunikacja
to jest komunikat
jason
dwa komputery
wymieniają są komunikaty
jason czy xml
to ma znaczenie drugorzędne
to jest komunikat
api
to są komunikaty i polecenia które je wywołują
czyli api będzie napisane
jak ja napiszę nip
to ty mi zwrócisz
bo jesteś gusem danych książki
to jest komunikat
nie książki tylko podmiotu
adres rejestrowy
coś tam jeszcze
komputery się komunikują komunikatami
my te komunikaty
możemy wyrazić w formie jasona
lub xml
niektóre możemy przesłać
plik csv
to ma znaczenie absolutnie drugorzędne
jedno jest ważne
że wszystko można zepsuć
wiecie jak można zepsuć api
takie pytanie
to dużo zapytań na sekundę
a
jak możesz ugotować procesor
jak się psuje api
kto ma pomysł
jakie api będzie lepsze
macie dwa rodzaje api
załóżmy
w jednym api
na przykład gdyby to był gus
gdy wiecie
że jak wyślecie nip
to dostaniecie komunikat
na którym jest komplet danych rejestrowych firmy
drugie api będzie takie
musisz zapytać osobno
o nazwę
o ulice
o kod
które będzie lepsze api
z powodów architektonicznych
api
będzie to lepsze
które ma tych poleceń mniej
i ma w jakiś mniej czy lepiej
przemyślany sposób opracowane komunikaty
projektowanie integracji komputerów
api restowe
obojętnie
w przemyślanym zaprojektowaniu dialogu
i nie wiem czy wiecie
jeżeli chodzi
bo są antywzorce
są dobre praktyki są antywzorce
jak wam się wydaje
co może być antywzorcem
przy projektowaniu interfejsów
nie tylko api
odpytywanie o pojedyncze atrybuty
absolutnie najgorsza forma komunikacji
odpytywanie o pojedyncze atrybuty
bo żeby wyciągnąć z gusu
dane
musicie wiedzieć o jakie atrybuty pytać
a jeżeli się mówimy
że wysyłacie tylko NIP
i gus wam zwraca paczkę danych
to jest to proste jak konstrukcja cepa
jest taka masa
ja na innych zajęciach
tu będziemy o tym mówili później
jak na przykład
można zepsuć aplikację
a propos architektury low level design
zrobić klasę
i wstawić do klasy getter sette
dla każdego atrybutu
to jest absolutnie najgorsza forma projektowania aplikacji
gorszej chyba już nie ma
jeżeli macie klasyfikator
reprezentujący fakturę
na fakturze będzie 30 pól
i ten klasyfikator będzie miał 30 getterów
get set nazwa get set
adres kontrahenta
czy nazwa get set nip kontrahenta
to jest absolutnie najgorsza forma projektowania oprogramowania
nie wiem czy macie świadomość
ale komuś płacą za linijki kodu
a nie za funkcjonalność
i czas działań
ewentualnie za godzinę
to są takie przypadki
ale powiem tak
na tych zajęciach będziemy raczej piętnowali patologię
a nie ją konserwowali
ale wspominać i tak możemy o niej
możemy wspominać o patologii
bo to jest bardzo edukujące
tego się nie robi
no chyba że ktoś jest po stronie
która fakturuje koszty
koderów
ale tak się składa
że ten świat idzie w tym kierunku
to taka dla was informacja rynkowa
coraz częściej sponsor projektu
zatrudnia po swojej stronie projektanta
a deweloper
wykonuje projekt na podstawie dokumentacji
stąd te zajęcia są nie przypadkiem
my tu na tych zajęciach
pełnimy rolę projektanta
nie dewelopera
czyli naszym interesem jest
żeby ta biblioteka
była oprogramowaniem
które powstanie relatywnie szybko
będzie pilnowało bezpieczeństwa biblioteki
i powinno kosztować
jak najmniej
przy optymalnej funkcjonalności
to jest rola
projektanta architekta
tak jak na budowie
domy projektują
projektanci domów
na zlecenie sponsorów
przychodzi armia murarzy
i robi pod dyktando architekta
bo gdybyście
zlecili projektowanie swoich domów
murarzom
to te domy są wszystkie ze złota
i są najdroższe na świecie
i wszystkie byłyby zrobione z takich małych cegiełek
bo układanie cegiełek centymetr na centymetr
to byłoby to
fundamenty by wam przyszła ekipa stuosobowa
i wygrzebała łyżeczką od herbaty
bo to będzie absolutnie najdroższa forma
wykopania dziury pod fundament
i tak dalej i tak dalej
temat rzeka na spotkanie
na zajęcia z architektury
i kierowania projektami
co nie zmienia faktu
że będziemy mówili o wzorcach projektowych
zanim pójdziecie na przerwę
ja wam pokażę fragment
to jest artykuł po części dla was napisany
teraz ja przejmę ekran na chwilę
żeby się nie zepsuje
to jest przeglądarka
to jest wasze UBI
a tu są moje ściągawki dla studentów
po czym
to jest artykuł który ja kiedyś
książkę kiedyś napiszę
jedną już napisałem
większość artykułów na blogu
to są tak naprawdę na życzenie studentów
podręczniki
tu na końcu macie spis literatury
możecie sobie potem podejrzeć
bo to dosyć dużo jest
to jest bazowy spis literatury
dotyczący tego co będziemy na moratorium robili
a co to z grubsza jest
rzecz polega na tym
że projektowanie aplikacji
ktoś to nazywał w latach 90-tych
Iconics
to niekoniecznie musi być ta nazwa
pojawiła się kiedyś w książkach
to jest jedna z tych książek Rosenberga
otóż
ten obrazek on jest w różnych formach
w książkach od wielu lat
wziąłem jedną z pierwszych
od 99 roku
jak powstaje oprogramowanie
przede wszystkim mamy
diagram przypadków użycia
bo my musimy wiedzieć
dopóki nie wiecie jaki formularz ma powstać
to nie ma sensu
żadna praca nad kodem
żadna
bo niezależnie od tego co w tym kodzie będzie
my jako ludzie będziemy się komunikowali
z tą aplikacją z pomocą 5, 6, 7 ekranów
a nie z pomocą
10 tysięcy linii kodu
komputer z perspektywy użytkownika
to nie jest kod źródłowy
tylko to jest urządzenie które do czegoś służy
na przykład urządzenie służy
do składania deklaracji podatkowych
nie istnieje
nie ma sensu pisanie
tworzenie komputera który służy do wpisywania nazwiska
w polu nazwisko
ma sens komputer który wchłonie deklarację podatkową
który wchłonie
zamówienie na książkę w butece
który wchłonie zamówienie na trumpki
i tak dalej i tak dalej
natomiast nie ma sensu ekran
na którym jest tylko nazwisko
i
proces cykl tworzenia oprogramowania
wygląda w ten sposób
że my przede wszystkim musimy
temat na inne zajęcia
mamy hipotetyczny proces biznesowy
na przykład notacji BPMN
i z tego procesu biznesowego wynika
że w tej instytucji
jaką jest na przykład biblioteka
operujemy takimi karteczkami jak
karta biblioteczna czytelnika
karta indeksowa
książki
karta wypożyczenia
zapotrzebowanie na książkę
cztery formularze
to znaczy że nasz system
będzie zbudowany
cała jego logika będzie się kręciła
wokół czterech formularzy
to czy to będzie
normalnie to jest papier
z perspektywy projektu programistycznego
jest to prototyp ekranu
to jest to
diagram przypadków użycia
to jest lista tych ekranów tak naprawdę
czyli jeżeli
my będziemy mieli cztery formularze
to będziemy mieli cztery przypadki użycia
a nie czterdzieści
diagram przypadków użycia to nie jest klepanie po ekranie
to nie są przepływy ekranów
to nie są procesy biznesowe
diagram przypadków to jest umowa
ta aplikacja będzie operowała czterema formularzami
bo to do czego ten służy formularz
zależy od regulaminu biblioteki
o tym do tego jeszcze dojdziemy
powstaje diagram przypadków użycia
ten diagram przypadków użycia
umowa na to co ma powstać
i teraz kolejną rzeczą
każdy system
każda aplikacja ma takie dwie części
ma opis jak to działa
i opis z czego się składa
lepiej
takie mniej czy bardziej kulowe
diagramy omelowe
to znaczy że nasza aplikacja będzie miała
architekturę czyli skończoną listę bloków funkcjonalnych
komponenty moduły
jak on tak zwał
i będą jakieś recepty
jak to będzie do siebie gadało
bardzo poglądowe rysunki
tak że się za bardzo nie przyzwyczajecie
scenariusze
czyli jeżeli aplikacja składa się z kilku bloków
to my musimy pokazać
jak te bloki z sobą współpracują
czyli co się musi wydarzyć
żeby wypożyczyć książkę
co się musi w tej aplikacji wydarzyć
żeby zarejestrować zapotrzebowanie na książkę
co się musi wydarzyć
żeby zarejestrować nowego czytelnika
to będą scenariusze
rzadziej kilkanaście punktów
to znaczy że
to co jest w tych przerywanych kreseczkach tutaj
to to co my robimy
my to możemy nazwać scenariuszami
algorytmami, architekturą
nie ma to znaczenia
nawiązując do przypadku
o którym mówiliśmy na pierwszych zajęciach
zanim ktoś zacznie klepać
kilkaset linii kodu
żeby posortować nazwiska na liście płac
na papierze powinien powstać schemat blokowy
pokazujący algorytm sortowania
na przykład bąbelkowego
i to będzie jedna kartka papieru
jak to narysujemy to potem
się upewnimy że to się kupy trzyma
to potem powiemy że będziemy kodować
jak już te obrazki zrobimy
i na tych obrazkach
te schematy blokowe
mają dwa podstawowe zadania
my musimy odkryć, zaprojektować
co ma powstać w tym kodzie
i musimy się upewnić
że to będzie działało
dlatego w WML są dwa rodzaje diagramów
są diagramy opisujące architekturę wewnętrzną
i diagramy opisujące tak zwaną dynamikę systemu
czyli testujemy na obrazkach
czy to w ogóle działa
jak już to zrobimy
to możemy dopiero zacząć kodować
bo to jest najdroższa część projektu informatycznego
to są grube mendejsy ludzi
którzy chcą zarobić na życie
to jest absolutnie
najdroższa część pracy w projekcie
proporcje są
nie wiem czy takie
że pomiędzy rysowaniem diagramów
kosztem a kosztem kodowania
proporcje są jak 1 do 100
w niektórych projektach 1 do 1000
kwestia zależy od tego
jaki jest to projekt
bo te algorytmy mogą być mniejsze
bo jest skomplikowane
jeżeli jakaś dziedzina jest dobrze znana
i na świecie jest dużo gotowych bibliotek
to ta proporcja jest tak mniej więcej 1 do 100
jeżeli jest to w miarę nowa dziedzina
i nie istnieją gotowe biblioteki
tylko trzeba wszystko wyklepać od zera w kodzie
to pomiędzy rysowaniem a kodowaniem
potrafi być proporcja kosztowa
jak 1 do 1000
zwróćcie uwagę
że testy
to jest nasza dokumentacja
jeżeli ktoś napisał scenariusz
ja bym chciał
mieć takie oprogramowanie
ja nacisnę guzik
albo opcję w menu
wypożyczenie
system wyświetli mi kartę wypożyczenia
ja jako aktor wypełnię
ten formularz
jest to ok
system sprawdzi poprawność formularza
i wyświetli mi komunikat
to jest moja wizja pracy z tym programem
minęło miesiąc pół roku
i dokładnie ten scenariusz
jest testem odbiorczym
nie ma czegoś
jak słyszę
że jacyś koderzy piszą testy
to sobie myślę
jakim cudem oni te testy robią
jak skończyli kodować
test jest pierwszym etapem projektu
bo on jest de facto wymaganiem
ja wymagam
od dostawcy oprogramowania
prostej rzeczy
ja klikam wypożyczenie
system wyświetla kartę wypożyczenia
ja tą kartę wypełniam
i mi pisze komunikat
ok albo nie ok
i to jest pół kartki papieru
pół kartki papieru
teraz ktoś siada to projektuje
to jesteśmy też my
potem przychodzi deweloper
napisał 100 tysięcy linii kodu
ja potem siadam
ten komputer jest przede mną
i klikam
jeżeli to co ja wyklikam na ekranie
jest dokładnie tym co ja napisałem miesiąc temu
to ja płacę
po prostu po książkach w różnych wersjach
tu jest inna wersja
z podręcznika akademickiego
pewnego
to samo tylko w innej wersji graficznej
w ten sposób
kolejna wersja
jeszcze z innej książki
to są książki które mam po 20-25 lat
do dzisiaj się w tej branży nic nie zmieniło
nic
to są różne formy
o wzorcach projektowych
będziemy o nich mówili później
to się zmieniło od lat
wracamy
robimy sobie przerwę
patrzę na zegarek
10 minut
widzimy się o 10
czy można jeszcze poprosić o link
żeby pan wrzucił na czat
a już zaraz wam wkleję
zaraz wam to wkleję
słuszne pytanie
dziękuję
o poszło
dobra bo jest za 10 minut przerwy tak
10 minut
starczy wam 10 czy 15 chcecie
10 starczy
dobra
za 10 minut się widzimy
okej
dobrze
tak
nie
tak
więc
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
No dobra, lecimy dalej.
Teraz kogoś innego na ekran poprosimy.
Jakiś inny chętny jest na ekran?
Chętna?
Dobra, zrobimy parytet.
Marlena Kuć, jesteś z nami?
Tak, tak.
Poprosimy.
Dobrze już, muszę tylko otworzyć
ustawienia, bo
nie chce mi udostępnić na Teamsach.
Już sekundkę.
Nie ma pośpiechu.
Już sekundkę, tylko muszę ustawić
sekundki ustawienia.
Ok, dokładnie, damy radę.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
W każdym razie, nie tracąc czasu, etap jest, w przypadku tworzenia aplikacji, projektowania, zawsze są dwa etapy.
Tak zwany high level design, czyli my musimy na jednej kartce papieru opracować taki obraz z lotu ptaka, a potem każdy z poszczególnych elementów się projektuje w detalach.
Ta część, która się nazywa, nazywamy to high level design jest po to, żebyśmy mogli dużego kloca podzielić na małe kawałki i żebyśmy mogli decydować w jakiej kolejności będą one implementowane i potencjalnie oddawane użytku.
Bo zwróćcie uwagę na taką rzecz, że to co Wam powiedziałem na początku, musi istnieć miejsce, moment w czasie, kiedy my mamy tak, to jest aplikacja wersja 1.0, można używać.
Minimum funkcjonalności, które pozwala poprawnie pracować w bibliotece, a potem będziemy oddawali kolejne bajery.
Zwróćcie uwagę na taką rzecz, że w tym przypadku, żeby biblioteka funkcjonowała, my jeszcze mamy pojęcie czytelnika.
Otóż, znowu zakładam, że istnieje hipotetyczna analiza biznesowa i analiza wymagań.
Jeżeli wiemy, że wypożyczamy książki tylko znanym osobom, my musimy na przykład, nie wiem, być może weryfikować, być może czytelnikiem jest tylko student uczelni, być może tylko mieszkaniec osiedla.
Jest masa powodów, dla których chcemy tych czytelników weryfikować.
Na przykład mamy bibliotekę osiedlową i czytelnikiem może zostać tylko i wyłącznie człowiek, który jest zameldowany w promieniu, nie wiem, pięciu kilometrów.
Mamy prawo taką regułę ustalić.
Czyli my jeszcze potrzebujemy mieć czytelników, rejestr czytelników.
Dodajemy kolejny przypadek użycia.
Rejestr czytelników.
I teraz znowu pytanie.
To jest znowu, pamiętajcie, to logika działania aplikacji jest generalnie konsekwencją regulaminu instytucji.
I teraz znowu pytanie. To jest znowu, pamiętajcie, to logika działania aplikacji jest generalnie konsekwencją regulaminu instytucji.
I teraz znowu, pamiętajcie, to logika działania aplikacji jest generalnie konsekwencją regulaminu instytucji.
Jeżeli mamy taką porządną bibliotekę, to znaczy, że trzeba przyjść do niej osobiście.
Jeżeli mamy taką porządną bibliotekę, to znaczy, że trzeba przyjść do niej osobiście.
Czy ktoś z Was był kiedyś w jakiejś bibliotece narodowej, albo w jakiejś bibliotece, gdzie są naprawdę ważne zasoby papierowe?
Zwróćcie uwagę, że mało która biblioteka, która wydaje, wypożycza prawdziwe książki, pozwala założyć konto zdalnie.
Nawet jeżeli ktoś się zdalnie zarejestruje, musi przyjść osobiście, z dowodem osobistym i aktywować konto.
To nie jest anachronizm, tylko to jest bezpieczeństwo biblioteki.
To znaczy, że rejestr czytelników prowadzi pracownik biblioteki, nie ma do niego dostępu czytelnik.
Łączymy pracownika biblioteki z rejestrem czytelników.
Udało się? Udało się. No okej.
To znaczy, że istnieje jakaś procedura, która mówi, że przyszedł człowiek do lady, wyspowiadał się, jak się nazywa, pokazał dowód osobisty, pracownik biblioteki.
Musisz dociągnąć tą kreseczkę, tak troszeczkę wjechać do środka, nie do samej krawędzi.
Jak się podświetli ten łączek, to jest okej.
On się musi po prostu podświetlić.
Tak?
Wiedział, że ty chcesz tam podłączyć tą krechę do niego.
I teraz, jeżeli regulamin biblioteki, czy zasady działania biblioteki mówią, że żeby założyć kartę czytelnika, trzeba po prostu przyjść z dowodem osobistym
i pracownik biblioteki założy konto i wyda kartę biblioteczną, to znaczy, że czytelnik nie ma do tej opcji dostępu.
I już.
A to czytelnik jeszcze chyba wypożyczenia musi być połączony, czy nie?
No teraz pytanie brzmi...
Pamiętajcie, że to jest aplikacja z jej menu.
I teraz, jeżeli mamy taką sytuację...
Tu musimy sobie wyobrazić istniejącą wcześniej analizę biznesową.
Otóż ten komputer stoi za ladą.
My możemy sobie wyobrazić sytuację, kiedy stoi komputer w tej części ogólnej, ktoś to musi wymyśleć, tak?
Musi istnieć taka informacja.
I możemy sobie wyobrazić sytuację, w której nie ma tego komputera.
Jest jeden komputer za ladą.
Biblioteka jest...
Słuchajcie, możecie...
Ja czasami, jak czytam niektóre wpisy w internecie, to się za głowę łapię.
Słyszeliście o czymś takim, że mało które ułatwienie jest ulepszeniem?
Mało które ułatwienie jest ulepszeniem.
Mało które ułatwienie jest ulepszeniem.
Mało które ułatwienie jest ulepszeniem.
Mam znajomego, który zajmuje się bezpieczeństwem.
On ma inne powiedzenie.
Jeżeli cokolwiek ułatwiasz w swojej aplikacji, pamiętaj, że pierwszym użytkownikiem będzie złodziej, haker i złoczyńca.
Nie zapominajcie o tym. Bardzo mądre powiedzenie.
Jeżeli cokolwiek ułatwiacie, to pierwszymi użytkownikami ułatwień będą złoczyńcy.
Jeżeli ułatwiacie wyjmowanie pieniędzy z bankomatu, pierwsi skorzystają z tego złodzieja.
Pierwsi skorzystają z tego złodzieja.
Pamiętajcie, że bezpieczeństwo aplikacji, nazywamy to bezpieczeństwo proceduralne.
To znaczy, że aplikacja bezpieczna, cyberbezpieczeństwo, to nie jest szukanie literówek w kodzie i malwareów.
To jest tzw. oprogramowanie niskiej jakości.
Tak samo jak okrętami.
Czym innym jest to, że SPA wypuszczają,
ten okręt jest niebezpieczny, bo puszczają spawy.
Nie, spawacz był do kitu.
To, że spawy puszczają, to jest absolutny dramat w tej stoczni.
Zakładamy, że kadłub jest pospawany dobrze.
Czyli byli dobrzy spawacze i spawy nie puszczają.
A jeżeli się zastanowimy, czy to jest prawda, że kabina kapitana jest bezpieczna,
to ona nie zależy od spawacza, który przyspawał zamki do drzwi,
tylko ona zależy od procedury wydawania kluczy do kabiny.
Bezpieczeństwo samolotu nie zależy od tego,
jak bardzo...
Znaczy, konstrukcja samolotu to bez łachy.
Ona się nie może parę razy sypać.
Jest reguła, która mówi.
Pilotów w samolocie jest dwóch.
Nie wolno im podać tego samego posiłku,
bo jak będzie coś, jak się przytruje, to oba się przytrują.
Pilotom w samolocie nie wolno zjeść tego samego.
Do kabiny pilotów jest tylko klamka od środka.
Żeby nikt nie wlazł.
Nie ma regulaminu, nie wolno wchodzić do kabiny pilotów.
Nie.
Kabina pilotów jest tak skonstruowana, że tylko osoba w środku jest w stanie ją otworzyć.
No i właśnie to doprowadziło do jednej katastrofy.
Której?
Gdzie tam jeden się zatrzasnął.
To jest ten moment...
Znaczy, znam tą katastrofę, bo oglądam bardzo często katastrofy w przestworzach.
Problem polegał na tym, że nie on się zatrzasnął,
tylko że facet był psychiczny.
I od tamtej katastrofy nie zmieniono konstrukcji drzwi,
tylko wprowadzono obligatoryjne badania psychologiczne dla pilotów.
Po tamtej katastrofie nikt nie zrobił klamki na zewnątrz drzwi w samolocie.
Żadnym.
Od tamtej katastrofy piloci są regularnie badani przez psychologów.
Nie zapominajcie o tym.
To się nazywa bezpieczeństwo proceduralne.
Tamtemu gościowi po prostu odpaliło.
Przed tym nie ma obrony innej niż badania psychologiczne.
Klamek nie wprowadzono po tej katastrofie klamek na zewnątrz.
Nikt nie wejdzie do kabiny pilotów z zewnątrz bez zgody pilota.
Taka sytuacja.
Identycznie postępujemy z projektowaniem oprogramowania.
Bo oprogramowanie, to że tam jest milion linii kodu nie zmienia faktu, że jest to puszka,
od której czasami zależy bezpieczeństwo całej biblioteki.
Instytucji publicznej, czy firmy.
To jest problem projektantów programowania.
Projektowanie oprogramowania nie polega na zaprojektowaniu miliona linii kodu.
Projektowanie oprogramowania polega na zaprojektowaniu logiki jego funkcjonowania i architektury.
To jest projektowanie, czy programowanie.
Potem pokażę fajną publikację tzw. naukową, czy w czterech latach.
Tak, cytuję z pamięci.
Programowanie polega na projektowaniu oprogramowania.
A nie na pisaniu kodu.
I teraz tak.
Mamy w związku z tym, z analizy biznesowej wiemy, że...
I teraz tak. Możemy patrzeć na to tak.
Biblioteka, żeby funkcjonowała, należy wpisać książki.
Należy je wypożyczać.
Należy mieć rejestr czytelników.
Możemy się umówić na przykład, hipotetycznie w tym przypadku, że lista życzeń będzie w wersji 1.1, a nie w wersji 1.0.
Bo...
Żeby biblioteka zaczęła w ogóle funkcjonować, to muszą być zasoby, muszą być czytelnicy, musimy rejestrować wypożyczenia.
Lista życzeń nie jest warunkiem koniecznym do istnienia biblioteki.
I na tym etapie projektu zaczynamy decydować o zakresie i etapach.
Kolejną rzeczą w związku z tym, jeżeli się umówiliśmy, że to menu ma cztery pozycje, ale na pierwszy ogień idą te trzy.
I to będzie wersja 1.0.
No teraz tak.
Przy przypadkach użycia, czy przy takim projekcie, istnieje coś takiego jak...
Musi istnieć człowiek, który zarządza zakresem projektu.
Klikamy na przykład na zasoby biblioteczne prawym klawiszem myszy.
Prawy klawisz.
I wybieramy opcję.
Prawy klawisz.
Prawy klawisz na tym jajeczku zasoby biblioteczne.
Powinna się pojawić lista do wyboru.
Jest ta lista, nie widać tego?
Wiesz co, bo masz chyba inaczej, bo chyba udostępniłaś okno.
Nie wiem jaki masz komputer, my tego nie widzimy.
Mam Maca.
No to właśnie on ukrywa, niestety on ukrywa.
No to musimy, na razie tak.
Tam jest taka opcja, która się nazywa wersja polskiej.
To jest chyba trzecia od góry.
Właściwości.
Właściwości elementów modelu.
Tak.
I potem jest, co się rozwija, jest abstrakcja, liść, korzeń, model biznesowy.
Nie, to nie to.
Kolejny temat, nie wiem, muszę, nie wiem, swojego otwierał.
Słowa wyjścia.
Albo się przełączysz na pełny ekran.
Zakładam, że nie masz tam czegoś, czego chcesz ukrywać przed resztą.
Sam Pan mówił o zabezpieczeniach, więc...
Nie, nie, nie.
Dlatego właśnie mówię, że...
Ja mam uzasadniony pełny ekran,
ale dbam o to, żeby wszystkie aplikacje były pełnoekranowo otwarte, nie?
Natomiast zabezpieczenie polega na tym, że nie mam otwartego okna,
które jest dla Was niedostępne, nie?
Słuchajcie, to może zróbmy tak.
Jeżeli...
Bo my to my nie musimy widzieć, bo tak powinniśmy się uczyć tego...
Może ktoś inny może udostępnić.
To teraz dobra, to teraz to może, to może ktoś inny udostępni ekran, dobrze?
Żeby już nie robić tutaj...
Koleżanka Wasza ma swoją politykę bezpieczeństwa i bardzo dobrze.
Natomiast my musimy te opadające okienka widzieć.
To dobra, to poprosimy kogoś z Windowsami.
Chyba na Linuxie podobnie to będzie widać.
Dawid Witkowski.
Co Ty masz? Macintosza?
Czy udostępnisz cały ekran, czy nie?
Jest z nami Dawid Witkowski?
Nie ma chyba.
Ja mogę udostępnić w sumie.
Dobra.
To udostępnij.
Ekran lub okno.
Udostępnij.
No dobra, czyli tak.
Prawym klawiszem na bączku wybieramy opcję otwórz szczegóły przodków użycia o czwarta z góry.
I teraz parę słów na temat tego ekranu.
Otóż takie narzędzia jak wizua nazywane...
Taki właśnie cut dla informatyki.
Tu mamy elementy pozwalające zarządzać projektem.
I teraz tak.
Klikamy wszyscy tą zakładkę info, pierwszą z brzegu.
To już mamy wpisane.
Przypadek użycia notatki.
Tu przypomina można sobie coś ze spotkań notować.
Scenariusz.
I teraz tak.
Jak wygląda scenariusz?
To jest właśnie taki ping pong.
Actor system.
Actor system.
Na razie...
Zasady biblioteczne...
Zasady biblioteczne...
To jest kwestia konwencji.
Są ludzie, którzy na przykład zarządzanie zasobami...
Znaczenie ma to drugorzędne.
Byle być konsekwentem.
Ja akurat jestem...
Szczerze mówiąc to jest...
Jak ktoś mówi...
Jestem w tym klubie, które menu konstruuję w ten sposób, żeby użytkownik, przeciętny, śmiertelnik wiedział co tam będzie.
I teraz jeżeli mamy zasoby biblioteczne to my je możemy...
Co my możemy tam robić?
No będziemy zapisywali nowe książki.
Rzadko będziemy je aktualizowali.
Będziemy je aktualizowali.
Klikamy na dole.
Tam jest taka mała literka A.
I zmieniamy nazwę na...
Nowa książka.
I OK.
I teraz...
Teraz...
Nasza wyobraźnia...
Jesteście projektantem.
Czyli wyobrażamy sobie...
Chcemy, żeby tak było.
Na razie jeszcze nic nie piszcie.
Chcemy napisać, że...
Aktor klika opcje zasoby biblioteczne.
System wyświetla...
Coś.
Co wyświetla system?
Według was.
Co powinno się pojawić na ekranie, jak ktoś kliknie zasoby biblioteczne?
We wszystkie zasoby?
No właśnie.
Teraz pytanie brzmi...
My możemy w ramach tych zasobów dodać nową książkę, a możemy znaleźć istniejącą.
Czyli będziemy mieli dwa warianty.
Jak ktoś kliknie zasoby...
Bo mamy...
Aplikacja służy do zarządzania tymi zasobami.
Tak naprawdę mamy dwa warianty.
Dodaj książkę.
Znajdź książkę.
Czyli mamy nowa książka.
Na dole mamy taki mały plusik koło literki A.
No i jeszcze możemy mieć, jeżeli chodzi o zasoby biblioteczne, to dodaj kolejną kopię.
Mamy na przykład trzy te same kopie w bibliotece.
Jak książka jest często wypożyczana, to ewentualnie to może być jeszcze...
I co to znaczy?
A jak się dodała...
To zwiększ ilość.
A ewentualnie zmniejsz, czy jak jakaś została zgubiona, zepsuta, zniszczona.
Okej, czyli ta książka jeszcze będzie miała jakiś status, że już jej nie ma.
Do tego dojdziemy później.
Tylko zwróć uwagę na taką rzecz, że książka na półce...
Do tego, że na chwilę dojdziemy.
Na razie mówimy o tym, co my możemy chcieć zrobić.
My możemy chcieć dodać książkę do zasobów?
Tak.
Wyszukać książkę w zasobach?
Wyszukać książkę w zasobach?
Czym jest wina dobra?
A jak się dodało tą kolejną zakładkę po nowej książce, scenariusz?
Na dole macie plusik.
I teraz będzie znowu.
Ja wam potem puszczę taką prezentację fajną.
To jest referat jednego z profesorów, inżynierii programowania.
On jest chyba na Stanfordzie.
Streszczenie jest takie.
Otóż...
Projektowanie...
To jest taka fajna prezentacja,
która mówi o tym,
na czym polega różnica
pomiędzy efektywnym projektantem czy programistą,
a tak zwanym zwykłym.
Otóż efektywni programiści tworzą programowanie,
nie wiem czy wiecie, ponad dziesięciokrotnie lepiej i szybciej.
Dziesięciokrotnie.
Ja wam się widzę.
Z czego to wynika?
Z czego to wynika, że jeden człowiek zrobi...
Zaprojektuje programowanie, napisze, whatever,
przyjdzie drugi i zrobi to dziesięć razy lepiej i szybciej.
Na czym polega różnica między tymi dwoma aplikacjami?
Różnica polega na tym, żeby ta aplikacja...
Jak by to powiedzieć?
Mamy interfejs.
Ja wam to potem puszczę, bo to jest takie dosłownie 3-4 minuty na koniec zajęć.
Mamy interfejs.
Niezależnie od tego, czy to jest API, czy to jest interfejs użytkownika,
my możemy albo nałożyć na użytkownika ogromną ilość pytań,
on musi się precyzyjnie nauczyć, co z tym fantem zrobić,
a możemy tak aplikację zaprojektować,
żeby użytkownik mógł jej używać, nie specjalnie się czegokolwiek ucząc.
Jeżeli jest możliwość, żeby aplikacja jako kilka reguł
sama rozpoznawała intencje użytkownika,
to należy to zrobić.
Zrobimy coś takiego.
Proszę z tego wyjść.
Usuwamy ten scenariusz.
Na dole macie taki kosz.
A tą nową książkę zmieniamy nazwę.
Literka A.
I piszemy książki.
To są zasady biblioteczne.
Na razie nie piszmy książki.
Nie będzie alternatywy.
OK.
I teraz...
Żeby w ogóle można było coś zrobić,
pierwszą rzeczą, którą należy zrobić,
jest przyjęcie do wiadomości,
że każda usługa aplikacji to jest formularz.
Musi istnieć formularz książka, zasób biblioteczny.
Klikamy zakładkę Diagramy.
Na dole mamy Dodaj.
Taką pigułę.
Dodaj nowy diagram.
I w notacji UML jest bardzo fajny diagram.
Nazywa się Diagram Struktur Złożonych.
Szukamy Diagram Struktur Złożonych.
Mamy, tak.
Klikamy.
Pusty.
Następny.
I teraz bardzo ważna rzecz.
Bardzo ważna rzecz.
Jak się psuje aplikację.
Co oznacza słowo książka?
Co to jest książka?
Przedmiot.
Przedmiot.
Gdzie on jest?
Książka.
Gdzie?
Na półce może lecieć.
Na półce. Okej.
A co jest w komputerze?
Co jest w szafeczce?
Stara biblioteka.
Szafeczka karty indeksowych.
Identyfikator.
I można tu powiedzieć.
Informacja o tym, gdzie znajduje się ta książka.
Informacja o książce.
Bo tam jest na tej karteczce.
Jest nie tylko napisany numer książek i półka.
Ale tam są autor, tytuł i tak dalej.
To są dane książki.
Opis książki.
Karta indeksowa książki.
Ale nie książka.
Jedną z ważniejszych rzeczy.
Najczęściej zaniedbywanych.
Słyszeliście o czymś takim.
Osobny przedmiot w tej szkole.
Dwa słowa.
Słyszeliście o czymś jak ontologia.
Albo dziedzinowy słownik pojęć.
Mamy czytelnik.
Czytelnika.
Zwróćcie uwagę na taką rzecz.
Czytelnik.
Kto to jest czytelnik?
To jest.
Ja czy wy.
Taki homo sapiens.
Twór białkowy.
Co jest w komputerze?
Czytelnik?
Nie.
Karta czytelnika.
Jedno słowo.
Może mieć jedno znaczenie w projekcie.
Komputer nie przetwarza czytelników.
Bo to nie jest maszynka do mięsa.
Czytelnik to jest ten człowiek.
Który przychodzi.
I taki.
Komputer.
Zastępuje nam szafę.
A w szafie nie ma czytelników.
Tylko są karty czytelników.
W tej szafie jest.
Karta indeksowa książki.
Nie książka.
Jak wam się wydaje.
Dlaczego te nazwy są takie ważne?
Dlaczego.
Mimo.
Dlaczego.
Jest taki dramat.
Że tak wielu programistów.
Koderów.
Projektantów.
Tworzy w komputerze.
Klasę.
Formularz.
Książka.
Czytelnik.
To jest.
Bardzo szkodliwe podejście.
Jak wam się wydaje.
Dlaczego?
Bo jest niejednoznaczne.
Bo jest.
To jest pikuś.
Reguł biznesowych nie wolno.
Nie da się napisać.
Jeżeli macie w regulaminie napisane.
Załóżmy że mamy tego czytelnika.
I teraz tak.
Będzie napisane w regułach.
Jakbyście mieli.
Kartę.
Nazwali czytelnik.
To byłoby.
Bibliotekarz.
Aktualizuje czytelnika.
Tak.
Ale czytelnik stoi przy ladzie.
To jak ja mam napisać.
Że czytelnikowi nie wolno.
Samemu tego robić.
Nie mogę.
Że czytelnik nie może.
Modyfikować czytelnika.
Bo to bez sensu jest.
To zdanie jest.
Absolutnie bezsensowne.
Czytelnik nie może.
Modyfikować czytelnika.
Co to znaczy?
To jest klasyczny.
Bełkot.
A jeżeli powiemy.
Czytelnikowi nie wolno.
Samemu modyfikować.
Kartę czytelnika.
To to jest.
Poprawne zdanie.
W języku polskim.
Bo czytelnik.
To jest twór białkowy.
Przed ladą.
A karta czytelnika.
W szufladzie.
Do tej karteczki ma dostęp.
Pracownik biblioteki.
I piszemy reguły.
Tylko pracownik biblioteki.
Może modyfikować.
Kartę czytelnika.
A jak ktoś napisze.
Że pracownik biblioteki.
Może modyfikować czytelnika.
To co to jest?
Chirurg plastyczny?
Masa projektów informatycznych.
Jest po prostu.
Spierniczona.
Mówiąc kolokwialnie.
Niedbarstwem.
Pojęciowym.
W projekcie.
To jest.
Jedno.
Jeden.
Z większych.
Problemów.
Kolejnych.
Kolejnych.
Kolejnych.
Jeden z większych problemów.
W tej branży.
Że sobie siedzi ktoś.
I ma klasę.
Pracownik.
Książka.
Czytelnik.
A potem jest problem.
Żeby głupią regułę.
Biznesową napisać.
Bo one są niejednoznaczne.
I potem mamy w bazach.
I w kogdelach.
Książka.
Brum.
Brum.
Jeden.
Książka.
Brum.
Brum.
Dwa.
Czytelnik.
Bram.
Bram.
Bram.
Jeden.
I tak dalej.
I potem.
Po dwóch miesiącach.
Nikt nie ogarnia zjawiska.
Tylko jedną rzecz.
Druga rzecz.
Żaden komputer.
Nie jest wolno stojącym.
Pudłem.
Na środku oceanu.
Każdy system.
To jest komputer.
I jego użytkownicy.
I otoczenie.
Dlatego.
Diagram.
Przypadków.
Użycia.
Obejmuje.
Otoczenie.
Słownictwo.
Jeżeli.
Jeżeli coś.
Co jest.
Poza komputerem.
Nazwaliśmy.
Czytelnik.
To nic więcej.
Nie ma prawa.
Nazywać się.
Czytelnik.
Żaden kawałek.
Kodu.
Nie ma prawa.
Że system.
Będzie.
Niejednoznaczny.
Dlatego.
Ten formularz.
Nazwiemy.
Formularz.
Karta.
Indeksowa.
Książki.
I OK.
I teraz.
Klikamy.
Otwórz.
Czy.
My.
Musimy.
Na.
Początku.
Projektów.
Pracować.
Nie.
Nie.
Nie.
Nie.
Nie.
Nie.
Nie.
Nie.
Nie.
Musimy projektu wymyśleć co wszystko.
Nie mustymy.
Na pewno.
Na pewno wiemy.
Że istnieje takie coś.
Jak karta indexowa książki.
Formularz karta.
Indeksowa� siążki.
Divia.
Kta.
Ks.
Tu.
Tu.
Dziadek.
K Bergów응ło złożony jest.
rodzajem.
Diagram.
Też operujemy,
klasami,
tylko że w tym przypadku projektujemy hipotetycznego.
Od gjsona
obojętnie,
a nie kawałek kodu.
Klikamy klasę klikamy się do środka.
Unikamy.
I u góry, tam gdzie jest klas, zmieniamy nazwę na formularz karta indeksowa książki.
I teraz w WML-u, żeby nie było wątpliwości, bo generalnie wszystko jest klasą i w WML-u w kodzie prawie wszystko.
I teraz, żeby nie było wątpliwości, czy to będzie moduł działający, kawałek wykonywalny kodu i tak dalej, w WML-u jest pojęcie też takiego jak stereotyp.
Stereotypy to są dodatkowe komentarze, które mówią, że ten prostokącik, bo w WML-u wszystko jest klasą, nie będzie modułem, tylko będzie na przykład komunikatem.
No taka informacja dla Was. Z perspektywy twórcy oprogramowania, dokument, komunikat, XML, formularz, to są komunikaty.
Bo my się komunikujemy z komputerem czym? No komunikatami, tak? Formularz na ekranie jest komunikatem, który ja dostałem na ekran.
I z tego komunikatu się dowiaduje, że ktoś ma nazwisko, imię i tak dalej, i tak dalej, i tak dalej, i tak dalej.
Stereotypy informują nas, czym dany blok na tym sklepacie blokowym jest. Ten będzie dokumentem.
Słowo dokument i komunikat to są synonimy, przynajmniej na etapie architektury.
Klikamy prawym klawiszem na tą nazwę, formularz, karta, wybieramy opcję stereotypy, nie, jeszcze raz, raz, stereotypy, zjeżdżamy na dół, edytuj stereotypy.
I to jest tak, w WML-u jest takie słowo kluczowe jak dokument, nie wszystkie tutaj są wpisane, musimy sobie je dodać, tu akurat jeszcze nie ma.
Klikamy na dole edytuj stereotypy, wybieramy opcję dodaj, po prawej stronie na dole, i piszemy u góry nazwa, dokument, przez C.
Znaczy, znowu, konwencja jest taka, że jeżeli chodzi o notacje, bo tak samo jak wszystkie języki programowania to są tak naprawdę angielskie słówka,
W WML-u stosujemy taką zasadę, że jeżeli coś jest elementem tego dokumentu, to jest to element.
W WML-u, dodajmy sobie tam opis wszyscy, treść zrozumiała dla człowieka.
Formalnie w WML-u dokumentem jest coś, jakiś ciąg znaków, pomijam znaczniki, jakieś etykiety, które jest treścią domyślnie zrozumiałą dla człowieka.
Domyślnie, bo to może być komunikat pod tytułem, nie wiem, ilość paliwa pomiędzy pedałem gazu, a wtryskiem silnika.
My jako ludzie zrozumiemy, nie? Dodaj więcej benzyny.
I taka tam, formalnie taka jest definicja w WML-u.
Dokumentem nazywamy każdy ciąg znaków, każdy taki artefakt, jakiś tam komunikat, który jest potencjalnie zrozumiał dla człowieka.
Naciskamy OK.
Tu też OK.
I teraz mamy już ten dokument na liście.
Przenosimy go do prawego okienka i naciskamy OK.
I tu u góry się pojawi stereotypy w WML-u, to są takie nazwy, to są słowa kluczowe ujęte w taki podwójny, łamany nawias.
To, co narysowaliśmy oznacza, że ten klasyfikator, który nazywany jest formularzem karta, to nie jest coś, co będzie działającym kodem, to jest coś, co jest komunikatem, treścią.
Obojętnie, czy to jest treść wysyłana między modułami, czy pomiędzy modułami.
Czy pomiędzy ekranem.
Nie ma to większego znaczenia.
I na razie wiemy, my nawet nie musimy wiedzieć, jakie tam są pola.
My na razie wiemy, że istnieje formularz karta, indeks biblioteki.
Ten formularz niesie jakiś ustalony zastaw danych o książce.
Czy my musimy go teraz znać?
Nie musimy.
To odkładamy na później.
Absolutnie wszystko odkładamy na ostatni moment.
Na przykład klawiszem CTRL tabulator przełączamy się z powrotem na ten scenariusz.
Już.
I puszczamy.
To drugie ogieńko, to drugie od lewej.
I już mamy.
Odklikujemy z powrotem scenariusz, zakładkę scenariusz.
I teraz tak.
Na jakie okno?
Jeszcze raz.
Zasoby bibliotek.
To ci kolega pokaże zaraz.
Use case details, musisz się na to przełączyć.
To jest to, co mieliśmy.
Możemy się przełączać klawiszami CTRL tabulator.
Visual pamięta ostatnich 10 diagramów.
I po prostu można się cyklicznie między nimi przełączać.
I teraz tak.
Scenariusz wygląda w ten sposób, że my chcemy napisać, że aktor, ten konkretny, tu jest placownik taki, coś nacisnął i ten formularz się pojawił.
Visual kontroluje spójność i zwartość projektu.
Dlatego jeżeli coś zostało zadeklarowane jako przypadek użycia, jako aktor, to będziemy z tego korzystali.
Na przykład u góry mam taki mamy plusik.
Klikamy ten plusik.
Wybieramy aktor.
Znajdujemy na liście pracownik biblioteki.
Podświetla się pierwszy.
Przepraszam, bo się zgubiłem, bo chyba nie ma tego okna.
Jak się wchodziło z tego głównego projektu?
Zrób na piechotę.
Wejdź na diagram przypadków użycia.
Najprościej na piechotę.
Diagram przypadków użycia.
Prawy klawisz na przypadku użycia.
I wybieramy. Otwórz.
Ta czwarta opcja od góry.
Edytuj.
Jak to otworzysz, to Ci wyskoczy ten ekran.
Udało się czy nie?
To może jeszcze raz.
Kamil Nikola.
Przejdź na diagram przypadków użycia, żeby wszyscy widzieli.
Na przykład diagram przypadków użycia.
Wyklikujemy go.
U góry.
Przypadki użycia.
Dobra.
Przejdź na zasoby byteczne.
Otwórz szczegóły w przypadku użycia.
I mamy.
I wybieramy zakładkę scenariusz.
Wszyscy mają?
Czy ktoś się jeszcze zgubił?
Cisza.
Czyli wszyscy mają.
No dobra.
Czyli teraz tak.
Żeby scenariusz to jest krok po kroku opis tego co będziemy robili.
Żeby utrzymać spójność projektu.
Spójność projektu co wam za chwilę zobaczycie.
Wizual jest tak skonstruowany, że jeżeli istnieje diagram na którym coś narysowaliśmy.
To możemy używać tego w dowolnym miejscu treści i opisu.
I teraz tak.
Wyklikujemy sobie to właśnie tutaj aktora.
Klikamy aktor.
Podświetla się.
Gdyby nie podświetlamy pracownika biblioteki.
Naciskamy OK.
I dopisujemy prozą.
Wybiera opcję.
A ten aktor to się podświetla jak się w to pole kliknie?
Bo tutaj mi się nic nie wyświetla.
Jak klikniemy plus i podświetla się aktor.
Tu mamy listę aktorów.
To jest lista aktorów.
Które są na diagramie przypadku wyżycia.
Na tym diagramie w przypadku wyżycia mamy aktorów takich jak pracownik biblioteki, czytelnik i wyszukiwacz.
Czy tam wyszukiwarka ISBN.
Masz taki ekran?
A tak, tak.
Podświetlamy.
Domyślnie się podświetla pierwszy.
Gdybyśmy chcieli czytelnika to musimy go kliknąć.
Nas interesuje pracownik biblioteki.
Klikamy pracownik biblioteki.
OK. Wybiera opcję.
I teraz znowu plusik.
Przypominam, że opcje w menu to są nasze use case.
Wybieramy przypadek użycia.
Przypadek użycia.
Pierwszy z brzegu.
I mamy zasoby biblioteczne.
Bo tak się nazywa ta opcja w menu.
I OK.
Enter.
Zasoby biblioteczne?
A to powinno już tam być w tym plusie, tak?
Czy...
Plusik to są typy.
Wybieramy po tym plusiku przypadek użycia.
Przypominam, przypadek użycia
to jest kolejna opcja w menu.
Tu jest lista tych przypadków użycia.
Wybieramy zasoby biblioteczne.
Czyli napisaliśmy, że pracownik biblioteki
taki byt mamy zdefiniowany.
Wybiera opcję.
I jaką wybiera opcję?
No to zasoby biblioteczne.
Przypominam, że przypadki użycia
to są usługi aplikacji.
Czyli człowiek, który jest pracownikiem biblioteki
chciałby użyć usługi aplikacji.
Chciałby to zrobić.
Zasoby biblioteczne.
Teraz system.
Jak myśmy tam kliknęli, to system coś zrobi, tak?
Tam macie takie małe słoneczko, taką gwiazdeczkę żółtą
po lewej stronie u góry.
To są polecenia systemu.
Wybieramy opcję odpowiedź systemowa.
I dopisujemy.
Wyświetla.
I znowu.
Plusik.
Pamiętamy, że formularz jest klasą.
Tak?
Klasyfikator.
Wybieramy opcję klasa.
To okienko u góry.
I rozwijamy to.
I odklikujemy formularz karta indeksowa książki.
Stawiamy ptaszka i OK.
No i dobra.
Enter.
A teraz skąd się system wziął?
O tu.
Kolega ci pokaże.
A dobra.
Dziękuję.
Oznaczamy tą linię.
Potem Visual pomoże nam automatycznie
stworzyć diagram sekwencji.
Dlatego większość rzeczy w tej aplikacji.
W ogóle w takich aplikacjach.
Trzeba sobie wyklikać.
Zaraz zobaczycie dlaczego.
Mamy już.
Tak?
Trzecia linia.
Znowu.
Pracownik biblioteki.
Powtarzamy to.
Plusik.
Aktor.
Pracownik biblioteki.
OK.
Wprowadza dane do.
I znowu wyklikujemy formularz karta indeksowa książki.
Nie system.
Nie.
Nie.
To aktor robi.
Plusik.
Aktor.
Nie aktor.
Przepraszam.
Klasa.
Pamiętamy, że formularze są klasami.
OK.
Rozwijamy.
Poszło.
Dobra.
I naciska OK.
Ten opis ma być zrozumiały dla przeciętnego śmiertelnika w bibliotece.
Pamiętajcie, że my tworzymy dokumentację nie dla siebie.
Tylko to jest nasz dialog ze sponsorem projektu.
Ten formularz.
Ten formularz jest wymaganiem.
Ten formularz, czy ten scenariusz przepraszam, będzie testem odbiorczym.
On jest testem odbiorczym.
Naciskamy Enter.
System.
I wybieramy tą gwiazdeczkę.
System.
Dopisujemy.
Zachowuje formularz.
I znowu klasa.
A system to było w tym.
Starzeł ta gwiazdeczka.
Odpowiedź systemu.
Widać?
A tak.
Dobra.
Dobra.
Czyli tak.
System zachowuje ten formularz.
Enter.
I drugą rzeczą, jaką system zrobi.
Znowu system.
Wybieramy żółtą gwiazdeczkę.
System wyświetla komunikat.
Zakładamy milcząco.
To jest projekt.
Na razie.
Bo to jest dla nas na razie cały czas czarna skrzynka.
I umawiamy, że to jest projekt.
To jest dla nas na razie cały czas czarna skrzynka.
I umawiamy, że to jest projekt.
To jest dla nas na razie cały czas czarna skrzynka.
I umawiamy, że to jest projekt.
Zakładamy milcząco.
To jest projekt.
Na razie.
Bo to jest dla nas na razie cały czas czarna skrzynka.
I umawiamy, że to jest projekt.
To jest projekt.
Na razie.
Bo to jest dla nas na razie cały czas czarna skrzynka.
I umawiamy, że to jest projekt.
Zespół z omsorem.
Słuchaj ty, Kowalski nie.
Dyrektor biblioteki.
Albo ty bibliotekarzu.
Ta aplikacja będzie tak działała.
Siadasz do komputera, jak już się tam zalogujesz i tak dalej.
Widzisz menu aplikacji.
Ty jesteś pracownikiem biblioteki.
Wybierasz sobie opcję zasady breastylengie.
Zasady biblioteczne.
Jaki? Formularz.
Nie musimy wiedzieć, jakie ma pola.
Wprowadzasz dane i naciskasz OK.
System zachowa ten formularz
i wyświetla Ci komunikat.
Jaki? Ustalimy jutro.
Dziękuję bardzo, fajnie, że się naklikałeś.
My nie musimy tego dzisiaj wiedzieć.
Wyklikaliśmy te nazwy,
bo jak się być może domyślacie,
za jakiś czas przeciętna aplikacja
będzie miała 30, 40, 50 stron,
a 4.
Ta aplikacja żyje.
Załóżmy, że mamy taką sytuację.
Przeklikujemy się na diagram przypadków ożycia.
Kto pamięta?
Przeklikujemy się tak, żeby diagram
i sklep się pojawił.
Dacie?
Albo przez ten mały pulpicik
po prawej stronie u góry
i klikamy przypadki użycia, ten diagram.
I teraz siedzicie sobie z użytkownikami
i załóżmy, że dyrektor mówi
nie, panie, panie, panie,
my tutaj od 20 lat mówimy,
że to są książki.
Ja mówię, wiecie,
problem polega na tym, że książki są na półkach.
To jest ten moment, kiedy będziecie musieli
jednak trochę...
To nawet nie są negocjacje.
Po prostu ludzie, którzy pracują,
z papierem i z biurkami,
nie mają świadomości tego,
że pewne rzeczy wymagają porządku.
Gdyby oni pisali regulamin,
gdyby pisali regulamin,
dobrze,
na przykład taka rada praktyczna,
lepiej jest mieć w ręku regulamin biblioteki,
bo w regulaminie będzie...
Przeciętny prawnik nie ma problemu z tym,
żeby odróżnić czytelnika
albo odróżnić książkę
od karty indeksowej książki.
Dlatego bardzo dobrze jest,
bo to, że użytkownicy używają slangu,
panie, to jest tam książka,
nie, co to jest?
W tej szufladzie są książki.
Otwieram szufladę, a tam jest jak byk napisane,
karta indeksowa książki.
Bardzo kiepskim pomysłem,
potem Wam wkleję fajną publikację,
bardzo kiepskim pomysłem jest
tworzenie oprogramowania pod dyktando usera.
Między nami jest to jedna z najgorszych metod.
Bo te wszystkie uproszczenia,
które...
którymi posługują się na co dzień użytkownicy,
pracownicy tych firm,
one się nie nadają...
Dlaczego pracownicy firm sami nie piszą regulaminów swoich?
No bo się do tego nie nadają, tak?
To, że oni sobie operują slangiem na hali fabrycznej,
między książkami i się dogadują,
to jest prawda.
Ale nikt tak nie napisze nawet głupiego regulaminu,
bo czekaj, musi być człowiek, który ogarnia jakąś logikę,
słowniki i tak dalej.
Dlatego regulaminy raczej piszą prawnicy,
a nie pracownicy firm.
Ale załóżmy,
że siedzimy i mówimy okej, nie?
Mamy czytelnika, mamy pracownika biblioteki,
w zasobie biblioteczne
ktoś wpadł na pomysł, że okej,
zmienimy nazwę na
katalog książek.
Zmieniamy nazwę na katalog książek.
Przepraszam,
karty katalogowe książek.
Karty katalogowe książek.
I teraz wyobraźcie sobie,
że ta dokumentacja ma nie 3-4 kartki,
tylko tam jest 50 stron.
Bo będziemy kiedyś,
my nie zrobimy telu, ale załóżmy.
Przełączamy się teraz na,
teraz tak, klikamy prawym klawiszem,
otwieramy otwórz
tego użytku użycia.
I co?
Zmieniło się.
Nic nie musimy robić.
Nic nie musimy robić.
Jeżeli korzystamy z tej funkcjonalności,
tej aplikacji,
że jeżeli coś jest na diagramie,
to wstawiamy to z listy,
a nie piszemy z palucha,
to niezależnie od tego,
czy nasza dokumentacja będzie miała 5 stron,
czy 500 stron,
ona i tak będzie zawsze aktualna.
Między innymi po to
używamy takiego oprogramowania.
Takie aplikacje jak Visual Paradigm
służą nie tylko do klepania obrazków,
jak w PowerPointcie,
to jest potężne narzędzie do zarządzania
całym projektem.
Skąd się to bierze?
To teraz będziecie wiedzieli.
Jeżeli zobaczycie dwóch ludzi,
każdy z nich,
jako analityk, projektant,
jak go nazwiecie,
przynosi na spotkanie
100-stronicowego PDF-a.
Tam jest projekt aplikacji.
Na tym spotkaniu dokonaliśmy
trzech drobnych zmian,
na przykład takich jak ta.
I pada pytanie.
Ty tam, projektant,
na kiedy dostarczysz mi
zaktualizowaną dokumentację?
Jeden wam powie
daj mi 5 minut,
a drugi wam powie tydzień.
Takie są proporcje.
To teraz sobie wyobraźcie,
że ktoś ma
dokumentację aplikacji
całego systemu,
którą zrobił w Wordzie,
a obrazki sobie wyklepał w Miro
albo w Dravio.
I w tym samym ramach
jest nazwa tego use case'a
i gdzieś tam w tekstach,
w akapitach,
ktoś podjął decyzję,
że ta opcja się będzie nazywała
na ekranie karty katalogowe książek
i trzeba tą całą dokumentację
zaktualizować.
Ile roboty ma człowiek,
który ma tylko Worda i Miro albo Dravio?
Ma robotę na tydzień.
A wy, wiedząc,
że z tego można wygenerować
dokumentację aplikacji.
Przełączamy się na
Diagram Spadków Łożycia
i macie po prawej stronie
taką malusieńką szarą fiszkę
przy samej krawędzi diagramu
po prawej stronie.
Po prawej krawędzi diagramu.
Jeszcze w prawą myślą, jeszcze w prawą.
Diagram to całe białe pole
i w środku jest taka mała szara fiszka
na środku.
O tutaj.
O tu.
Widzisz? Masz taką małą fiszkę szarą.
O, kliknij to.
Musisz kliknąć,
by się rozwinęło.
I tam u góry jest taka ikonka.
Ona się nazywa dokumentacja.
Kliknij to.
Macie specyfikację
tych wymagań.
Ona jest edytowana.
O tym będziemy mówili później.
Co znaczy, że jak wam możecie,
potem dodamy tam stopki, nagłówki, numery
i tak dalej.
Ona jest edytowalna.
W tej chwili jest to trochę nadmiarowych tabelek.
Jak napiszemy więcej prozy, to będzie.
Załóżmy, że chcemy mieć ten diagram
bo to jest tylko sama specyfikacja,
ale obrazek jest potrzebny.
To macie po lewej stronie
w przeglądarce modelu
opis techniczny aplikacji.
Pierwszy z góry to jest ten diagram.
Przeciągamy go drag and drop
na początek z tej strony
i wyłączamy myszkę.
I już jest.
To co macie na ekranie
to jest tak naprawdę dynamicznie generowana
dokumentacja w locie.
To czy ona ma 500 czy 50 nie ma znaczenia.
To działa troszeczkę jak taki blokowy
edytor tekstu.
Nie jest to może wypasiony Word,
ale tu możecie spokojnie dodawać,
dopisywać coś prozem i tak dalej.
To będziemy robili później.
Rzecz polega na tym, że
ktoś taki jak wy
wyłączył swojej pracy
i ma visual paradigma.
Natomiast nie jest prawdą,
że każdy człowiek na tej planecie
ma visuala,
ale praktycznie każdy człowiek
mający komputer ma przeglądarkę PDF-ów.
To znaczy, że wy...
To jest taka sama sytuacja jak na budowie.
Siedzi sobie projektant statków
i ma wypasione oprogramowanie
CAD, CAM, ARCHI, CAD, obojętnie
i on tam sobie te rysunki 3D
ma za kupę pieniędzy.
To nie jest takie drogie.
Siedzi przeciętny spawacz i mówi
ty, albo kierownik fabryki,
sponsor tej stoczni,
ja bym chciał zobaczyć, co tam zaprojektowałem.
To naciska guzik i wygeneruje kwity,
nie wiem, 50 albo 500 ton PDF-a,
bo wszyscy mają przeglądarkę PDF-ów,
a nikt nie ma ARCHI, CAD-a, prawie nikt.
I to samo mamy tutaj.
My mamy porządne narzędzie,
schematy blokowe, one tam się widzą wzajemnie,
zobaczycie jeszcze więcej.
A jak ktoś wam przyjdzie,
ty, czy ja bym mógł zobaczyć tą dokumentację,
którą ty zrobiłeś? Mówisz i masz. Jeden klawisz i PDF.
Tu możemy potem przybajerzyć,
dać jakieś tam tytuły i tak dalej.
Zróbmy małą rzecz.
Proszę kliknąć w przeglądarce
modelu
szczyt tej hierarchii,
aplikacja wspomagająca pracę biblioteki.
Chciałem zapytać jeszcze o jedną rzecz.
Bo u mnie ten dokument,
ten sam, wygląda trochę inaczej.
Nie mam tej drugiej części, gdzie jest nazwa, ID,
głównie, kto, że, pula, zadania.
Zaraz się przełączymy, dobra?
Dobrze. Naprawimy.
Chcielibyśmy mieć jakąś winietkę tego.
Klikamy teraz myszą,
aplikacja wspomagająca pracę biblioteki.
Sam szczyt hierarchii.
Szczyt hierarchii, o tu.
I tam po lewej stronie, tam gdzie jest szablon,
mamy podświetlony Basic Information.
Przeciągamy to na sam szczyt strony.
No i mamy jakiś tytuł, tak?
To jest tak naprawdę treść tej tabelki, którą wypełnialiście na początku.
To jest jedna z wielu możliwości, tak?
Nie będziemy teraz się bawili w ogóle
na tych laboratoriach o jakieś tam cyzulowanie tego,
ale chodzi o to, żebyście widzieli,
że takie narzędzie,
tu można w dowolnym momencie coś napisać prozą.
Kliknijcie prawym klawiszem
na opis techniczny aplikacji.
Prawy klawisz.
Na tytule, bo w tej chwili macie edycję tego diagramu.
Tytuł.
I macie tam, wstaw tekst.
I piszemy.
Dokument opisuje bardzo fajny program dla biblioteki.
To jest pełnowartościowy edytor RDV.
Jak widzicie, macie czcionki,
możliwe do porównania,
możecie wielkość czcionki robić,
zmieniać czcionkę i tak dalej.
No tego tekstu może być więcej, tak?
I kropka, i klikamy gdzieś z boku,
i po krzyku.
Jeżeli chcemy tutaj użyć nazwy
tej biblioteki, to klikamy ten tekst edytowany,
klikamy to jeszcze raz,
żeby się otworzył do edycji.
I piszemy. Program nazywa się...
Dopisujemy po kropce.
Program nazywa się...
Dodaj element modelu.
Dodaj element modelu.
Otwieramy nasz opis techniczny.
Otwieramy nasz opis techniczny.
Nasza aplikacja nazywa się
Aplikacja wspomagająca pracę.
Odklikujemy to.
Ptaszka musisz postawić tam.
I naciskam OK.
I już.
I teraz gdybyście
na tym diagramie
zmienili nazwę tego systemu,
to ona się zaktualizuje we wszystkich tekstach,
we wszystkich akapitach, wszędzie.
To znaczy, że jesteście w stanie tworzyć dokumentację.
I jeżeli w dokumentacji
powołujecie się na element diagramu,
na nazwę diagramu,
na nazwę diagramu,
klikamy ten tekst do edycji jeszcze raz.
Program nazywa się...
Kropka i piszemy.
Schemat opisujący funkcjonalność
Schemat opisujący funkcjonalność
pokazano
w rozdziale
w rozdziale
prawy klawisz myszy,
dodaj diagram,
dodaj diagram,
znajdujemy ten diagram przypadków użycia,
znajdujemy ten diagram przypadków użycia,
wstawiamy ptaszka,
diagram przypadków użycia,
opis techniczny aplikacji.
OK.
I już.
I z boku klikamy.
Gdybyście kiedyś w przyszłości zmienili
tytuł tego diagramu,
opis techniczny aplikacji,
na przykład klikamy prawym klawiszem,
mamy na dole
otwórz specyfikacje.
Na dole taka opcja jest.
I zmieniamy mu nazwę
na
funkcjonalności aplikacji.
funkcjonalności aplikacji.
Bo tak naprawdę
diagram przypadków użycia nie pokazuje.
Funkcjonalności aplikacji i OK.
I teraz u góry macie taki
żółty kręciołek.
U góry w menu, to jest odświeżanie.
Klikamy.
Ten żółty kręciołek klikamy,
żeby się odświeżyło.
Już? Wszystko?
Zwróćcie uwagę, że nie ma znaczenia liczba stron tej dokumentacji.
Jeżeli cokolwiek zmienicie na diagramie
i element tego diagramu
jest użyty gdziekolwiek w tekście
i będziecie go wyklikali prawym klawiszem myszy,
ta dokumentacja będzie absolutnie zawsze aktualna.
To odświeżanie jest po to,
że
ten dokument może mieć 50, 100, 200 stron.
Gdyby każde kliknięcie
wymagało odświeżania,
to jest bardzo uciążliwe.
Dlatego odświeżamy go na żądanie.
Zmienimy 3, 4, 5 diagramów,
a na końcu odświeżamy dokumentację.
Bo na bieżąco pracujemy z diagramami
i z tym dokumentem.
Ten dokument to jest taki,
że to nie jest raport z tego,
bo my tu możemy w dowolnym momencie
ten tekst wstawić w prozę.
No dobra.
Także ta dokumentacja nam będzie powoli przerastała.
Wracamy do diagramu środków użycia.
I teraz tak.
No dobra, klikamy to.
I teraz mamy tak.
Mamy te karty katalogowe książek.
Klikamy prawym klawiszem.
I teraz otwieramy
szczegóły środków użycia.
Potwórz szczegóły.
I teraz tak. To jest scenariusz.
I teraz tak.
Klikamy wymagania.
Tu możemy zbierać.
Jak wam się wydaje?
Myśmy chyba w tej grupie mówili.
Co to są wymagania?
Wymagania to są
z perspektywy użytkownikowi
jego potrzeby.
Z perspektywy systemu
są to warunki,
jakie mu się spełnia.
Teraz pytanie do was.
Nie pamiętam co mną wykładowało.
Czy czytelnik może edytować
opis zasobów?
No chyba nie.
Nie?
Nie?
Nie.
No chyba nie.
Wy też tak macie?
Czy wasz kolega tego tak ma?
Nie pamiętam.
Jeżeli tak na przykład musimy to zmienić.
Wszyscy tak mają.
No to czytelnikowi nie pozwalamy.
Wywalamy to.
A nie, przepraszam.
Czytelnik nie może.
Ja mam bardzo niewyraźnie.
Tam jest napisane, że nie może.
Tak.
No to dobrze.
Na Teamsach jest to.
Zapamiętam.
Czytelnik nie może.
Zostawiamy to.
Czytelnik nie może zmieniać karty zasobów.
Karty katalogowej.
To byłoby opisu.
Napisz opisu zasobów.
Opisu zasobów.
Docelowo
z perspektywy
projektanta
my niektóre rzeczy będziemy robili na skróty.
Formalnie byłoby tak,
wymagania to są oczekiwania
na projektu.
My musimy to zamienić,
gdyby taka potrzeba była,
na jakąś logikę dla aplikacji.
Prawdopodobnie na podstawie tego
stworzylibyśmy regułę biznesową,
z której będzie wynikało,
że ktoś czegoś nie może
albo, że tylko ktoś może.
W każdym razie to jest miejsce,
gdzie w to miejsce ludzie wpisują
albo potrzeby wyrażane w ten sposób.
Niektórzy w tym miejscu formułują to
jako user story.
User story to jest
jakieś oczekiwanie,
potrzeba użytkownika.
Zaraz zobaczymy przy wypożyczeniach,
jak się można przejechać.
Takich wymagań, jak się domyślacie,
może być więcej.
Te wymagania, one się automatycznie potem katalogują
przy, zobaczycie później,
przy tej specyfikacji, którą wygenerowaliście
do PDF-a.
Klikamy teraz tak, plan testów.
Gdybyś, nie będziemy tego robili.
To jest miejsce, przypominam,
jest narzędziem dla tego
analityka, projektanta.
On nie jest kierownikiem projektu.
Moglibyśmy go raczej product ownerem nazwać,
jeżeli już ktoś tej agile'owej
używa nomenklatury.
W każdym razie mamy dwa rodzaje testów.
Tak przy okazji.
Jakie mamy testy?
Jakie mamy rodzaje testów?
Co to jest według was środowisko testowe?
Załóżmy, że macie edytor tekstu.
Wymyślamy nowego Worda.
Co jest środowiskiem testowym?
Co jest środowiskiem testowym?
To byłaby wstępna jakby
aplikacja, tak?
Którą jeszcze nie wliczamy na produkcję, bo to nie jest to
i rozbudujemy ją z tego momentu, tak?
Aplikacja to jest to, co my projektujemy.
Środowisko to jest decyzja.
To będzie aplikacja dla Windowsów.
Czyli środowisko to jest ten full stack,
co by to miało znaczyć.
Word, żeby zadziałał,
potrzebuje komputera z systemem operacyjnym,
nie wiem, Windows 10.
Będziemy mówili o wzorcach projektowych jeszcze.
Bezwzględnie rozdzielamy kod aplikacji
od kodu środowiska.
Implementowanie funkcjonalności
na żywca w środowisku
jest bardzo, bardzo
złą praktyką.
Funkcjonalności Worda
nie są funkcjonalnościami
systemu operacyjnego Windows.
Środowisko to jest to coś,
ta platforma,
na której ta aplikacja będzie działała.
Komputer z Windowsem,
komputer z jakimś tam,
nie wiem, Apache'em,
to może być cokolwiek,
będzie jakieś środowisko,
serwer, system operacyjny,
być może jakiś framework,
biblioteki.
Czyli tu byśmy napisali,
że żeby ta aplikacja działała,
to my musimy mieć jakiś komputer
z Windowsem, czy tam z Mac OS-em,
obojętnie.
Na przykład Visual, żeby zadziałał,
potrzebuje albo Windowsa,
albo Mac OS-a, albo Linuxa.
Nie pamiętam dokładnie, którą wersję ma znaczenie.
Środowisko testowe
to jest, napiszcie, system operacyjny
i platforma. Może nie tak, ogólnie.
System operacyjny
i platforma sprzętowo-systemowa.
Co by to miało oznaczać?
Tam, gdzie jest procedura testowa,
to tu już nie będziemy tego pisali.
Tutaj wam tylko przykład.
Żeby przetestować tę aplikację,
no to tutaj się umawiamy,
to już jest kwestia umawiania się,
że ktoś musi postawić środowisko produkcyjne,
udostępnić, przepraszam,
czy tam testowe,
że pracownik musi usiąść,
że on musi kumać swoją rolę.
Ta procedura to jest coś, co my piszemy.
Zorganizuj 8 dni,
poszuka komputer,
pozakładaj ludziom konta,
posadź je, każ im wypożyczyć książkę,
coś tam, coś tam, coś tam, coś tam.
Nie będziemy teraz tego pisali.
W każdym razie w projekcie musi być napisane,
jak my stwierdzimy,
że aplikacja spełnia nasze wymagania.
I teraz scenariusz,
klikamy jeszcze raz scenariusz,
to jest coś, co byśmy na przykład nazwali
User Acceptance Testing.
To jest scenariusz, czyli to.
Już tego nie musimy nigdzie przepisywać.
Tu jest napisane,
że my takie coś będziemy chcieli zrobić.
Jak to zadziała,
to zapłacimy za tą aplikację.
Jak to nie zadziała, to nie zapłacimy.
Natomiast plan testów to jest taka,
to jest ogólniejsze.
Plan testów to jest stwierdzenie,
że żeby te testy się w ogóle odbyły,
to my musimy mieć ten konkretny system operacyjny,
coś tam, coś tam, coś tam.
W tym miejscu wpisujemy raczej wymagania
poza funkcjonalne.
Że platforma, że system operacyjny,
że aplikacja nie mniejsza niż,
że przeglądarka taka czy inna
i tak dalej, i tak dalej, i tak dalej.
Tu wypisujemy to, co z reguły klasyfikujemy
jako wymagania poza funkcjonalne.
Pamiętamy, że środowisko
jest wymaganiem poza funkcjonalnym.
Pytanie kontrolne.
Czym jest logowanie?
Najpierw mamy
tego, autentykację,
później mamy autoryzację.
Tak?
Czym się różni autentykacja od autoryzacji?
Jedno sprawdza,
czy w ogóle istniejemy,
w sensie, czy...
No autentykuje nas,
podajemy swoje...
Nie wiem, jak mam wyjaśnić,
czy prosto, czy nie.
Jak na prosto, to autentykacja
to najpierw podajemy login i hasło,
a autoryzacja to już,
czy my mamy tam dostęp
do tego konkretnego miejsca.
Okej, to znaczy, że tak...
Autentykacja oznacza,
że...
uwierzyliśmy,
że naprawdę Kowalski siedzi przy komputerze.
Tak.
Autoryzacja oznacza,
że Kowalskiemu coś można tam zrobić.
Powolno mu tam zrobić.
Czyli na przykład autoryzacją będzie to,
że pracownik biblioteki
przede wszystkim pierwszy etap
tak
w porządku to nasz kolega powiedział.
My musimy umówić się,
że fakt
podania loginu i hasła
oznacza, że naprawdę ten Kowalski
siedzi przy komputerze.
To jest umowa, tak?
Bo mógł komuś dać login i hasło.
O tym za chwilę.
A potem jest napisane, że z perspektywy...
Natomiast my mówimy tak,
nasza aplikacja biblioteczna to
pracownik biblioteki
ma
autoryzację,
czyli jemu wolno dodawać nowe książki.
A czytelnikowi nie wolno.
Autoryzacja
to jest pozwolenie
na wykonanie jakiejś pracy.
Tylko teraz bardzo ważna rzecz.
Do czego się logujemy?
A gdzie kontrolujemy
uprawnienia użytkownika?
W sensie autoryzacji.
Gdzie się odbywa autentykacja,
a gdzie się odbywa autoryzacja?
Siadacie do komputera.
Zadam to pytanie.
Zadam to pytanie inaczej.
Logujesz się do Windowsów
czy do Worda?
Do Windowsów.
Platforma
odpowiada za autentykację.
Aplikacja
odpowiada za autoryzację.
Nie wolno tego mieszać.
To znaczy, że
aplikacja, biblioteka
nie ma przypadku
logowania się, bo logowanie się
jest funkcjonalnością platformy,
a nie aplikacji.
Jeden z kolejnych błędów.
Jeżeli chcielibyśmy
zrobić coś takiego.
Wyobraźmy taką regułę.
Tylko autor
może modyfikować treść dokumentu.
Pracujecie nad Wordem.
Jak sobie z tym poradzić?
Macie wymagania użytkownika.
Tylko autor dokumentu
może w nim grzebać. Reszta może czytać.
Jak to zrobić?
W sensie jak to zrobić
w Windowsie fizycznie?
Jesteście projektantami aplikacji.
Załóżmy, że siedzimy nad edytorem tekstu.
Jest wymaganie proste.
Tylko autor może edytować tekst.
Ktokolwiek inny, bo wszyscy sobie tego Worda
czy edytę tekstu uruchomili.
I jest reguła.
Sprawdzamy, czy zalogowany
użytkownik równe się
z pliku informacja kto utworzył.
Jeżeli edytor tekstu
przechowuje metadane
tego dokumentu,
czyli każdy dokument ma taki atrybut
jak autor, co by to nie miało znaczyć
w tej chwili,
to znaczy, że
kto kontroluje?
Gdzie ta reguła będzie zaimplementowana?
W Windowsie czy w Wordzie?
W edytorze.
A skąd edytor wie, kto jest zalogowany?
Z platformy podaje, kto jest zalogowany.
Tak, bo platforma to jest API.
Czyli jeżeli się do Windowsów zalogujecie
i macie w Windowsach
jakieś tam konto.
Login bujaczek24
imię i nazwisko Jarosław Żeliński.
Zalogował się.
Podał jakieś hasło,
odciskiem palców spaszczy go tam kamera.
Temat na inne.
Dokonana została autentykacja.
Umawiamy się, że
według środowiska komputera
przyjdziemy
do tego, że
nie łączy przed komputerem sieć Żeliński.
A w Wordzie
jest aplikacja użytkowa Word.
Tam jest zaimplementowana taka reguła.
Na sztywno.
Skoro dokument ma taki atrybut
jak autor.
A ja jako Word mogę pogadać
z Windowsami, bo Windowsy mają API.
To znaczy, że Word mówi tak.
Ty Windows, kto jest zalogowany?
Jarosław Żeliński.
A mój dokument w polu autor ma napisane
Jarosław Żeliński.
Aha, to Żelińskiemu wolno grzebać w tym tekście.
Czyli będą działały opcje edycyjne.
Mogę tam sobie porobić.
A jeżeli jest napisane,
że zalogowany jest Jarosław Żeliński,
a ja otworzyłem dokument,
tam jest napisany autor Jan Nowak,
to znaczy, że ja sobie mogę poczytać,
poprzewijać i nie mogę go edytować.
I pokrzykuć, nie?
Bardzo ważna rzecz.
Musimy,
należy
separować wiedzę
i rozumienie.
Środowisko nie powinno
nigdy obsługiwać,
realizować, nie implementujemy
w środowisku wymagań
tej logiki dziedzinowej.
W przypadku edytorów tekstu
dziedzinową logiką jest
redakcja tego testu.
Tego tekstu, przepraszam.
W przypadku biblioteki
właśnie mamy tak, że my zakładamy,
że wiemy, kto pracuje,
bo logujemy się nie do biblioteki,
tylko logujemy się do Windowsa,
do Apacza, tam nie wiem, do czegoś jeszcze.
My możemy mieć
po stronie biblioteki logikę,
bo środowisko zna login.
Login może być moim imieniem i nazwiskiem,
a może być na przykład
głupi tekst Buziaczek24.
Moja koleżanka do dzisiaj tak się loguje u siebie w pracy.
I ona się na przykład nazywa
Janina Kowalska.
To znaczy, że moja aplikacja biblioteka
będzie miała gdzieś
rejestr pracowników i tam będzie
napisane imię,
nazwisko, login.
I logika jest taka.
Ta aplikacja pyta się
Ty, serwer www,
kto jest zalogowany?
Buziaczek24.
A on patrzy, aha, login Buziaczek24
Janina Kowalska.
W związku z tym na ekranie pojawia się napis
Janina Kowalska zalogowana.
I tak dalej, i tak dalej.
Przełączamy się na diagram przypadków użycia.
Zadanie.
Karty czytelników
zakładamy.
A skąd my wiemy kto jest pracownikiem biblioteki
i jak się ma zalogować?
No a co teraz?
Kto zakłada?
Chcemy zrobić porządny system.
Skąd się tam będą brały
konta pracowników?
Zakłada nam ktoś,
kto może zakładać
pracowników, no.
Czyli już projektujesz świętą krowę
superwizora, tak?
Nie do końca superwizor.
Ale ktoś musi go
jednak potwierdzić,
że to jest nowy pracownik.
Kto to będzie?
Nie może to być inny pracownik.
Kto będzie
nadawał, kto będzie stwierdzał,
że Kowalski jest pracownikiem biblioteki?
Nie jakiś pracownik,
ale z uprawnieniami wyższymi.
HR?
Nie może to być.
HR, no.
Okej, HR, dobra.
I co?
Tego HR-a mamy wstawić tutaj?
Administratora jakiegoś.
Nie wolno.
Powiedziałem to na początku.
Dobra aplikacja,
nie ma żadnych świętych krów
typu superwizor, administrator.
Nie ma. Nasza aplikacja będzie fajną, bezpieczną,
bezpieczną aplikacją.
Żaden haker się nie włamie prawie.
Ale ktoś musi nadać wyższe
uprawnienia pracownikowi.
Ktoś musi stworzyć pracownika.
Dobra, kto to będzie?
Nie może to być inny pracownik biblioteki.
Musi to być jakiś HR.
A pracownik HR to co?
Biblioteka nie ma działu HR?
No to może być HR.
No to zdecydujcie się w końcu.
To HR.
No dobra, okej.
W tym razie jeszcze...
Powoli, powoli, powoli.
Ale przecież ma napisane,
że ta aplikacja nie jest oprogramowaniem
dla działu kadr.
No nie jest.
Nie jest.
Kombinujcie dalej.
Nie usuwaj tego, nie usuwaj.
A widzisz.
Nadgorliwość gorsza od faszyzmu,
jak to mówią.
Trzeba było nacisnąć ctrl z,
to by wycofało to usunięcie.
Nie działało.
Pierwsza rzecz.
Pytamy,
jako analitycy projektanci,
skąd się biorą pracownicy?
No Panie, my tu mamy na drugim piętrze dział HR.
A systemu autentykującego?
Niekoniecznie.
Mamy,
załóżmy, że bibliotece,
mamy inne aplikacje,
HR, tam nie wiem co jeszcze.
Mamy,
zmień tu nazwę na system HR,
co by to nie miało znaczyć,
ten aktor, system HR.
Czyli wiemy, że w tej firmie,
w tej organizacji,
jest dział HR i on ma swój system.
I tam siedzi sobie pani,
to jest inny projekt,
tam siedzi sobie pani, pan
i tam jest takiego,
nowy pracownik i tam jest napisane
imię, nazwisko, coś jeszcze.
I teraz, czyli w tym systemie HR,
jest imię, nazwisko,
jak jest dobrze wymyślony,
to ten system HR ma napisane,
że e-mail jest,
umawiamy się,
robimy fajny system,
że już nie robimy tak jak w starych było,
że tam jakiś loginy,
muziaczek24,
tylko jest polityka w firmie.
Każde ma imię.
imię.nazwisko.małpa.fajnabiblioteka.pl
Adresy mailowe mają to,
że są unikalne na całej tej planecie.
W kosmosie.
Jakieś id małpa.email.pl
Później mamy problemy
ze zmianą nazwisk,
zmianą imion ewentualnie.
W firmie,
pani jak chce wyjść za pana
i pan chce zmienić nazwisko,
bo jesteśmy nowocześni,
to później pan ma swoje stare nazwisko
w mailu zamiast nowego.
Jest login małpa, jakiś login.
Może być to numer specjalistyczny,
co coś małpa.
E-mail, a imię i nazwisko gdzie indziej,
a alias wtedy jako e-mail.
Alternatywne wyjście jest takie.
Starajcie się najpierw zrozumieć,
jakim cudem świat funkcjonował
bez komputerów.
Otóż problem polega na tym,
taka ciekawostka,
bardzo często jest tak,
że nie bierz tego personalnie.
Ludzie, którzy nie zrozumieli tego,
co jest w tej firmie,
wymyślają nieistniejące byty w komputerze.
Macie świadomość,
że w żadnych aplikacjach na tym świecie
nie ma żadnych loginów,
tylko są adresy mailowe.
I teraz mamy sytuację taką.
Pan, pani się wydał, wyszedł za mąż, whatever,
zmienił nazwisko.
Nazwisko możemy zmienić nawet bez ślubu.
Pójdziemy do urzędu.
Ja pamiętam, jak byłem w podstawówce,
pani dyrektor szkoły nazywała się,
nie pamiętam imienia, Janina Kiełbasa.
Strasznie jej się to podobało.
Zmieniła sobie nazwisko.
Urząd się zgodził, napisała, że to nazwisko
to jest możliwe.
No to zmieniamy jej tego maila.
My możemy mieć.
I teraz są dwa wejścia.
To jest bardzo ważne.
Ta kobieta
pracuje w tej szkole,
wtedy pracowała kilkanaście lat.
Ona podpisała masę dokumentów
swoim starym nazwiskiem.
Janina Kiełbasa.
Zmieniła sobie nazwisko, nie pamiętam jakie,
bo to było dawno, nieważne.
Na przykład na Kowalska.
I co teraz?
Jak świat
ma sobie z tym poradzić?
Jedna uwaga bardzo dla was, bardzo ważna.
Kolejna cecha
złych aplikacji.
Złe aplikacje, źle zaprojektowane programowanie
pozwala na fałszowanie historii.
To jest absolutnie bezsensowna rzecz
w oprogramowaniu.
Przecież dowolny dokument na komputerze
zrobiony, potencjalnie może być
wydrukowany i podpisany odręcznie.
To, że sobie jakiś koder
zmienił coś, wcale nie znaczy,
że on wymienił 4000 dokumentów papierowych
w szufladach urzędów i mieszkania.
To bożne życzenie.
Człowiek, który projektuje oprogramowanie
musi pamiętać, że poza komputerem
istnieje świat rzeczywisty.
Dokumenty
w segregatorach są nieedytowalne.
W szufladach
dokumenty są nieedytowalne.
Świat to nie jest komputer.
Programowanie musi to rozumieć.
Niczego nie edytujemy wstecz.
Nawet głupiej faktury nie wolno edytować.
Trzeba wystawić fakturę korygującą.
Ja mam świadomość, że wiele systemów
oprogramowania pozwala na edycję.
Wchodzi sobie nawet pracownik z uprawnieniami
i on tą fakturę sprzed roku przeedytował.
Za to można pójść siedzieć.
U mnie taka funkcjonalność
nie tylko u mnie jest absolutnie niedopuszczalna.
Jak ktoś wystawił fakturę,
wydrukował, podpisał, koniec.
Do końca świata. Nie wolno tego edytować.
Nie wolno.
To znaczy, że wy macie teraz problem.
Co z tym pracownikiem zrobić?
Bo on zmienił nazwisko.
Bo się tam ożenił, wydał, zmienił.
Bo mu było wstyd.
Powszechnie wiadomo,
że adresy mailowe są w użyciu.
Od pewnego czasu, od długiego
są identyfikatorem.
Ale tak jak nazwisko mogą się zmieniać.
Z perspektywy
każdy z nas
funkcjonuje w swojej organizacji
i ma tam identyfikator.
W życiu prywatnym.
Dlatego wielu ludzi ma adres prywatny,
adres służbowy. Ma telefon prywatny,
telefon służbowy. Niektórzy mają jeden,
niektórzy dwa. To już jest kwestia
powiedzmy zwyczajów.
Człowiek projektujący programowanie
musi przede wszystkim zrozumieć,
jak świat funkcjonuje.
Bo to, że on w komputerze zrobi po swojemu,
niczego nie zmienia.
Świat był, jest i będzie taki, jaki jest.
Jak to mówiłem rok temu
i znowu przywołałem
ten przykład
z symulatorem.
No to mi wstaje student i mówi
to ja panu coś pokażę.
Nie pamiętam adresu.
Są gry, nawet w internecie,
gdzie nie ma praw fizyki.
I on mi pokazał grę.
Symulator wyścigów samochodowych,
gdzie kierowca jadąc samochodem
może skręcić pod kątem prostym
mając 200 na liczniku.
Są takie gry komputerowe.
Jest fun, jak to mówią.
Nie jest to symulator jazdy samochodem,
nie oszukujmy się.
Natomiast pamiętajcie, że aplikacje biznesowe
one nie są symulatorem,
ale one nie mogą łamać praw obowiązujących
poza komputerem.
Reguły biznesowe w komputerze
nie mogą być inne niż poza komputerem.
Bo ta aplikacja będzie absolutnym bezsensem.
I teraz
jak ktoś sobie zmieni nazwisko
to my musimy wiedzieć
gdyby to było na papierze
to robimy prostą rzecz.
Co pani jest? Ja jestem Kowalska.
Jest testament od babci,
a na testamencie jest napisane
Kiełbasa. Nie damy pani tego domku jednorodzinnego.
A ona mówi
chwala, chwala, moment, moment
ja mam taki dokument z urzędu
pięć lat temu nazywałem się Kowalska
a potem Kiełbasa, teraz Kowalska.
I mam
albo mam ten dokument
ewentualnie mam PESEL.
Okej.
Przekonała mnie pani.
To jest pani dom.
Testament jest na Kiełbasa
pani jest Kowalska, to jest pani domek.
To znaczy, że nie robimy sztucznych loginów
tylko robimy to
co mają firmy
w lepiej zaprojektowanym oprogramowaniu.
Sprawdzamy na świecie
co jest
niezmienialną cechą człowieka.
W Polsce jest to PESEL.
Nie używamy go nigdy do logowania
do niczego, ale mamy wewnętrzny
identyfikator identyczny
jak w urzędzie stanu cywilnego czy w skarbowym.
Gdyby to była firma
to będzie NIP lub REGON.
Możemy go do niczego nie używać
ale wiemy, że świat tego używa
i nasza wewnętrzna logika
może tego używać.
To jest dobry pomysł.
W związku z tym w dziale HR
możemy sobie wyobrazić formularz
w którym jest imię, nazwisko
potencjalnie edytowalne
że jest e-mail
i umowa jest taka
jeżeli ktoś miał jakiś adres mailowy
i my mu nadajemy drugi
to pamiętamy o tym starym
formularzu, że ta pani się nazywała
Kowalska do wczoraj
od jutra się nazywa Nowakowa, bo się wydała.
Jeżeli chcemy być fajni to zmienimy
adres mailowy. To nie zmienia faktu
że w naszym systemie niezmienialny
będzie numer PESEL.
Jeżeli mówimy, że loginem jest adres mailowy
bo to jest dla odmiany łatwe
i można podawać ludziom
to teraz tak
klikamy naszą aplikację
wspomagającą pracę improtekarza
i ten łącznik
dociągamy do systemu HR
u góry macie po prawej stronie
łącznik
przy prawym górnym rogu
drag and drop na HR
i wybieramy taką samą strzałkę jak do ISBN
to jest informacja
że nasz system
to jest związek
w WML to jest zależność
nasz system
zależność w WML oznacza
że ktoś z kogoś korzysta
dawniej mówiło się Master Slave
ostatnio jest niemodne
mówimy często Client Server
natomiast
grot wskazuje na źródło uzależnienia
formalnie z perspektywy aplikacji
każda para
nie istnieją w WMLu i w inżynierii
idealnie symetryczne połączenia
ktoś musi być ważniejszy
ktoś inicjuje dialog
nie ma czegoś takiego jak lustrzana symetryczność
każdy dialog
zwróćcie uwagę, że każdy dialog
scenariusz przypadków życia
zaczyna się od nazwy aktora
bo pracę z komputerem inicjuje człowiek
a nie odwrotnie
nie ma czegoś takiego
że człowiek i komputer jest równoprawny
bo ktoś musi zacząć rozmowę
co do zasady jest to użytkownik
dlatego pomiędzy aktorem
który używa tej aplikacji
jest ciągła krecha
ale jeżeli nasza aplikacja
korzysta z usług innej aplikacji
to my piszemy, że my
nasza aplikacja jest uzależniona
od wyszukiwacza ISBN
to przy okazji tych nowych zasobów
nasza aplikacja jest uzależniona
dlaczego?
bo tam są zakładane konta użytkowników
a nie w naszej aplikacji
to znaczy, że jak będziemy na kolejnych zajęciach
rysowali schemat blokowy
opisujący na przykład
dowolny scenariusz
gdzie jest pracownik biblioteki
to ten scenariusz
to z perspektywy czarnej skrzynki jest tak
przypominam, że logujemy się do środowiska
czyli mamy środowisko
w zasadzie gdybyśmy chcieli to zmienić
znaczy może tak
standardowo na schematach blokowych
nie pokazujemy środowiska
zakładamy milcząco, że jest
to tak samo jak my ludzie
my możemy napisać, że tu jest student
tu jest wykładowca
wykładowca coś może, student coś może
ale nie piszemy, że pomiędzy mną
a wami jest
moje struny głosowe
powietrze, sprężystość powietrza
mikrofon w komputerze
ten mikrofon zamienia
on ma przetwornik analogowy
analogowo-cyfrowy
to jest środowisko
wy tego nawet nie musicie wiedzieć
z perspektywy was i mnie
używamy Teamsów
i coś tu się wyprawia na ekranie
ale nikt przy zdrowych zmysłach
na co dzień nie myśli o tym, że
powietrze, że drga, że mikrofony
że przetworniki analogowo-cyfrowe
że dyski twarde, że magnetyczne
to jest środowisko
które my wiemy, że istnieje
nawet nie musimy rozumieć w detalach
jak funkcjonuje
jako środowisko
czyli jak się
nie sądzę, żeby ktokolwiek z was
dzwoniąc do kolegi, koleżanki przez telefon
miał w głowie to, że
oha, będę rozmawiał z kolegą
w związku z tym, moja paszcza
powietrze, sprężystość powietrza
fale głosowe, mikrofon w komputerze
w telefonie, no nikt o tym nie myśli
tylko mówimy tak, ty weź telefon
i zadzwoń do mnie
a nikt nie mówi
weź telefon i użyj
powietrza jako środowiska
prostego przenoszącego fale
no nikt tak nie mówi
czyli my teraz zakładamy tutaj
że istnieje środowisko
nie chcemy go rysować
i po prostu umawiamy się
że loginy bierzemy z systemu HR
co by to nie miało znaczyć
a tak naprawdę
to system HR funkcjonuje
w jakimś środowisku
do którego też trzeba się zalogować
to środowisko w jakiś magiczny sposób
coś tam przenosi
do tej terapii
gdybyśmy tu chcieli
dorysowywać wszystkie elementy środowiska
to to byłoby mega skomplikowane diagramy
kompletnie nikomu do niczego niepotrzebne
my musimy się skupić
na tym
na logice działania systemu
czyli my jak będziemy
załóżmy za niedługo będziecie pisali jakąś pracę dyplomową
to będziecie
z promotorem rozmawiali
o rozdziałach
o bibliografii
być może o wyrównaniu prawego marginesu
będziecie rozmawiali z promotorem
gdzie na dysku twardym
są te domeny magnetyczne
które zapamiętały waszą pracę
dyplomową
po prostu gdzieś się to zachowało
nie chcemy wiedzieć jak to działa
mamy pamięć stałą
jest napisane
C dwukropek fajne kwity
praca dyplomowa moja
nie musimy wiedzieć jak to się dzieje
projektując oprogramowanie na tym poziomie
robimy identycznie
czyli my piszemy że nasza aplikacja będzie
ma dostęp do systemu HR
to znaczy że
my wiemy
kto jest pracownikiem biblioteki
bo pierwszy poziom to jest taki
w momencie kiedy ktoś zobaczy login
to jest moment kiedy
jeszcze pracujecie z platformą
podajemy login hasło nie wiem
odcisk palca tam z kamery obojętnie
jest taki moment
że to środowisko wie
kto to jest
dokonała się autentykacja
my wiemy że to jest Jan Kowalski
co on za jeden
HR mówi że dyrektor
biblioteki
okej
wszystko jasne
środowisko wie że to jest
homo sapiens Jan Kowalski
a HR nam mówi
pełni fuchę dyrektora generalnego
okej
a my w naszej logice biznesowej mamy
dyrektor generalnej biblioteki
może dodawać nowe książki
okej i wchodzi wszystko jasne
zwróćcie uwagę
że gdyby na karcie wypożyczenia
była załóżmy
będziemy o tym mówili później
na karcie wypożyczenia ma być data
skąd ta data się weźmie
no ze środowiska
bo nasza aplikacja
my nie musimy jako projektanci
a potem koderzy
zaprojektować w aplikacji biblioteka
mniej czy bardziej skomplikowanego
systemu zegara
ten zegar jest w systemie
i my mówimy ty aplikacja
zapukaj tam do tych windowsów
to on ci powie jaka jest data i godzina
no i już tak
system operacyjny
platforma pełni dosyć dużo różnych funkcji
ale one nie są
logiką biznesową
system operacyjny mówi która godzina
jaka data kto jest zalogowany
no kupę rzeczy robi tam jest 15
sterowników dysków monitora
przecież programista
który chciałby na ekranie napisać hello world
on nie musi po tych pikselach
jechać tylko on ma takie api
tam jest napisane wyślij mi tutaj ciąg ascii
nie na przykład jasona
wyświetl na ekranie
i się wyświetliło żaden przeciętny
programista nie myśli o tych
pikselach rgb
i tak dalej
nawet nie wie że jest klawiatura po prostu
wchodzą mu znaki ascii to też jest jason
albo jakiś tam inny wynalazek obojętnie
nie ma to znaczenia
i teraz bo zaraz skończymy
ostatnie 5 minut dzisiaj
to wygląda
z perspektywy zresztą
mówiliśmy chyba na pierwszych zajęciach w tej grupie
o architekturze heksagonalnej
czy to nie ta grupa
no trzy
ja wam pokażę
bo my zaraz kończymy
zachowujemy tą aplikację
znaczy się ten plik przepraszam
ja wam teraz na chwilę pokażę swój ekran
na chwilę pokażę swój ekran
architektura
i zrobimy literówki
to jest jeden z popularniejszych obrazków
ładnie opisane
otóż
wszystkie aplikacje biznesowe
i nie tylko
to wygląda mniej więcej tak
że jest jakieś środowisko
które
jest w stanie
zbudować
takie aplikacje
które
są
w stanie
jest
ta dziedzinowa domenowa
logika biznesowa jak zwał tak zwał
to znaczy że my
na przykład projektując bibliotekę
zakładamy że to całe środowisko
istnieje ktoś nam przynosi
na tacy ten full stack
i do niego się można zalogować
i tam są dyski twarde
jakieś bazy danych
jakieś bramki do nie wiem do smsów
do serwera pocztowego
jakieś tam do komunikacji
ssl internety
tam jest wszystko tak
elementem tego środowiska
jest również przeglądarka
który używa użytkownik
żeby
żeby łatwiej było
przeciwnemu architektowi rozumieć
z czym walczy
to mówimy o tym że mamy model view controller
kolejny wzorec architektoniczny
znany od nie wiem
50 lat
i jest jeszcze oczywiście
jak się nie domyślacie masa herezji
otóż architektura heksagonalna
to jest założenie
bardzo proste
aplikacja
czyli ta logika biznesowa dziedzinowa
funkcjonuje w środowisku
i my musimy kod aplikacji
perfekcyjnie separować
od kodu środowiska
komunikacja jest
przez tak zwane
adaptery porty interfejsy api
co by to nie miało znaczyć
Coborn jak pisał swoją książkę
to nazwał to architektura heksagonalna
po prostu sobie wymyślił
taki kanciaty
natomiast w tej chwili on sam
bo mam go w kontaktach na linkinie
on od iluś lat
używa pojęcia wzorzec projektowy
czy architektura porty i adaptery
bo to jest nasza aplikacja
a to są te porty i adaptery
to znaczy że wyobraźcie sobie
że teraz w tym środowisku
takich aplikacji jest kilka
jedną z nich jest nasza biblioteka
a gdzieś tu z boku będzie druga HR się nazywa
to znaczy że my
jeżeli się chcemy zintegrować
tutaj zagwarantować
port adapter do HR
to znaczy że HR
musi nam wystawić taką usługę
ta usługa przez jakieś zakamarki
systemu operacyjnego
być może fafnaście zintegrowanych serwerów
szyna integracyjna nas to kompletnie interesuje
my wiemy
że z perspektywy logiki
w naszej bibliotece będzie
port adapter który się będzie nazywał HR
i umawiamy się
że jest taka integracja
takie api
i to działa tak
my się mówimy tak
ty środowisko kto jest zalogowany
taka procedurka
tu jeden z portów będzie portem do systemu operacyjnego
a drugi port to będzie port do HR
i scenariusz jest taki
kto jest zalogowany
buziaczek24
albo
janina.kowalska
małpka fajna biblioteka
nie ma to znaczenia
jest jakiś identyfikator
teraz my jak już wiemy kto jest zalogowany jaki identyfikator
bo system operacyjny
tak naprawdę autentykacja
poprzez jakiś identyfikator
odcisk palca login obojętnie
i mówimy ty HR
kto to jest buziaczek24
Janina Kowalska
w związku z tym po naszej stronie
jest wiedza
że osoba która klika po ekranie
to jest Janina Kowalska
system operacyjny ją autentykował
a HR nam podał
prawdziwe imię i nazwisko
to znaczy
że jak będziemy
identycznie będzie z datą
ty co my tam mamy w tej chwili
no 10 listopad super
czyli tu będzie jakiś użytkownik
on właśnie odpalił kartę wypożyczenia
na tej karcie między innymi
jest pole data wypożyczenia
i nie wprowadza tego
aktor tylko
czyli jak ktoś będzie generował
kartę wypożyczenia
zanim się na ekranie pojawi
to będzie tak weź
kartę wypożyczenia
zapytaj system operacyjny
jaka jest data
i od razu wpisz pole data
dzisiejszą datę
zapytaj HR kto to jest zalogowany
Janina Kowalska
wpisz w polu wypożyczył
Janina Kowalska
i jak już to zrobisz
to pokaż tą formatkę na ekranie
i ktoś tam na ekranie wpisze
brakujące rzeczy
na przykład dane książki
tak to działa
i możemy sobie popytać
możemy to na diagramie
przodków narysować
systemów operacyjnych nie rysujemy
ale rysujemy integrację
to znaczy że milcząco zakładamy
że my wiemy skąd się bierze
ta i ta godzina
ale musimy narysować
skąd my wiemy że buziaczek 24
to jest Janina Kowalska
zwróć uwagę na taką rzecz
jeżeli w ramach środowiska
tych Windowsów Apache
takie jednorazowe logowanie
do całego systemu
to my to środowisko
odpinamy do HR
to znaczy że nie ma w dobrym aplikacji
nie będzie tego superwizora administratora
tylko jeżeli mamy uprawnioną
panią dyrektor
w HR
do tego że ona może nowego pracownika
przyjąć do pracy
czyli de facto jego formularz
to integrujemy nasze tam Active Directory
czy inne cudo z systemem HR
że naciśnie OK
to ten system
wykona prostą procedurę
bez udziału człowieka
załóż w systemie konto w środowisku
dla człowieka
który się nazywa Jan Kowalski
ma e-mail jan.kowalski
małpka fajna biblioteka
i że on od dzisiaj pracuje
nie ma żadnego administratora
konto zostało założone automatycznie
jak Kowalski przyśle nam L4
a wiemy że zgodnie z prawem
nie wolno mu pracować
jak się jest na zwolnieniu
to jak pani kadrowa ma specjalny formularz
plika Kowalskiego
i tam będzie zarejestruj L4
tam jest napisane
Kowalski od 10 do 15 listopada
jest na L4
zgodnie z prawem nie wolno mu pracować
w związku z tym nasze środowisko
jest informowane
że konto Kowalskiego jest blokowane na 5 dni
i od momentu kiedy pani w kadrach
nacisnęła OK
nie może pracować
tak działa dobrze zaprojektowany system
jakieś pytania na dzisiaj?
nie
no to
nie wiem jak wy
miłej niedzieli
i do zobaczenia
na następnych zajęciach
do zobaczenia
do zobaczenia
------------------------------------przygotowani do pracy
dzisiaj
tak, gotowi
jakaś cisza niezręczna
no dobra
no to Maciej Tomaszewski się odezwał
wszystkich witam jeszcze raz
poproszę ekran
dobrze, to chwileczkę
reszta też już tam w gotowości
jeszcze dokończyłem
palić już
mamy radę, nie musimy się aż tak spieszyć
zobaczę co tutaj w kalendarzu
cio, cio, cio, cio, cio
dobrze
jeszcze z flantem
nie mam
nie mam
co się tu robiło
mam
pytanie pomocnicze
taka krótka dyskusja
na chwilę się podpytamy
bo
sytuacja jest taka
rynek jest taki jaki jest
nie rozpieszcza nas
i wyobraźmy sobie taką sytuację
my w zasadzie bawimy się
robimy poważne rzeczy
dokumentujemy coś
i to jest to, co się dzieje
i teraz wyobraźcie sobie taką sytuację
w której
to było jakieś chyba w tamtym tygodniu
jest sobie firma w Polsce
duża
takie zmiany kapitałowe
nie chcę się tam w detale wgłębiać
i słuchajcie
do kilku ludzi, między innymi do mnie
trafia pytanie
teraz sobie wyobraźcie
trafia pytanie
brzmiące
chcielibyśmy wycenić oprogramowanie
i dowiedzieć się czego konkretnie służy
no dobra
to co to jest
no to to jest słuchajcie
ta firma to robiła
takim własnym sumptem to oprogramowanie
i tak dalej
to dosyć powszechne
szczególnie teraz kiedy
zaczynają się jakieś takie ruchy między spółkami
i teraz
wyobraźmy sobie taką sytuację
o ile już w tej grupie nie mówię
ale chyba nie o tym mówiłem kilka tygodni temu
dostaję maila
że mamy software
autorski
milion dwieście linii kodu w Javie
i około tysiąca zrzutów ekranowych
co byście
i nie ma żadnych dokumentów
i to jest jedyne co mają
nie mają nic więcej tak
mają tylko i wyłącznie kod źródłowy
milion dwieście linii
i tysiąc dwieście
tam tysiąc z kawałkiem przepraszam
zrzutów ekranowych
jak się wydaje
jaką to ma wartość na rynku
to oprogramowanie działa
macie pomysł
jaką to oprogramowanie ma na rynku wartość
aktualną
jaką
aktualną
w sensie jakby
na pewno się nic nie może zwiększać
żadną
zależy jakie to w sumie oprogramowanie
to nie ma żadnej wartości
wyobraźcie sobie
że sami zrobiliście samochód
od zera
wydolicie dwadzieścia lat
tą śrubeczkę
tam kółeczko
tam jakiś bajerek
tam jakiś dawal
i macie wy tak
każdy z was
taki samochód ma swój
sam go zrobił
nie dwadzieścia lat to trwało
i on jeździ nie
jak coś tam się
to wy tam sobie podłubiecie w weekendy
i tam
popołudniami i tak dalej
on generalnie
nie ma żadnego
i tak dalej
on generalnie jeździ
i teraz pada pytanie
czy jesteście w stanie ten samochód komuś sprzedać
nikt tego nie kupi
nikt tego nie kupi
wiecie dlaczego
kupilibyście taki samochód
przychodzi do was koleś
taki jak ja
i mówi słuchajcie
fajna mryka
tylko
samochód
samochód
jestem
ja
kupiemy
coś
miała
samochód
no
kupiłem
allowing
z
takim
Corporate
a ja mogę jutro polecieć
na Karaiby
bo wcale nie muszę, jak już ten samochód kupicie
za jakieś pieniądze ode mnie
to ja jestem zwolniony w ogóle z obowiązków
jakichkolwiek, przecież
nie oferowałem umowy utrzymania i rozwoju
tylko mówię, bierz to
bierz i używaj
tylko w wypadku jak to
jest niezawodne
samochody się psują, ale
poprogramowanie, wiadomo
można napisać w taki sposób
żeby było niezawodne
i kupujemy tylko gotowy
produkt i nawet
widziałeś oprogramowanie, które się nigdy
nie psuje?
albo samochód, który się nigdy nie psuje?
jest jeszcze gorzej, bo
jeżeli jeszcze jest to samochód
to w zasadzie on jest dobry
do pierwszej awarii
ale teraz wyobraźcie sobie taką sytuację
że macie ten samochód
i on tam w jakimkolwiek stopniu zależy
od kodeksu
drogowego, w jakimkolwiek stopniu
ale sytuacja
jest taka, że ten kodeks drogowy
to on się zmienia dwa razy w roku
dwa razy w roku
ustawodawca wam aktualizuje
zmienia kodeks drogowy
to znaczy, że jak nie macie dokumentacji
tego samochodu
to przy pierwszej próbie zmiany
ten samochód staje się natychmiast kupą złomu
bo nie macie żadnej dokumentacji
tam jest 100 tysięcy śrubek
i kółeczek w środku
ustawodawca mówi
to teraz prosimy kierunkowskazy wszystkie na lewo
a kierownica na dachu
albo podobnie
i co zrobicie?
to będziecie metodą prób i błędów
próbowali ten samochód modyfikować?
milion kółek zębatych i śrubeczek?
ten software jest absolutnie
bezwartościowy na rynku
za 5 złotych?
to może ktoś go kupi
bo nie są to żadne pieniądze
za 15 złotych?
pewnie też
nie za więcej
taka sytuacja na rynku
my jako ludzie
jak ktoś sobie kupi
czy ktoś z was kiedyś kupował
używany samochód?
tak
i jak to wyglądało?
jak to wyglądało?
duża nieświadomość na początku
duża nieświadomość na początku
z tego ile rzeczy jest niesprawnych
no dokładnie
a teraz nakładając na to
już generalnie tam coś może być nie halo
powodów jest ogromna ilość
i teraz
jeszcze ktoś ci mówi
że
na tym świecie nie istnieje
dokumentacja ani producent
a człowiek który sam go do kupy skleił
to on właśnie na emeryturę idzie
nie wiem może umrze pojutrze
ten samochód ma na rynku
wartość hulajnogi
bo jak się zepsuje
i go będziecie musieli do kosza wyrzucić
to 5 złotych was nie zaboli
nawet 100 złotych was nie zaboli
nawet kilku tysięcy bym za to już nie dał
a jeżeli
autor tego samochodu mówi
panie to jest dorobek mojego życia
to ja bym poprosił pół miliona
no coś pan głupi?
przecież jak coś się zepsuje jutro
no to jest złom
takie są dzisiaj realia na rynku
słuchajcie
problem polega na tym
to się przewija
tutaj ze studentami
i w weekendy i w tygodniu
i jak być może się domyślacie
dla takich ludzi jak ja
jest więcej w tym kraju na tym świecie
ja od czasu do czasu
nie tak często ale kilka razy w roku
dostaję pytania o wycenę oprogramowania
i słuchajcie strasznie mi tych ludzi żal
naprawdę
bo ten system jest absolutnie
specjalny
pierwsza rzecz na rynku
nie wiem czy wiecie
to jest taka mitologia
nikt nie czyta kodu źródłowego
absolutnie nikt
wyobraźcie sobie
wiecie co to jest tak zwane code review?
spotkali się z tym pojęciem?
no i teraz wyobraźcie sobie
taką sytuację
przychodzi do was ten ktoś i mówi ok
nie ma kodu w Javie
nie macie pojęcia o niczym
o architekturze po prostu jest
ktoś wam powie ok
to ile czasu
wam zajmie
taki code review takiego kodu
to jest niemożliwe
bo my nawet nie wiemy co ten kod chciałby robić
nie mamy do czego nawet to porównać
w jakim kontekście to osadzić
dokładnie tak
to znaczy że nikt się tego nie podejmie
człowiek który ma oprogramowanie
i poza kodem źródłowym nie ma nic
po prostu nie ma nic
on sam jako autor
jest integralną częścią tego kodu
to co ma tu
20 lat pracy w terenie
i jak tego człowieka nie ma
ten kod jest wart zero
po prostu zero
i powiem wam szczerze
że jak ja wspinając się
na wyżej dyplomacji
odpisuję tym ludziom
dokładnie to o czym teraz rozmawiamy
no to z jednej strony jest mi żal
no ale z drugiej strony
mówię no sami żeście się prosili głupoty
także
tyle plotek z rynku
jeszcze ciepłe
jak wam się wydaje
bo jesteśmy po dwóch zajęciach
mamy trzecie zaraz będziemy kontynuować
kliknij w prawym górnym rogu
tą małą ikonkę z pulpitem
o to
takie krótkie
nasze review
mamy przypadki użycia
mamy diagram struktur złożonych
i na razie jesteśmy na tym etapie
że
klikamy ten formularz
przypadki użycia
a jaki był skrót do tego żeby ten się pojawił
jeszcze raz
jeżeli do tego ekranu dojść
to kolega już nie ma
w prawym górnym rogu macie taką małą ikonkę
pulpitu
znaczy tutaj na tym ekranie już nie ma
kliknij ten krzyżyk po prawej stronie
na razie nie klikaj
tu w prawym rogu u góry po prawej
jest taka mała ikonka
to jest przejście do listy
taki pulpit z listami
no dobra i teraz tak
mamy
mamy karty katalogowe książek
mamy listę życzeń
mamy wypożyczenia
mamy rejestr czytelników
zaczniemy od tego
że zrobimy sobie wypożyczenia
teraz chcielibyśmy
żebyśmy nauczyli
jednej ciekawej rzeczy
działające oprogramowanie
mające działać
to jest tak naprawdę
wyobraźcie sobie taką rzecz
tak jak wasza koleżanka powiedziała
no mamy te miliony linii kodu
i nie bardzo wiemy co z tym fantem zrobić
a teraz wyobraźcie sobie
że wśród tych milionów linii kodu
prawdopodobnie część to są biblioteki
narzędzia frameworka obojętnie
to znaczy że milcząco zakładam
że narzędzie ma dokumentację
to jest bardzo ważne
jeżeli bierzecie biblioteki
to macie dokumentację
tego co one robią
to znaczy że bibliotek używamy
w zasadzie jak takiej czarnej skrzynki
w pewnym sensie
wiemy jak działa zakładamy że wiemy
innych nie używamy żeby nie było
dla porządku
to znaczy że
w tej grupie mam trzy
jeżeli ktoś chce
jeżeli ktoś potrzebuje funkcjonalność
funkcję kodu
posortuje według alfabetu prędziutko
to raczej nie będzie didolił samemu
tylko weźmie bibliotekę
i tam będzie napisane
czy tam w ogóle w języku programowania
będzie posortuj
bierzcie poprawkę na to
że tak zwane języki wysokiego poziomu
to są tak naprawdę biblioteki
bo jeżeli jedna linijka kodu
po użyciu kompilatora
zamienia się w 5 kilo
kodu maszynowego
to znaczy że
języki programowania
one są same
z siebie bibliotekami
bo kompilator tak naprawdę jeżeli coś robi
nie jest to
zbyt duże uproszczenie wbrew pozorom
kompilator bierze tą pojedynczą linijkę
napisaną po angielsku
i zamienia na 4 wiadra
kodu maszynowego
i wy tego już nie musicie robić
zwróćcie uwagę że
bardzo wiele funkcji które uruchamiamy
z poziomu kodu źródłowego
to wszyscy wiemy
że one fajne działają
rzadko kiedy znamy bebechy
algorytmów tych funkcji
no bo jeżeli przecież
niech to będzie ta nieszczęsna matematyka
jeżeli ktoś was napisze
w jakimkolwiek języku programowania
że chce wyciągnąć
pierwiastek 16 stopnia
z 8 cyfrowej liczby
to sytuacja jest taka że tak
to się uda
i prawdopodobnie nikt z was
prawdopodobnie nie mówię że na pewno
w tych salach ten algorytm działa
prawdopodobnie mało kto na tej sali
potrafi by ten algorytm w ogóle narysować
a używamy go z powodzeniem
zwróćcie uwagę że używamy go
tak samo jak kalkulatora za 5 zł
jeżeli ktoś z was nie ma
to można sobie kupić
iść do sklepu
są takie sklepy wszystko po piątce
i tak dalej
bierzecie kalkulator
i ten kalkulator wyprawia dla człowieka
rzeczy magiczne
na przykład mnoży 8 cyfrowe liczby
pierwiastkuje
potęguje
ten kalkulator kosztuje 5 zł
dokładnie tak samo my
piszemy oprogramowanie
bierzemy jakiegoś tam java, pythona, whatever
piszemy tam nie wiem
zrób jakieś tam bardzo skomplikowane
fajne rzeczy
to jest jednak góra dwie linijki kodu
czary mary i wyskoczyło
to znaczy że
to znaczy że tak naprawdę
jeżeli mówimy o jakimś działającym kodzie
tak już na końcu
platformy, fullstacki i tak dalej
ten kod
który realizuje logikę biznesową
na przykład tam nie wiem
jakieś faktury oblicza
jakieś skomplikowane nawet
robi programy lojalnościowe
to on stanowi
małe kilka procent całości
to jest
i tylko to musimy udokumentować
bo reszta już jest
i teraz
to jest pierwszy problem
drugi problem polega na tym
że jeżeli umówimy się
że
nie musimy odkrywać koła na nowo
czyli nie będziemy pisali
ja nie wiem czy kiedykolwiek z was
gdybyście nawet wszyscy byli
w najważniejszych firmach, bankach
nie wiem gdzie jeszcze
programistami, koderami jak zwał tak zwał
to prawdopodobnie nikt z was nigdy w życiu
sam nie będzie musiał stworzyć
kompilatora
nigdy sam nie będzie musiał zrobić
od zera algorytmu
na pierwiastkowanie czy potęgowanie
prawdopodobnie nikt
jest jeszcze śmieszniejszy
prawdopodobnie nikt z was nigdy w życiu
nawet nie będzie musiał napisać kodu
na wygenerowanie ekranu logowania się
nikt z was nie będzie musiał
pisać kodu
na generowanie klucza publicznego
w tym
w podpisie elektronicznym
nikt z was nie będzie musiał pisać kodu
sterownika dysku twardego
nikt z was nie będzie musiał pisać kodu
protokołu SSL
to co wam zostanie do kodowania
to co wam zostało do tego kodowania
przecież wy prawie nic nie musicie robić
w tej branży
gdybyście byli tymi programistami itd
to co zostało
wykorzystywanie wszystkich tych bibliotek
łączenie
jeszcze raz
dwie osoby mówię
jedna osoba jeszcze raz poproszę
to łączenie
tego właśnie wykorzystywanie wszystkich bibliotek
i sprzedawanie to komuś
zostały dwie rzeczy
tak naprawdę
tylko zwróćcie uwagę na taką rzecz
że zlepienie do kupy tego fullstacka
i tak ułożenie do kupy bibliotek
jest fajne
tylko że jeżeli ktoś do was przyjdzie
i powie wam tak
to jest moja firma
niech to będzie biblioteka
mamy bibliotekę
i dyrektor mówi że
generalnie biblioteka to biblioteka
to jest program promocyjny
że za każde dwie książki jest lizak
jak przeczytasz dzieło Mickiewicza
dostaniesz dropsa
a jak się spóźnisz
z oddaniem książki
dwa dni
to za karę będziesz musiał przeczytać
na dniemnym
znajdziemy taką gotową bibliotekę
czy nie bardzo
obawiam się że nie
to znaczy że
to co nazywamy fullstack development
nie działa
bo każda firma
albo na rynku jest oprogramowanie standardowe
na przykład księgowanie
Ameryki tam nie odkryjemy
bo jest ustawa
i ktoś idzie do sklepu
i mówi poproszę jedno księgowanie
jednego CRM
i sklep internetowy
sklepów internetowych na tym świecie
jest dosyć dużo takich gotowych
skryptów naprawdę dobrych uniwersalnych
jest może kilkanaście
pisanie od zera sklepu internetowego
ma bardzo średni sens
tak szczerze mówiąc
no bo każdy sklep
zwróćcie uwagę że sklep
mamy dwa rodzaje sklepów
w zasadzie trzy
są sklepy
mówimy o portalach internetowych
na takiej stronie internetowej
albo można się umówić do fryzjera
może być prawnik jak ktoś woli
to są te strony internetowe
gdzie umawiamy się o konkretnej godzinie
i płacimy konkretną forsę za godzinę
zwróćcie uwagę
że pomiędzy stroną internetową
gdzie się możecie umówić z fryzjerem
z dentystą czy z prawnikiem
to one się funkcjonalnie
absolutnie niczym nie różnią
no bo czym miałyby się różnić
każdy sobie wpisze że pracuje od godziny
do godziny tam nie wiem 8-16
ustali sobie że
przeciętne spotkanie trwa kwadrat lub godzinę
i ten sam software
który będzie miał kilka kilkanaście parametrów w porywach
no to jak to będzie fryzjer
to on sobie ustawi sloty
nie wiem jak to będzie takie
strzyżenie na szybko
nie przychodzi taki jak ja
bez żadnego mycia głowy tylko ciach ciach ciach
skrócimy panu włosy po miesiącu
takich fryzjerów jest dużo
wchodzisz z ulicy 10-15 minut
obcięty mówiąc po polsku
no to on sobie mówi okej
to ja mam na klienta 15 minut
długość czasowego slotu
prawnik
no u mnie taka porada godzile
to on sobie ustawi godzinę godzinne odstępy
dentysta
być może godzinne
i koniec konfiguracji
a jeszcze musisz wpisać nazwę firmy
to znaczy że tu Ameryki już nie odkryjecie
idziecie do sklepu
nawet ściągniecie za darmochę takiego gotowca
tego jest potent
no dobra drugi sklep sprzedajemy rzeczy materialne
no to nie ma slotów czasowych
tylko jest magazyn
do tego magazynu 5000 pozycji
nie ma to znaczenia
cena nazwa indeks
żadna filozofia opis produktu zdjęcie
tu jest problem że produkty są materialne
w związku z tym no magazyn trzeba przyjąć i zdjąć
okej
jak będzie fajny program to będziemy miał API
żadna sztuka
nie chodzi
i mamy sklep internetowy
w dowolnym momencie go podpinamy wtyczką
do ERP do FK i tak dalej
trzeba tylko trochę parametrów ustawić
i ktoś musi wpisać te produkty
jakieś lepsze programy będą miały
jakieś możliwości importu
trzeci wariant
to jest sprzedaż wartości intelektualnych
czyli
tak naprawdę sprzedajemy jakieś pliki
to czy to będzie film czy ebook w PDF nie ma znaczenia
różnica jest drobna
bo tam jest magazyn
ale nie ma ilości
czyli jak ktoś sprzedaje PDF
no to nie musi przyjechać na magazyn 15 PDF
tylko ma te PDF
i ludzie płacą
płatności internetowe
to już jest tak obrzydliwie nudne
że się w głowie nie mieści
banki to może niekoniecznie
bo on nie ma w tym interesu
ale jest 15 brokerów internetowych plus PayPal
także podpięcie płatności elektronicznej
nie stanowi żadnego problemu
to się robi 10 minut
jak ktoś robi to powoli
sam to robiłem jakiś czas temu
to zaraz pytanie brzmi
po co nam ci programiści
oni są potrzebni
tacy jak wy
i teraz tak żeby nie było
to wszystko co teraz powiedziałem
to na świecie jest
nie musimy tego udokumentować
jak korzystamy z gotowców
czy to będzie na niskim poziomie język programowania
czy to będą gotowe aplikacje do integracji
one mają dokumentację
zresztą nikt rozsądny nie weźmie z internetu
czegoś co nie ma dokumentacji
bo po prostu nie rozumie jak to działa
to co nam pozostaje
pozostaje nam to
jak wam się wydaje
co pozostaje
takim ludziom jak ja czy wy
do wymyślenia
pierwszy poziom
to jest to co nazywamy
lepiej lub gorzej
architekturą integracji
jest sobie firma
i ktoś im powie
skoro mamy na rynku
do wyboru kilka kilkanaście CRM
kilka kilkanaście ERP
kilka kilkanaście sklepów internetowych
to tu możemy poprzebierać
a to jest cały czas
używanie gotowych rzeczy
największą sztuką
nie jest to jakaś wielka sztuka
to tu mamy CRM
tutaj ze sklepu internetowego
będą wpływały zamówienia
i my tą rurę podepniemy
do finansów księgowości
i poszło
jeżeli się zdarzy
że jakaś firma ma swoją specyfikę
jeżeli jakaś firma
ma swoją specyfikę
to wtedy zaczyna się problem
bo jak ma swoją specyfikę
to znaczy że nie ma na półkach sklepów
takich gotowców
tylko że tą specyfikę
to my znowu
użyjemy języka programowania
nie będziemy dodolili tam w tym kładzie maszynowym
i to jest ta sytuacja
którą mamy teraz z biblioteką
prawdopodobnie program biblioteki
można kupić
ale my na nim ćwiczymy
słyszeliście o czymś takim jak
customizacja oprogramowania
w sensie dostosowanie
do unikalnych potrzeb klienta
na czym to polega
bo ktoś mówi
to ja poproszę 2 kg customizacji
to co to znaczy
że są pewne
unikalne potrzeby
których nie może
klient znaleźć gotowych
na rynku
jak będą realizowane
to już od nas zależy
musimy to wymyślić
albo wykorzystać
jakieś inne narzędzia
ale sam jakby ten klucz
ten algorytm
do tego nie korzystamy
tylko wymyślamy to w sumie
bądźcie ostrożni
bo na rynku
jest dosyć dużo
szczególnie w języku polskim
w ogóle jest problem z tym samym słowem
customizacja
co to w ogóle oznacza
customizacja aplikacji
w sensie modyfikacja lub dostosowanie
dobrze rozumiem
otóż generalnie mamy sytuację taką
tu was uczulam żebyście się kiedyś
nie przejechali na ofertach
bo często są oferty
nawet w umowach widzę
że będzie customizacja
i pytam czy to jest customizacja
10 ludzi 10 definicji
otóż jeżeli oprogramowanie istnieje
jest w sklepie na półce albo jest gotowcem
to
jak my możemy
takie istniejące oprogramowanie dopasować do siebie
możemy zrobić dwie rzeczy
albo to oprogramowanie ma jakieś
ekrany konfiguracji
i wtedy możemy powiedzieć sobie
że ok my sobie ten program dostosowaliśmy
sparametryzowaliśmy osobiście preferuję słowo
parametryzacja dlaczego
no bo coś istnieje
i to jest parametryzacja
jak macie samochód
i macie tam w menu w samochodach tych nowszych
tam styl jazdy
i tam nie wiem co jeszcze
to to jest parametryzacja
customizacją
w przypadku samochodu jest tuning
czyli ingerencja w konstrukcję samochodu
a nie parametryzacja
i teraz jak ktoś dostaje
gotowy kod
i są i mam ekran
parametryzacji tam czegoś brakuje
to
to jest zmora tej branży
coraz więcej ludzi od tego odchodzi
grzebanie
jeżeli ktoś bierze kod
zakładam że ma do niego dostęp
często tak jest że ma
i zaczyna w nim grzebać
to to jest tuning
konsekwencja tego jest taka
pytanie do was kupujecie idziecie do salonu
kupiliście samochód
nowka sztuka chodzi jak zegarek
i następnego dnia rano
wy ten samochód
do warsztatu do tuningu
jaki będzie pierwszy efekt
jaki uzyskacie
utrata gwarancji
utrata gwarancji producenta
bingo
dotkniesz go tylko
i natychmiast producent mówi okej
właśnie wziąłeś problem na siebie
panie a ten samochód się składa
z piętnastu tysięcy śrubek
i kółek
trzeba było nie grzebać
ja jako producent
biorę odpowiedzialność za to co ja ci dałem
tam są gałeczki do parametryzacji
ale
jak żeś stuningował
to sorry
ten warsztat jest twoim panem od tego momentu
do mnie nie przychodź
w branży informatycznej
jest identycznie
kupicie sobie czy się wy
ktoś sobie kupi tam microsoft
i tak dalej
okej
prosty przykład
słyszeliście że
to było już będzie za jakieś 3-4 miesiące
temu
produkt odpowiedzialny za bezpieczeństwo
jakieś tam wgrali się ludzie
na windowsy
okazało się że coś tam się poszło nie tak
i
nie wiem ćwierć świata zdechło
bo tam coś się posypało
w tym programie do administrowania
i bezpieczeństwa
to było na platformy microsoftowe
no i teraz pytanie było
jak ten microsoft tu do kitu
problem polegał na tym
że instalowanie tej aplikacji
powodowało
podmianę jednej z bibliotek systemowych w windowsach
tam żeby na tym niskim poziomie te wirusy
i to bezpieczeństwo
no i tam oczywiście
wszyscy szukają jelenia tego winnego
a microsoft poniekąd słusznie mówi
słuchajcie
odmieniliście oryginalną bibliotekę
odwalcie się od nas
to nie nasz software
a to są windowsy nie
to są windowsy
minus jedna bardzo ważna biblioteka
systemowa
to nie jest wina microsoftu
to tamten producent
a oni nie to te windowsy są g
nie windowsy w tym przypadku były fajne
trzeba było nie podmieniać biblioteki
no podmieniliśmy bo można
no w tej branży akurat wszystko można podmienić
nie w tym kodzie prawie wszystko
także mamy sytuację taką
że bierzemy gotowe oprogramowanie
i taka rada praktyczna
nigdy nie grzebcie w cudzym kodzie
bo to jest szukanie kłopotów
bo to jest taki samochód tuningowany na giełdzie
kupiliście tak a tam się coś zepsuło
ale ja nie wiem jak to działa
fabryka mówi że to nie ich
a mechanik już mieszka w innej wsi
okej
i co teraz
no ten samochód nie odpala
nie będzie odpalał
chyba że przez przypadek znajdziesz dziurę
standardowe podejście
mówimy o bezpiecznym podejściu
jak to się ładnie mówi profesjonalnym
bierzemy kod standardowy
no i te parametry
wyklikujemy
i prawie każdy producent do programowania
PAL 6 to będzie
znaczy w open source tam akurat nikt się tym nie przejmuje
grzebią ludzie jak chcą
skutki są różne lepsze gorsze różnie
natomiast jeżeli mówimy o programowaniu
za które ktoś bierze pieniądze
to najczęściej udziela gwarancji
i jest prosta rzecz
to jest nasze tu masz API
jak ci czegoś brakuje w menu
to nie tuninguj naszego kodu
bo ja natychmiast umyję ręce
tylko napisz na boku swój
i używaj i podłącz go przez API
i to jest standardowe podejście
dzisiaj tak naprawdę
dedykowanego oprogramowania
to tak nie ma żadnego sensu pisania
pisanie
systemu finansowo księgowego
pisanie CRM
też nie ma sensu sklepy internetowe
no to nie ma sensu
to co ma i teraz to pytanie do was
takie trochę rynkowe tak
zakładam że trochę się dowiecie więcej
kiedy ma sens napisanie na przykład
takiej biblioteki i zaprojektowanie
kto ma pomysł
bo zapewniam was że to
są sytuacje gdzie to ma sens
nie robimy rzeczy bez sensu na tych zajęciach
jak wam się wydaje kiedy
projektowanie takiej biblioteki od zera ma sens
być może gdy mamy jakąś firmę
która działa na bardzo dużą skalę
i te obecne rozwiązania to są takie
zupełnie niewystarczające
może być właśnie tak
że ok działam na dużą skalę
a tu nagle mi mówi producent
że ta licencja to kosztuje jakieś
koszmarne pieniądze nie
bo do pewnego momentu
znaczy każde oprogramowanie
ma koszt wytworzenia no nie ma siły tak
no może nie 5 zł nie zawsze miliony
i teraz mamy taką sytuację zaczynacie działać
na dużą skalę
i nagle się a producenci
no to oni wiecie tą forsę za licencję
nie opłaty co roku licencja
i tak dalej
i nagle się okazuje
że skala działania powoduje
że koszty licencji i tego
maintenanceu zaczynają być
porównywalne z kosztami
samodzielnego napisania aplikacji
dla siebie
to jest ten magiczny moment
kiedy mówimy
okej przecież
różnica jest taka że aplikacja gotowa
istnieje możecie jej używać natychmiast
już sekundę po zakupie
a swój własny software będziecie pisali
4-5 lat nie
duża skala nie zapominajmy o tym
dlatego
w tej chwili na rynku
widać po tych w zasadzie branża
ta nasza branża się rozwija
dynamicznie od czasu jak powstały komputery pc
takie wiecie że pod biurką macie
no notebooki były trochę większe niż dzisiaj
ale nie aż tak
czy jakaś tam powiedzmy druga połowa
lat 80
to po tych kilku dekadach
już wiemy co działa
co nie działa
czego nie należy robić
co się sprawdza
i generalnie jest tak
jeżeli na rynku jest standardowy software
to używamy go
bo napisanie takiego samego będzie trwało lata
jeżeli mamy
co to znaczy że działamy na dużą skalę
pierwsza rzecz którą robi firma
to ciacha się na kawałki
no bo tak tu mamy księgowość
tu Ameryki nie odkryjemy
tam są magazyny
to znaczy że będzie miała problem
może inaczej
90% potrzebnego software kupi na rynku
bez żadnego problemu dzisiaj
biorąc pod uwagę
postęp w tej branży integracja
tego też nie jest jakimś wielkim wyzwaniem
jeżeli działamy
zwróćmy uwagę na taką rzecz
Allegro
to jest tylko przykład
oni się tym chwalą
działają na dużą skalę
kiedy oni zaczęli
oni teraz
prawdopodobnie nie pisaliby
całego software od zera
co najwyżej
zrobiliby własny moduł
jeżeli jest prawdą
że mają swój bardzo specyficzny system obliczeń
tam prowizji i Bóg wie czego jeszcze
systemów aukcyjnych jest na rynku potąd
plus dla nich jest taki
że nie muszą nikomu płacić maintenance
minus jest taki
że muszą otrzymać tych kilkudziesięciu koderów u siebie
nie ma nic za darmo nie?
z rynku nie ma darmowych obiadów
także
dzisiaj się mówi o jednej ważnej rzeczy
strategie rynkowe
z lat dziewięćdziesiątych
dzisiaj są kompletnie od czapy
bo w latach dziewięćdziesiątych prawie nie było
tego software'u
i każdy trzeba było sobie napisać samemu
dzisiaj
tego software'u jest potąd na rynku
i do napisania
tak naprawdę projekt informatyczny dzisiaj
to jest architektura HLD
całej firmy
10% specyfiki firmy
o ile taka istnieje
o ile istnieje
bo dzisiaj wpakowanie się w dedykowany software
jest dużym ryzykiem i kosztem
bo to znaczy że
ktoś kto robi sobie dedykowany software
tak naprawdę robi z siebie
taką małą fabrykę
tutaj jakby ktoś powiedział
okej jestem firmą taksówkową
sam se wymyśliłem
przednie fotele
moje takie
to znaczy że
i nikt takich na świecie nie robi
co to znaczy
że firma taksówkowa
sama se musi zbudować fabrykę swoich foteli
to są dosyć duże pieniądze
dlatego na świecie
postępuje standaryzacja
nawet zwróćcie uwagę
że możecie sobie kupić
gdybyście byli graczami
dedykowany fotel gamingowy
ale nie znam człowieka
programisty gracza
na komputerze
przepraszam
który by
coś tutaj wieje
który by powiedział okej
sam se zrobię fotel
i dla żony i męża też
bo to znaczy że musiałby pod domem
postawić fabrykę foteli
a przynajmniej manufakturę
utrzymanie tej fabryki foteli
manufaktury będzie kosztowało niemało
w związku z tym
albo czyli tak
najczęściej powstaje jakiś kawałek tego
no kurcze
resztę integrujemy
już to nie podpinamy
zwróćcie uwagę na taką rzecz
mamy ISBN
istnieje na świecie rejestr
mamy system HR
bo ci użytkownicy
załóżmy że będziemy to robić
mamy wypożyczenia
biblioteka może być np. płatna
będzie płatna od dzisiaj
będziecie wystawiali jakieś paragony
faktury czy coś takiego
czy jest sens
budowania w bibliotece
jakiegoś systemu finansowo-księgowego
no nie ma
ma sens
w chmurze czy kupić sobie gotowy system FK
finansowo-księgowy
no to klikamy
po prawej stronie klikamy
dwa razy
klikniemy dwa razy
wyskoczy nam lista
aktora wybieramy
i piszemy system FK
i nasza biblioteka
też będzie z niego korzystała
tak samo jak pozostałe biblioteki
to drug and drop musimy zrobić
i teraz tak
z uwagi na to
że
aktor może być
albo homo sapiens
człowiek i on będzie używał GUI
aktorem może być inna aplikacja
na tym to takie krótkie przypomnienie
na diagramie
diagram przypadków użycia
jest program kontekstowy
istnieje jakaś wielka firma
a my tworzymy te brakujące parę procent
bo wszędzie są standardowe software
magazyny jakieś tam
ISBN FK HR i tak dalej
no dobra
to teraz
te strzałeczki
bo one są ważne
my musimy na tym poziomie
bo od samego początku działamy jak projektanci
od ogółu do szczegółów
co się będzie działo
na tym poziomie nie interesują nas żadne linijki kodu
mamy taką sytuację
że nasza aplikacja
będzie prosiła
tą wyszukiwarkę
ISBN
a to jeszcze czarna skrzynka
czyli nasza aplikacja będzie korzystała
wywoływała jakieś API
wyszukiwacza ISBN
to samo będzie z systemem FK i z systemem HR
bo my
nie świadczymy
nasza biblioteka
nie świadczy usług pozostałym
aplikacjom w tej firmie
nie korzysta z tych aplikacji
z tej aplikacji
będą korzystali generalnie ludzie
w tym przypadku
można sobie wyobrazić
że nasza biblioteka też kiedyś tam API wystawi
to wtedy będzie to wyglądało inaczej
to może narysujmy to
załóżmy że mamy
klikamy jednego aktora jeszcze
nazywamy go system zewnętrzny
aplikacja zewnętrzna
może tak
klikamy aktora
dajmy mu nazwę
aplikacja zewnętrzna
i załóżmy
że my jako biblioteka chcemy coś na zewnątrz wystawić
jakieś informacje
załóżmy że
i robimy sobie tak zwane API
to gdybyśmy my jako biblioteka chcieli API komuś wystawić
to teraz tak
ciągniemy
klikamy tego aktora
ciągniemy do środka
puszczamy myszkę
przypadek użycia
klikamy to i piszemy
API biblioteki
bardzo ogólnie
to znaczy że
bo diagram przypadków użycia
ma pewną specyfikę
przypadek użycia
to jest coś
co jest usługą świadczoną
na zewnątrz
czyli jakieś zewnętrzne coś
korzysta z naszej aplikacji
jeżeli nasza aplikacja
oferuje usługi
to są to jej przypadki użycia
na zewnątrz wycisku
w tej branży wielu projektantów zapomina
że
absolutnie wszystkie systemy
aplikacje jak my je wiemy
to one działają
w trybie
klient serwer
może być usługodawca
usługobiorca
kiedyś się mówiło master slave
już jest nie modne
wszystkie absolutnie wszystkie
elementy systemu
są w trybie
klient serwer
działają w jedną stronę
dialog to są dwa działania
zwróćcie uwagę że
związek pomiędzy taksówkarzem
a klientem jest taki
że taksówkarz świadczy usługi pasażerom
a nie odwrotnie
wszystkie związki
są zawsze jednokierunkowe
zawsze jest ten kto mówi
ten kto słucha
jeżeli to będzie dialog
bo my jako ludzie mamy i paszczę i uszy
ale w danym momencie ja mówię zrób to
ewentualnie mi odpowie
ale sytuacja
kiedy ktoś inny mi wydaje polecenie
jest tą drugą stroną komunikacji
czyli wszystkie
związki między elementami
na przykład między mną a wami
ja mówię wy słuchacie
pytanie pomocnicze
jak wam się wydaje
bo to sprawia często ludziom problem
ten diagram
mamy taką relację
są studenci
jest wykładowca
to ta strzałka
jaka tam będzie strzałka
między wami a mną
od studentów
do pana
bo
my korzystamy jakby
z pana zasobów
większość ludzi odpowiada inaczej
ale prawda jest taka
że to ja my jako uczelnia
wam świadczymy usługę
bardzo ważna rzecz
nie ma znaczenia
kiedy wyście o tą usługę poprosili
jeżeli dialog pomiędzy mną a wami
co rozpoczyna
co jest
co inicjuje dialog pomiędzy
wykładowcą jakiejkolwiek uczelni
a studentem
chęć nauki
zapisanie się na studia przez studenta
tak
czy dopóki wy
nie poprosicie uczelni
o przyjęcie na studia
nigdy was nie będzie mówił
to znaczy że ja tutaj jestem dlatego
że nie chcieli
boście na studia przyszli
ja i jeszcze paru innych
i teraz gdyby to był przypadek u życia
to byłaby sytuacja prosta
jest bąbelek
nazwałbym go nie wiem
wykłady, zajęcia
pozyskiwanie wiedzy
prezentacja wiedzy obojętnie
student jest aktorem
i przychodzi student na uczelnię
i wywołuje przypadek u życia
chciałbym czegoś posłuchać
no to ta uczelnia nadaje, nie? Raczelińskiego, Wysyła, Ruchu Gminnego
jak to się skończy to
student mówi ok, nadarłem się wiedzy
idę, nie?
bardzo powszechny błąd
nie ma znaczenia ile ten przypadek u życia się wykonuje
bo przypadek u życia
pod tytułem nie wiem nazwijmy go enigmatycznie
propagacja wiedzy
to są 4 lata, nie?
przypadek u życia
to jest coś co inicjuje
aktor
coś tam się dzieje, to może być dialog
i jest końcówka
aktor dostaje efekt oczekiwany
raz po dwóch sekundach, raz po czterech latach
dzień dobry, co pan chce?
ja bym chciał dyplom inżyniera
luzik, 4 lata i dostaniesz, nie?
i wtedy jest use case
taki bardzo wysokopoziomowy, że tak powiem
pamiętajcie, że to zależy od tego
na jakim poziomie abstrakcji rozmawiamy
ale to jest absolutnie
zawsze to samo
i teraz
jeżeli jakaś aplikacja zewnętrzna
do nas przyjdzie po informacje
biblioteka, dawaj mi coś
no to wtedy my świadczymy usługę
i ona ma swój początek i koniec, zawsze
w WMLu jest tak, że
chcemy wiedzieć co jest człowiekiem
a co jest tym nie człowiekiem
z bardzo prostego powodu
człowiek używa GUI, nie?
graphical user interface
aplikacja ma jakieś API
jest różnica, żeby nie było
żebyśmy nie mieli z tym problemu
w WMLu są tak zwane stereotypy
proszę kliknąć prawym klawiszem
na przykład na wyszukiwacza
ISBN
wyszukiwać ISBN, u góry masz
prawy klawisz, stereotypy
przejeżdżamy na dół
edytuj, stereotypy
dodamy sobie go
z tego względu, że
WML jest szkieletem
całej notacji
stereotypy dodajemy wtedy
jeżeli chcemy dodatkowo
rozróżniać elementy już istniejące
w notacji, standardowo w WMLu jest actor
w WMLu jest również wskazówka
pod koniec
specyfikacji, to tak dla waszej wiedzy
że są pewne słowa kluczowe
tak samo jak macie w językach programowania
słowa, których nie wolno edytować
i tak dalej
jednym z tych słów kluczowych jest słowo
dokument, w oryginale przez C piszemy
dokumentem jest każdy ciąg znaków
który jest potencjalnie czytelny
dla
dla człowieka
ale my możemy sobie dodać, dodamy sobie jeszcze
actor, jeżeli my mówimy
że actor, ale to jest raz inna aplikacja
a raz homo sapiens człowiek
i chcielibyśmy to pokazać na rysunku
to musimy dodać sobie taki stereotyp
i tutaj piszemy
human
może nie homo sapiens
human napiszmy
z tym możecie się spotkać
to nie jest jakiś wynalazek świeży
dodajmy jeszcze jeden
dodaj application
po ichniemu przez 2p
okej
i tu też okej
i teraz tak, myśmy kliknęli tą bibliotekę
human to wywal
ten ISBN nie jest
dobra okej
to samo robimy z tymi
które są systemami
to jest aplikacja
system HR to jest aplikacja
zewnętrzna aplikacja to jest aplikacja
siłą rzeczy
a tych po lewej oznaczamy jako human
human
co nam to daje
to nam daje dodatkową informację
że my już wiemy generalnie czego się spodziewać
po drugiej stronie
że tu będzie oprogramowanie jakieś software zewnętrzne blablabla
tu będą ludzie będzie GUI i tak dalej
już wiemy że API biblioteki to będzie
jakieś restowe API
a karty katalogowe będą miały ekran
dlaczego o tych dokumentach mówiłem
bo one nam się przydadzą
przy okazji tych formularzy ekranowych
bo
jak się komunikuje
pracownik biblioteki z biblioteką
to już wiemy tak formularzem ekranowym
a jak się komunikuje
nasza biblioteka
aplikacja z systemem FK
też formularzem
wkraczamy co nieco
w tak zwane dobre i złe praktyki programowania
słuchajcie jedną z absolutnie
najgorszych praktyk programowania
i budowania interfejsów
jest wysyłanie próśb
o pojedyncze elementy
nie wiem czy są pewnie
gorsze rzeczy na tym świecie
to jest jedna z tych najgorszych
otóż
jest dosyć dużo książek
i publikacji na temat właśnie integracji
i jedną z podstawowych zasad
jest to
żeby nie prosić
o pojedyncze atrybuty
bo to API się staje
masakrycznie skomplikowane
i te dialogi
tylko prosimy o całe
umownie paczki informacji
to znaczy się że
jeżeli siada do ekranu człowiek
krótki przykład
mamy już te istniejące karty wypożyczeń
i pracownik biblioteki
chciałby wiedzieć
kto wypożyczył Pana Tadeusza
bo go nie ma na półce
no co on zrobi
no co
dzisiaj u wszystkich użytkowników
i jakby
filtruje
jak sobie to wyobrażasz
ale to jest zasob pożarny
patrz na ekran
masz w menu
karty katalogowe
listy życzeń
wypożyczenia
czytelników
API nie widzisz bo jesteś homo sapiens
przychodzi dyrektor i się pyta
ty nie ma Pana Tadeusza
na półce
kto go ma
gdzie będziesz szukał
a no to
wypożyczenia
wypożyczenia
ok
karta wypożyczenia będzie miała
imię nazwisko data tytoł autor
tam nie wiem co jeszcze
co nie zmienia faktu
że jeżeli na karcie wypożyczenia
jest imię nazwisko czytelnika
i jest to co on wypożyczył
za chwilę się przekonamy
że tam jeszcze jest
że on to oddał czy nie
to zwróćmy uwagę na taką rzecz
tutaj będzie 15 pól
my potrzebujemy tylko nazwisko
człowieka który ma tego Pana Tadeusza
czy to znaczy że ja muszę projektować
dedykowany ekran
wyszukiwanie nieoddanych książek
powiem tak
jest to jedna z głupszych rzeczy
jest jeszcze gorzej
wielu ludzi tak robi deweloperów
to jest kompletny odjazd
to jest kompletny odjazd
bo jeżeli ja będę miał takich pytań 15
to ja będę miał po roku
15 opcji w menu
i ta aplikacja będzie jednym dramatem
architektoniczno użytkowym
to jest problem
że większym problemem w tej branży
jest projektowanie ze zmienieniem tych aplikacji
niż klepanie kontu
macie system sprzedażowy
zakładam że wszyscy w życiu widzieliście fakturę
to jest jeden z moich ulubionych przykładów
książkowy ja tego nie wymyśliłem
mamy działający system finansowy
finansowo księgowy
widziałem faktury i tak dalej
i przychodzi do was człowiek z tej firmy
i mówi wie pan co
panie tam projektancie
ja mam taki problem w dziale handlowym
że czasami potrzebuję sprawdzić
bo wiecie klienci adresy zmieniają
ja bym chciał sprawdzić historyczny
adres mojego klienta
co zrobicie
jako projektanci
w sensie po fakturze mamy sprawdzić tak
no to znajdziemy fakturę
z adresem klienta
nie piszemy żadnego kodu
tylko piszemy
panie dyrektor handlowy
na każdej fakturze jest adres
z dnia wystawienia faktury
pan sobie znajdzie starą fakturę
tam jest ten adres
uwierzcie mi co robi masa deweloperów
koduje kolejny ekranik z raporcikiem
historia zmian adresów
dlaczego w niektórych aplikacjach
jest te milion dwieście linii kodów javy
a mogą być tylko dwieście tysięcy
no właśnie z tego względu
słuchajcie
mogliście nie widzieć
ja pół roku temu widziałem aplikację
która w pewnej firmie powstaje
dwadzieścia lat
ich własny development
słuchajcie macie świadomość
że z tego samego menu to oni używają
mają na przykład taką część
finansowo-księgową
tam jest tych zakładek w menu
jakieś dwadzieścia trzy cztery
dzisiaj używają sześciu
nie ma odważnego żeby tamte usunąć
żeby tego nie rozsypać
oni każdą nowe pytanie
każde nowe user story
to dokodowywali
w ten sam sposób
jak teraz usłyszeliście
i ta aplikacja po dwudziestu latach
jest jednym wielkim śmietnikiem
to ona co cierpi dzisiaj świat
2024
te aplikacje które mają po dziesięć, piętnaście, dwadzieścia lat
one są
właśnie w tej chwili w takiej właśnie postaci
taki mam samochód
sam go wyrzeźbiłem
nie mam żadnych kwitów
nie boję się dotknąć
bo jak coś zmienię to nie będzie jeździł
a ja będę szukał przez najbliższe dwa tygodnie
podstawą architektury wysokiego poziomu
jest operowanie dokumentami
czyli jeżeli my dostajemy na ekran
całą kartę wypożyczenia
całą fakturę
całe cokolwiek bądź
mimo tego że szukamy jednego adresu
identycznie postępujemy przy integracji
jeżeli ktoś z was się bawił w integrację
to wie że standardowy system ERP
udostępni wam na API
całą fakturę
ale nikt normalny
w SAPie
czy w Microsoftzie
nie udostępnia na API
restowego pytanie o jedno pole
typu wartość brutto faktury podaj
nikt przy zdrowych zmysłach tego nie robi
bo kodu by tam było nie wiem ile
po sufit
jeżeli ktoś chce wartość brutto faktury
to bierze całą fakturę
wydłubie sobie brutto i resztę zignoruje
tak samo jak wy jako homo sapiens
przy ekranie
chciałem zobaczyć historyczny adres
system mi wyświetlił na ekranie całą fakturę
ja sobie przeczytałem ten adres
resztę ignoruje
to jest absolutnie najprostsza operacja w architekturze systemu
ignorowanie nadmiarowych informacji
dlatego w nowszych książkach
z integracji systemów
wiecie że na tym API
będzie relatywnie mało
często się mówi że to są tak zwane obiekty biznesowe
to są całe dokumenty
cała faktura cała wuzetka
cała karta wypożyczenia całe coś tam
jest w dokumentacji napisane
faktura 30 pól
to znaczy że jeżeli chcesz którekolwiek z tych 30 pól
to ja Ci daje całą fakturę
kombinuj
bo wtedy moja API ma jedno polecenie
dawaj fakturę
bo jak ja mam ją napisać po API
na 30 operacji
faktura netto faktura netto
faktura sprzedawca faktura odbiorca
to ja bym siedział jak ten idiota i pisał ten kod
a każda zmiana tego systemu
rozwala mi całą integrację
a jeżeli się mówimy że nie
mój system wypluwa Ci całe dokumenty
które my jako ludzie znamy
to API ma 5 pozycji a nie 50
i chodzi jak burza
robimy wypożyczenia w takim razie
klikamy prawym klawiszem na bączku wypożyczenia
otwórz może inaczej
bo widzę że nie macie jeszcze architektury HALDE
kliknij z boku
przede wszystkim jest tak
zgodnie z wzorcami
jeżeli mamy w menu
tutaj mamy 5 rzeczy
bo ja Wam pokazywałem na początku mikroserwisy
mamy komponent
który steruje pracą aplikacji
i trochę głębiej mamy komponenty dziedzinowe
dedykowane dziedzinowe komponenty
to znaczy
posługując się wzorcami projektowymi
architektonicznymi
nie musimy odkrywać koła na nowo tylko my wiemy
że ta aplikacja będzie miała 5 komponentów
w tle
i jeden sterujący
w tym GUI
jak klikniecie ten prostokącik
aplikacja wspierająca pracę admiotekarza
to na dole macie taki
w prawym dolnym rogu macie
taka biała strzałeczka
klikamy to
tworzymy diagram podległy
nowy diagram
wybieramy diagram komponentów
dobra klikamy
ok
aplikacja
i zmieniamy nazwę
aplikacja
wymieniamy ten komponent diagram i piszemy
architektura HLD
standardowa nazwa
architektura HLD
L
high level design
nie R
ok
i teraz tak
na diagramie komponentów
operujemy z architekturą
są dwie konwencje
jedna mówi że
zrobimy sobie tą prostszą
ja też sam sobie
zacznę ostatnio w życiu upraszczać
nasza aplikacja
komponent to jest dowolny mniej czy bardziej
skomplikowany kawał kodu
klikamy komponent
klikamy się do środka
i teraz tak
ten komponent ten główny
bo my będziemy do środka pracowali
on reprezentuje całą tą aplikację
o to piszemy
aplikacja wspomagająca pracę biblioteki
aplikacja wspomagająca pracę biblioteki
już wiemy
że
będzie jeden komponent który
steruje tym wszystkim
napiszmy to
to się nazywa często w książkach
API koordynator
API jest czasami mylące bo to
nie wiadomo czy to będzie
aplikacja czy GUI
klikamy komponent w legendzie
klikujemy się do środka
nazwijmy go
enigmatycznie koordynator
jest wzorzec projektu
starajcie się tych komponentów
za bardzo nie rozciągać
to taki kiepski powerpointowy nawyk
bo będziecie potrzebowali więcej miejsca
nie zwężajcie tego
proponuję jeszcze w prawo ją rozciągnąć
bo będziemy tam mieli komponenty po prawej stronie
okej teraz będzie dobrze
i teraz tak
wzorcem który
znanym od osiemdziesiątych
który
mówi okej mamy komponent
który steruje pracą
podległych komponentów
tak jak na budowie jest kierownik budowy
i on mówi wszystkim ludziom co mają
w danym momencie robić ja potrzebuję od ciebie
tynkowanie od ciebie rury
tam zrób coś tam i tak dalej
zwróćcie uwagę że
w takiej zorganizowanej budowie
czy firmie
ludzie rzadko gadają między sobą
tylko kierownik mówi tak ty zrób to
ty zrób tamto ty zrób tamto
kierownik się martwi żeby to się kupę trzymało
ten wzorzec
nazywa się
saga od lat osiemdziesiątych
i może żeby wam
było łatwiej to wam zapamiętać
przeedytujcie to nazwę koordynator
nazwijcie to saga koordynator
dodajcie na początku słowo saga
saga koordynator
skąd to się wzięła ta saga
saga to nie jest skrót
z czym wam się kojarzy słowo saga
mi akurat się kojarzy
z producentem gier
z lat dwa tysiące pięć
to było chyba sega
czy nie saga
mi się z herbatą kojarzy
może być herbata
a słyszeliście o czymś takim
jak
saga królów wikingów
albo
saga rodu
radziwiłłów
to dosyć starożytne słowo
otóż saga
to jest taka oznacza
to jest taka jakby
taka przemyślana
historia że tak się dzieje
ten wzorzec ma tą nazwę z tego względu
że saga jako taka historia
co się wydarzyło co się wydarza
oznacza że ten koordynator
robi taką rzecz
mamy na przykład
przepis na remont mieszkania
i
scenariusz jest taki
skuć tynki
położyć kable
położyć rury
na nowo położyć tynki
pomalować
ta kolejność jest
z góry narzucona
gdybyśmy używali tego
to jest
saga drużyny remontowej
i ten koordynator to jest właśnie komponent
który przechowuje w sumie te scenariusze
te historie rodzin
bo każde kliknięcie
jeżeli ktoś kliknie w menu
faktura
to odpala sobie taką historyjkę
pusta faktura
aktor wstawia dane
policzyć
może się zwalidować fakturę
zapisać w repozytorium
poinformować klienta że się zapisało
taka historyjka jest
scenariusz
nie jest to user story żeby nie było niejasności
to będzie scenariusz albo sekwencja
w latach 80 ktoś padł na pomysł
że nazywać saga
i tak zostało
no dobra
klikamy ten saga koordynator
i przeciągamy
ten łącznik w prawym górnym rogu
na lewo poza komponent
wystarczy
puszczamy myszkę
wybieramy tego lizaczka
tego po prawej stronie drugi od góry
o ten
o to
i piszemy GUI
jest jedno to nie musi nawet nazwać
to jest w WML symbol
znaczy ten lizaczek
jest symbol interfejsu oferowanego
wiesz co zróbmy tak
a propos konwencji w WML
ta kreska powinna być mniej więcej na środku
tego komponentu
z tego
tego lizaczka przenieść w dół
otóż
tak to jest poprawna pozycja
otóż
są pewne konwencje w każdym języku graficznym
chodzi głównie o zrozumiałość
tak
także
najczęściej rysujemy to w ten sposób
że raczej unikamy łączenia linii do rogów
bo bywa to mylące
staramy się unikać
ukośnych kresek
ale tutaj już bez ortodoksji
otóż
osoba która rysuje schematy blokowe
w WMLu ma jeden
ktoś z was kiedyś
spotkał w życiu jakiegoś UXa
tak zwanego UX
designera
mamą w domu
nawet
co ta osoba robi
za co odpowiada
za rozplanowanie
interfejsu w sensie
projektowanie to UI
a UX to przeprowadzenie badań
i optymalnego
zaprojektowania
całego GUI
pod względem użytkowania
to jest to co zrobił
a za co odpowiada
dzieci jeszcze mieli
małą szkołę
za co odpowiada mechanik samochodowy
za wprowadzenie
napraw do samochodu
nie
za poprawne wykonanie tych napraw
tak konkretnie
jeżeli ktoś z was
pojedzie do mechanika
do warsztatu to po co
żeby zrobić coś z samochodem
żeby wasz samochód
jeździł
tak jak powinien
to że on spędzi dwie godziny
że wymieni 15 śrubek
że wyciągnie schowa silnik
to nie jest tak pani mechanik ja bym chciał
żeby pan to tak ze 3 godziny pokręcił kluczem
nie
panie mechanik
nie odpala
a powinien
zgodnie z instrukcją powinien
to pan to zrobi tak żeby odpalało
i on wam wtedy powie
a 3 godziny 500
jeden z ogromnych problemów
nie tylko w tej branży
takich w zasadzie
nieporozumień w umowach
nie idziemy do mechanika
po jego 3 godziny
idziemy do pracy
idziemy do mechanika żeby nasz samochód
znowu zaczął jeździć
UX designer
odpowiada za
ergonomię
i za komunikacyjność ekranu
nie przychodzimy
panie UX designer
pan mi tu przywali
poprosimy 3 godziny kolorowania ekranu
nie
UX designer tak proszę pana
poprosimy żeby ten ekran aplikacji
był łatwy w użyciu
żeby klient banku mógł zrobić przelew
i nie musiał wcześniej być
na 4 dniowym szkoleniu
tylko żeby ten ekran był tak prosty w użyciu
i intuicyjny
żeby on to zrobił sam bez szkolenia
kuma pan ok
ja jestem UX designer moja robota
ale UX designer nie projektuje
pól tego formularza
kto projektuje pola formularza
skąd się biorą pola na fakturze
UX designer projektuje
nie
ustalona
wcześniej
z ustawy
a jeżeli w waszej firmie jesteście
firmą i ktoś wam powiedział
to zróbcie mi system
rejestracji urlopów
kto projektuje
imię nazwisko
początek urlopu
kto to projektuje
projektant systemu
projektant systemu
tak
na pewno nie UX designer
UX designer powie tak
tak poustawiam to na ekranie
żeby przeciętna małpa
mogła ten wniosek urlopowy wypełnić
bez studiów i doktoratu
ale jak ja narysuję czy wy
że jest imię nazwisko
początek urlopu i koniec
to UX designer nie ma prawa tego zmienić
bo to są elementy działania systemu
on może te pola pokolorować
tam nie wiem może cuda wyprawiać
na pewno nie może dodać
albo usunąć pola
nie zapominajcie o tym
to znaczy że my
będziemy projektowali logikę
natomiast absolutnie nas nie interesują
kolory na ekranie
i ci projektanci ekranów
są bardzo ważni
tylko oni nie mają nic wspólnego
z logiką biznesową tej aplikacji
to jest tak samo jak książka
niektórzy twierdzą
proszę?
jak jest ta architektura HLD
no to nie musi być pełna nazwa
że aplikacja wspierająca prace bibliotekarza
architektura HLD
bo to jest połączone z aplikacją
wspierającą pracę bibliotekarza
bo dałem tylko nazwę architektury
znaczy usunąłem wszystko
i dałem architektura HLD
czy to jest dobrze
to znaczy pamiętajcie o jednej rzeczy
dlaczego poruszyłem ten temat
bo wy
projektując tą
tak naprawdę na tym etapie
projektant rysuje
my musimy pamiętać że to są komponenty
to za niedługo będzie tam gdzieś jakimś tam kodem
i teraz wy
to może być dla was
zła informacja
dlaczego ja poruszyłem problem tego
UX Designera
bo wy jako osoba
która robi te diagramy
wy odpowiadacie za zrozumiałość
tych diagramów
tylko że waszym adresatem nie jest user
a waszym adresatem jako projektanta
jest developer
i teraz
to jak my te komponenty nazwiemy
to jest właśnie element
jakości waszej
komunikacji
bo ja mogę
bo możemy sobie wyobrazić coś takiego
jest diagram przypadków użycia
i tam jest napisane
aplikacja wspierająca pracę biblioteki
możemy narysować
ten prostokącik
i narysować inaczej tylko HLD
problem będzie taki
że jak ta dokumentacja będzie miała
50 stron
50 nie 500 50
i ktoś
a dokumentacja aplikacji
to nie jest książka Harry Potter
że się czyta od dechy do dechy
tam po prostu będzie spis treści
i człowiek przyjdzie i mówi
ok ja bym chciał zobaczyć tą architekturę
no i on otworzy w środku
i zobaczy prostokącik HLD
to teraz on żeby zrozumieć
co to ok
i za nale czego
to on żeby zrozumieć jeden diagram
będzie musiał przeczytać prawie całą dokumentację
jak znacie programistów
będzie miał
wbudowany opór przed tymi kwitami
co ja doskonale rozumiem
to rada praktyczna dla was
starajcie się
nazywać te elementy
w taki sposób
żeby przeciętna małpa zrozumiała
w jakim jest kontekście
tak to tutaj
czy nie powinniśmy dopisać architektury
i teraz tak
tutaj nie musimy pisać HLD
bo ten komponent
to jest nasza aplikacja
high level design
mamy nazwie diagramu
i tam zostawiliśmy
bo gdzieś tam w dokumentacji
wyskoczy nam strona A4
będzie schemat blokowy
i on będzie miał tytuł
aplikacja wspierająca prace bibliotekarza
architektura HLD
i na tym schemacie blokowym
to znaczy że patrząc na jedną kartkę A4
macie i kontekst
i wiecie co jest w środku
bo taka
ogólna zasada
w ogóle w schematach blokowych
jeżeli się robi
algorytm, architektury, whatever
każdy schemat bloko
powinien być jakiś czytelny tytuł
ten tytuł nadaje mu kontekst
a na schemacie blokowym
są konkretne elementy
które chcemy pokazać
mamy jego tytuł
i tam w tytule jest HLD
czyli wiemy
że ten obrazek
to jest jakaś architektura HLD
i to jest architektura tej aplikacji
a na obrazku jest komponent
ta aplikacja się nazywa
bo zwróćcie uwagę
że jak włączycie komputer
kiedyś tam i wam wyskoczy ekran
to u góry będzie napisane
aplikacja wspierająca prace biblioteki
raczej nie spodziewam się napisu
architektura HLD
to jest po sieci Kowalska
i ona kliknie ikonkę
na pulpicie Windowsu
architektura HLD
osobiście nie sądzę
uczcie się
niezależnie od tego
czy ktoś to lubi czy nie
człowiek który pracuje w tej branży
niestety na pewnym minimalnym poziomie
musi się umieć
nauczyć się
w sposób zrozumiały
komunikować z resztą świata
nie możemy być wszyscy autystycznymi
zresztą w tej branży
jest chyba dość powszechne
po prostu musimy się komunikować z ludźmi
nie istnieje projekt informatyczny
w którym jeden koder
jest samowystarczalnym człowiekiem
na bezludnej wyspie
na środku Pacyfiku
ten człowiek nawet jak pracuje zdalnie
musi się z ludźmi komunikować
komunikuje się na wszystkie możliwe sposoby
czy się do komuś osadzi
to są fakty
UML wraca do łask
to są aplikacje które ma milion linii kodu
przecież jeżeli ja będę projektantem
i przede mną będzie deweloper
to są dwa wyjścia
ja mu na 50 stronach powiem
jak on to ma zrobić
i on mi napisze 1000 linii kodu
bo jak ja będę musiał ten kod sam napisać
to on mi jest do niczego niepotrzebny
ale zanim powstanie milion linii kodu
co będzie trwało 5 lat
ktoś powinien w ciągu dnia
dwóch, trzech tygodni
sprawdzić czy to w ogóle się kupy trzyma
bo lepiej się dowiedzieć po 2 miesiącach
że projekt jest bez sensu
niż po 5 latach
bo to dużo kosztuje pieniążków
dzisiaj ta branża ma problem potężny z kosztami
my się uczymy tego UML-a
nie po to żeby was tutaj pognębić
po prostu są dwa wyjścia
prototyp w kodzie to jest kwartał
prototyp w UML-u to jest 5 godzin
takie są proporcje
jak ktoś ma do wyboru
dowiem się czy to ma sens
jak wypłacę software house'owi
wynagrodzenie za 3 miesiące pracy
drugi scenariusz
dowiem się czy to ma sens
jak jednemu fajnemu studentowi VIT
zapłacę za 2 dniówki
jak się domyślacie
dzisiaj świat zmierza w tym drugim kierunku
coraz szybciej
no dobra mamy ten saga koordynator
jeszcze się naklepiemy tych obrazków trochę
no i teraz tak
wracamy do przypadków użycia
i teraz
zgodnie z wzorcem
tu po prostu postępujemy zgodnie z scenariuszem
każdy z tych bączków na ekranie
ma swój dedykowany komponent
aplikacja Visual ułatwia to
bo
my będziemy
jak takie projekty się rozrastają
to potrzebujemy po prostu jakąś
w miarę przejrzystą strukturę tego
i żeby się po tym łatwo przemieszczać
to tak troszeczkę jak w menu
mamy główne menu klikniemy
wyskoczy nam menu podrzędne
jak to jest rozbudowana aplikacja
to będą z 2-3 poziomy
ale to chodzi o to żebyśmy się łatwo
komunikowali między wyższym poziomem
a niższym
i diagramy w WMLu działają tak samo
jak się je robi
to trzeba troszeczkę za 2-3 razy
więcej kliknąć
przy odrobinie wprawy to się robi szybko
ale sama struktura projektu jest bardzo łatwa w obsłudze
i teraz tak
wyklikamy sobie 5 komponentów
klikamy prawym klawiszem na karty katalogowe książek
to będzie trochę automat
takiej pracy mała żmudna praca
zjeżdżamy na dół
powiązane elementy
wybieramy opcję przekształcić w nowy element
o to
dobra i tak powoli
typ elementu chcemy
z tego use case chcemy zrobić
na tym drugim diagramie komponent
to tam gdzie jest typ elementu
wpisujemy bo to taka wyszukiwarka jest
także żeby przekształcić w nowy element to gdzie to było
ja mam taką propozycję
koledze podziękujemy
pokaż swój ekran Michał Rymkiewicz
tak
jest okazja żeby zmienić tutaj prezentera
w ogóle tego okna nie widzę
kombinuj kombinuj
z Teamsami też se musimy radzić
z Teamsami też se musimy radzić
z Teamsami też se musimy radzić
z Teamsami też se musimy radzić
tam w udostępnianiu masz do wyboru
ekran albo okno
a
w Teamsy się zachowują trochę dziwnie ostatnio
musisz mieć
dopóki tego
wizuala nie otworzysz
na ekran
to nie zobaczysz go w udostępnianiu okien
nie wiem z czego to wynika
właśnie
na wierzch go wziąłem
kurcze chyba
o jest dobra jest
jest udało się
o mamy ok
no dobra czyli teraz tak
tutaj powiązane elementy
prawy klawisz na karty katalogowe
przekształć w nowy element
przekształć
tylko to nie jest na kartach katalogowych
przekształć nowy element
tylko to nie jest na karty katalogowe
nie nie nie powoli
powoli nie bo ty źle klikasz
kliknij z boku jeszcze raz
i powoli kliknij myszką z boku żeby to
by nie zniknęło
kliknij karty katalogowe
w przypadku życia
hmm
prawym klawiszem
na przypadku użycia masz podświetloną
aplikację cały czas nie wiem dlaczego
kliknij gdzieś z boku myszką
dobra kliknij prawym klawiszem
powoli powoli klikaj
pod moje dyktando nie
spróbuj wyścigów
kliknij gdzieś z boku żeby zniknęło to menu
dobra i to powoli
prawym klawiszem myszy
na tym bączku karty katalogowe książek
hmm
prawy klawisz
dobra wybieramy opcję na dole
powiązane elementy
teraz przekształć w nowy element
dobra to
u góry
typ elementów tam wpisujemy komponent
i wystarczy
to jest ten
klikamy
ok na dole zwróć uwagę że nam się
podpowiada wcześniejsze wpisane rzeczy
klikaj staraj się klikać po mnie
a nie przede mną bo znowu sobie
szkódne robisz
pojawił się wizual pomaga
trochę to dokumentować czyli jeżeli na poziomie
przypadków użycia
napisaliśmy że jest to usługa pozwalająca
katalogowe luna mam jakiś komentarz to
on teraz się podpowiada no bo to jest ta usługa
tak znaczy
nie
wadą wielu ludzi jest
taka ja to nazywam choroba relacyjna
z baz relacyjnych
nie ma żadnego obowiązku
usuwania redundancji to jest jedna z najgorszych
najgorszy nawyk w tej branży
a szczególnie przy dokumentowaniu
co my tu
mamy na ekranie mamy narysowane
u góry przekształcenie przypadku
użycia w komponent
on się będzie nazywał karty katalogowe
wizual ma taką samą nazwę
trzymamy się tego
to jest taka jeszcze jedna rzecz
dokumentowanie czegokolwiek odkurzacza
pralki samochodu czy aplikacji
pamiętacie że adresatem dokumentacji nie jest
autor
autor dokumentacji
nie jest jej adresatem
jak ktoś dokumentuje pralkę
to robi to dla klientów dla fabryki
nie dla siebie jak ktoś projektuje
aplikację to robi to dla reszty świata
nie dla siebie
dlatego unikajcie jak ognia
zresztą to są podobne zalecenia
jak w kodowaniu jeżeli jak ktoś mi
mówi że kod się sam dokumentuje
to pomijając że to jest bajeczka
ale jeżeli już adresatem jest inny programista
no to ja pamiętam jeszcze
no bo ja już od dłuższego czasu
na większą skalę nie koduję
ale jeszcze jak
kilkanaście już ponad
kodowałem
i dostawałem cudzy kod
to mnie krew zalewała
bo dostaje komponent
albo dostaje dokumentację pewnej firmy
system komunikacyjny jak się nazywa serwer
Sauron
co za idiota to napisał
nie mógł napisać
serwer pocztowy księgowości
tylko musiał wpierniczyć słowo Sauron
do nazwy w kodzie
nie wiem
czy jest coś głupszego
i teraz dostajecie milion linii kodu
autor tego kodu był entuzjastą
władcy pierścieni
i poza nim kompletnie nikt tego kodu
i architektury nie ogarnia
takiego człowieka należałoby ukrzyżować
wszystkie przyszłe pokolenia
powinny go po prostu ukrzyżować
gdyby jeszcze żył
nie róbcie tego po to są
wszędzie te 255 znaków na nazwy
żeby tam pisać
póluczku
pełna nazwa komponentu
pełna nazwa klasy
pełna nazwa
panie bo to dużo klepania
trochę jest
ale za pół roku sam nie będziesz rozumiał
co żeś pół roku temu napisał
wszystkie nazwy
praktycznie w każdym języku programowania
255 znaków to jest standard
używajcie tego
praktycznie
karty katalogowe książek
nie ruszamy tego
a nie
bo się komuś nie chciało pisać
a za dwa lata sam nie wiedział co to jest
makaron czy to jest książka
nie róbcie tego
po prawej stronie jest opis techniczny
to jest fragment
naszego
repozytorium
ok
tu nic nie musimy zmieniać
naciskamy ok na dole
i teraz kolejny ekran
ten ekran to jest pytanie
czy mam stworzyć nowy diagram
żeby ten komponent pokazać
czy istnieje już diagram na którym chcesz go umieścić
no myśmy sobie ten diagram przygotowali wcześniej
pamiętacie ta saga i tak dalej
wybieramy u dołu pokaż w istniejącym diagramie
i mamy
diagram komponentów
architektura HLD
widać
stawiamy tam ptaszka
szukaj
no i jest
minować go
niżej
diagram komponentów
i on się nazywa architektura HLD
to jest struktura
a jest tutaj
no i ok to pokaż
macie podgląd żebyście się nie pomylili
poszło
wstawiamy go do środka
u góry
bo będzie 5 u góry
w pionie
wracamy
przy tym komponencie
macie po lewej stronie taką czarną karteczkę
to jest informacja że jest komentarz
do tego diagramu
a po prawej stronie macie taką strzałeczkę w prawo
ta strzałeczka informuje
że można się z tego komponentu
przeklikać
na ten logicznie połączony element
bo tam myśmy coś przekształcili z
w
klikamy tą strzałeczkę
to jest metoda nawigacji po tych diagramach
klikamy to
i mamy tam przypadek użycia
no to klikamy go
to jest funkcjonalność
przypadek użycia
o to klikamy
zwróćcie uwagę że w ten sposób możecie się
w dowolnym
poruszać po tej strukturze diagramów
w realnym projekcie takich diagramów będzie
nie tak dużo
bo na przykład
standardowa dokumentacja
taka umlowa
pamiętamy że istniejących aplikacji
nie dokumentujemy tylko co najwyżej piszemy
tu fk tam z kadry i tak dalej
taka dokumentacja rzadko kiedy ma więcej
jak 100 stron poważnie
to nie są dokumentacje na tysiąc stron prozy
nie ma takiej potrzeby
identyczną rzecz robimy
lista życzeń tak klikamy
lista życzeń
prawym klawiszem
przypadek użycia lista życzeń i znowu
nadam dole powiązane elementy
przekształć nowy element modelu
znowu szukamy komponentów
jak wpiszesz tam
ta linia to jest wyszukiwarka
wpisz tam z palucha komponent
to ci się znajdzie
no i już poszło
znowu tu już nic nie zmieniamy
nazwa zostaje
komentarz który był zostaje
naciskamy ok
tu mamy znowu
tu nic nie ruszamy
bo wizual
wizual jest aplikacją
która jest stworzona
do możliwie
najbardziej efektywnej pracy
z takimi projektami
a wzorce projektowe
struktura repozytorium
to jest książkowa struktura
zaraz zobaczycie po lewej stronie
tutaj też nic nie
my tu możemy ingerować w to
gdybyśmy chcieli po swojemu robić
ale jak to się mówi im bardziej po swojemu
tym później gorzej
są oczywiście przypadki to ma sens
natomiast my się na razie uczymy standardów
czyli drzewo projektu od ogółu do szczegółu
ok
i znowu
wybierz tu już nam podpowiada
skoro jest diagram znowu architektura HLD
ptaszek pokaż
i ciach to
pod karty katalogowe książek
i znowu
wracamy do use case'ów
może być tą drogą
dobra
wypożyczenia znowu
prawy klawisz na wypożyczeniach
powiązane elementy
przekształć w nowy
znowu szukamy komponentu
to na początku jest trochę żmudnej roboty
w każdym
w każdej inżynierii to na początku jest żmudna robota
tylko to potem
to bardzo potem pomaga zarządzać całością
i znowu ok
tu też już nic nie zmieniamy
ok
wskazujemy ten diagram architektury HLD
pokaż
ustawiamy to pod listą życzeń
w środku
ok
i znowu wracamy do use case'ów
musimy te parę
rzeczy wyklikać
rejestr czytelników
wyklikujemy
dobra
przekształć w nowy element
szukamy komponentu
tutaj też znowu na dole ok
ok pokaż
pod wypożyczeniami
wracamy do use case'ów
komponent
ok
ok
ok
ok
ok
ok
ok
jest pięć i teraz tak
pamiętajcie nasze obrazki mają być ładne
na swój sposób jesteście takim designerem tych obrazków
proponuję zrobić tak
żeby to było w przyszłości
relatywnie łatwo czytelne
a żeby łatwo ustawiać układać
Te komponenty byłoby fajnie, by miały jednakową wielkość.
I teraz jak to powoli?
Jak sobie z tym poradzić, żeby było szybko?
Zaznaczcie te komponenty w środku, ale tylko komponenty.
Jak to zrobić?
Odklikać z boku, żeby nie było podświetlenia.
I teraz tak, trzymając klawisz Control,
jedna wersja, trzymając Control, wyklikujemy komponenty w środku.
Teraz tak, jak najedziecie myszą na ten największy, najszerszy,
to jest karta katalogowa, najeżdżamy na niego i po prawej są takie ikonki.
Druga od prawej to jest taka mała miniaturka szerokości.
Oto, klikamy to.
Nie rozwijamy tej listy, klikamy to.
Tak, poszło. Ułóż to ładnie, w pionie.
Te karty.
Kliknij z boku, żeby się odznaczyło.
I teraz ustaw te komponenty.
Troszeczkę je przesuńcie w prawo, bo my będziemy musieli pomiędzy kartę katalogową
książek, a sagę, wstawić jeszcze interfejs i tak, żeby tam było trochę przestrzeni.
I teraz, my musimy teraz tak, każdy z tych komponentów ma swoje API wewnętrzne.
Klikamy karty katalogowe książek.
To miniaturkę łącznika po prawej stronie u góry przeciągnij w lewo, tak między sagę, a
karty katalogowe, tak żeby między, no gdzieś tu, dobra może być,
puść mysz, wybieramy ten lizaczek, oto i podpisujemy API karty katalogowe.
I teraz tak to rozsuń, żeby to było czytelne.
O, szybko się uczycie.
Dobra, i teraz tak, saga koordynator będzie to API wywoływało.
Klikamy sagę koordynator i tą miniaturkę łącznika przeciągamy na ten lizaczek.
Na ten lizaczek, na API, dobra, puszczamy mysz, wybieramy, nie klikaj,
wybieramy tą strzałeczkę z literką U. W WML-u to U oznacza use, użyj.
I ona się automatycznie,
tam nie piszemy nic.
To, co macie na ekranie, w notacji UML to jest tak.
Karty katalogowe książek to jest jakiś wewnętrzny komponent.
Saga koordynator jest innym komponentem, który będzie wywoływał usługi.
To znaczy, że karty katalogowe udostępniają API,
API oferowane, a saga koordynator potrzebuje tego API.
Rysujemy to właśnie w ten sposób, że od strony kart katalogowych jest
lizaczek, on oznacza API oferowane, a ten kieliszek oznacza, że my chcemy
z tego skorzystać. Taka, wiecie, wtyczka i gniazdko, nie?
Identycznie łączymy pozostałe komponenty z koordynatorem.
Czyli najpierw musicie sobie wyklikać
interfejsy API, a potem podpiąć do nich koordynator.
Czyli jeszcze raz, lista życzeń, nie, nie, nie, pomoli.
Lista życzeń, jak się pojawi ta miniaturka łącznika drag and drop w lewo,
to, jak klikniesz raz, to ci wyskoczy to.
Kliknij z boku, żeby to zniknęło.
I teraz tak, lista życzeń, przytrzyma i ten łącznik w prawej stronie u góry.
Przyciskamy klawisz myszy i drag and drop.
Masz przy prawym górnym rogu, masz miniaturkę łącznika.
Oto drag and drop go w lewo.
Nie, nie, nie, w dół, każdy ma swoje API. W lewo, niżej, niżej, niżej.
No gdzieś tu, może być.
Wybieramy ten lizaczek i piszemy API życzenia.
Trochę możemy to, możemy być troszeczkę leniwi, ale nie aż tak.
To jest taki przykład takiego mojego małego lenistwa.
API życzenia i wystarczy, koniec.
Potem będą API wypożyczenia, API czytelnicy.
Parę ostatniego, drag and drop.
Kliknąłeś tylko raz.
Przeciągamy to na lewo.
I tutaj to samo, w lizaczek, API wypożyczenia.
Ja mam takie pytanie, czyli rozumiem, że
ta aplikacja byłaby zrobiona na mikroserwisach, bo jakby każda...
Tak, tak, to jest klasyka dzisiaj.
Powiedzmy, z czego to wynika?
To jest w tej chwili jeden z najskuteczniejszych wzorców projektowych.
Z tego względu, że jak wam się wydaje, bo to już widać teraz, tak?
Może może tak, połączmy teraz tą sagę.
Teraz tak, klikamy tą sagę, tak jak poprzednio, i ten łącznik
pociągamy na API życzenia, o to, na API życzenia.
Wybieramy tutaj ten, kieliszek można wybrać od razu.
To jest inna forma pokazania tego.
I łączymy tak, API koordynator, sagę, przepraszam, z pozostałymi API.
A ja mam pytanko.
Tak?
Od komponentu API biblioteki wyciągamy
klasę, która też ma się nazywać API biblioteki?
Czy API, API biblioteki?
No właśnie, teraz, no i teraz znaczy nie, API nie, nie, nie, API to nie,
tutaj nic nie robimy, oczywiście tu nie robimy nic.
Do tego jeszcze dojdziemy. To API biblioteki
wyjdzie na zewnątrz, przeniesiemy to później, bo...
A, bo tu się...
Coś się nie połączyło chyba.
Coś się tam nie połączyło, znaczy się nie, no generalnie to chyba...
Nie, nie, nie, jak tak, tak nie, coś poszło nie tak, chyba.
Odsuń tą listę rzeczy w prawo.
Może Ctrl-Z wezmę.
Powinno się...
Nie, bo tutaj jakoś tak zrobiono...
Powoli, powoli, nie, bo są, można, można, można to zrobić na dwa sposoby.
Jeżeli ciągniemy tą sagę na API, to
możemy, w zależności od tego, do jakiego poziomu myszą dojedziesz, to
Visual próbuje ci pomagać.
Pójdź teraz, mysz, i wybierz to U, użyj.
To jest bezpieczniejsza forma, bo wiecie, no Visual próbuje pomagać, nie jest to może
wielka sztuczna inteligencja, także te rysunki trzeba robić świadomie.
I teraz tak, tylko do dzielników, to API biblioteki zostawiamy.
Przeciągnij, troszeczkę rozszerz tą aplikację
wspomagającą biblioteki trochę w prawo, ten prostokącik, aplikacja, ten główny
komponent, aplikacja wspomagająca trochę w prawo, wystarczy, wystarczy, wystarczy.
Bo kolejna rzecz, którą będzie potrzebowali.
Pytanie do was.
Na razie tak, weź ten lizaczek API biblioteki, przenieś na prawą stronę API biblioteki,
i niech on tak sobie zostanie na lesie.
Otóż też, jeżeli chodzi o konwencję czytelności diagramów, to nie jest to reguła
stuprocentowa, ale generalnie ludzkich aktorów umieszczamy najczęściej po lewej,
bebechy aplikacji i te elementy integracji gdzieś tam, powiedzmy, po prawej, u góry,
raczej nie po lewej.
Pamiętajcie, że osoba, która jest projektantem,
niezależnie od tego, czy projektuje domy, czy projektuje aplikacji, powinna wiedzieć,
że to jest, to są schematy blokowe, to jest grafika.
Adresatem jest homo sapiens.
Tu macie taką właśnie robotę, podobno trochę jak UX designer.
UX designer to jest człowiek, który stara się, żeby te elementy były,
te ekrany były jakieś ergonomiczne, komunikatywne.
Wy macie identyczne zdanie.
Nie musicie być ekspertami od grafiki i psychologii ekranu,
ale powinniście mieć minimalną wprawę, może inaczej, jeżeli ktoś chce być
architektem, to musi się nauczyć rysowania.
Nie wiem, czy wam już mówiłem.
Jakie jest, pytanie, jaki jest najtrudniejszy
egzamin na politechnice warszawskiej, wrocławskiej?
Najtrudniejszy na całej uczelni.
Kto wie?
Rysunek techniczny.
Rysunek. Przychodzą ludzie na polibudę.
Całki mają w małym palcu.
Różniczki, fizyka, wzory piętrowe.
Na czym uwalił egzamin?
Na rysunku odręcznym, bo na architekturę startował.
Jak ktoś nie potrafi rysować, nie będzie architektem.
To mówię uczciwie.
Ktoś może być ekspertem od napisania
dziesięciu miliardów linii kodu.
Nigdy nie będzie architektem, jeżeli nie będzie potrafił na stronie A4
wyartykułować swojego pomysłu, żeby reszta software house'u zrozumiała.
Jak ktoś tego nie potrafi, niech zapomni, że będzie architektem.
No sorry, taka sytuacja.
Bo te obrazki mają być łatwo przyswajalne.
Ale muszą być precyzyjne, bo to jest rysunek techniczny.
To, co na tych zajęciach mamy, to jest rysunek techniczny w tej branży.
Dobra.
Wracamy do naszego projektu.
Pytanko.
Załóżmy, bo tak będzie, że karty wypożyczeń mają mieć datę wypożyczenia.
I jak się domyślacie, nie chcemy, żeby
bibliotekarka wpisywała to z paluszka, tylko żeby się samo robiło.
Skąd wziąć datę?
Z co strony?
To się ładnie nazywa środowisko.
Aplikacja ma środowisko.
Z reguły jest to system operacyjny.
Jak jest to wielki, to może być jakiś framework i tak dalej.
Ogólnie mówimy, że mamy środowisko.
Bo środowisko to jest goły system operacyjny, motory baz danych, port do internetu, dyski twarde.
Tam jest wszystko.
To znaczy, że my potrzebujemy środowisko.
Klikamy, żeby to pokazać.
Nie musimy modelować całego środowiska, bo przypominam jeszcze raz, środowisko to jest coś,
co wyciągamy z pudełka i uruchamiamy.
Windowsy, Apache, Linuxy, co by to nie było.
To są cudze produkty.
To są cudze pudła.
One po prostu są.
Osobną kwestią jest ich architektura, a to jest zupełnie inny projekt.
Bo człowiek, który potrafi zgodnie z instrukcją obsługi ustawić ten full stack,
to jest zupełnie inna bajka.
Mnie jako projektanta, czy nas w tej chwili, zwróćcie uwagę, że nas w tej chwili nie interesuje,
czy to będzie Linux, czy Linux.
Czy jakaś chmura, czy AWS, czy Azure.
Kogo to obchodzi?
Mnie interesuje, że istnieje jakaś rura.
Ja powiem data i dostanę.
Klikamy ten prostokącik, aplikacja wspomagająca pracę biblioteki.
I teraz dla odmiany, jak już się podświetli, okej, raz klikamy lewym klawiszem.
Jak się już, jak klikniecie, to tam znowu się pojawi ten, kliknij jeszcze raz.
Mamy to, powoli klikamy, słuchajcie.
Starajcie się nie klikać na tak eżelowo, bo będziemy robili to dwa razy dłużej.
Teraz dla odmiany klikamy raz tę miniaturkę łącznika.
Raz klikamy i pojawia się taki mały kwadracik z takim żółtym czymś.
To jest tak zwany port.
Klikamy to, dajmy mu nazwę środowisko, przesuńcie go w prawo.
Tak blisko prawego rogu, tak żeby, no okej, wystarczy.
I teraz tak, klikamy go i teraz ten, jak się pojawi ten, jak się pojawi ta miniaturka,
kliknij jeszcze o to i teraz tą miniaturkę łącznika do góry troszkę.
Drag and drop do góry. Jak do góry, to drag and drop, tak.
Do góry, do góry, wystarczy. Puszczamy myszkę i wybieramy teraz ten kieliszek, drugi od lewej.
Drugi od lewej. Drugi od lewej miał być.
Oto. I tam piszemy API środowisko.
Ten kieliszek w tej chwili reprezentuje całe API.
Możemy, będziemy się tam wspinali na mniej czy bardziej, na większe lub mniejsze wyżyny abstrakcji.
Generalnie to jest taka rura, do której możemy, my teraz tą rurą tam, do tych Windowsów i tak dalej.
Czyli gdybyśmy chcieli, i teraz troszeczkę teraz tak, ten prostokącik, aplikacja wspomagająca pracę biblioteki,
tak troszeczkę go w górę rozszerzmy, bo potrzebujemy troszeczkę miejsca nad koordynatorem.
No i troszeczkę, no wystarczy, okej. Klikamy koordynatora.
Saga koordynator. Dobra.
I drag and drop. Łączymy go do tego portu środowisko.
O tu. Puszczamy.
I tu wybieramy literkę, i teraz tak, może tak, bo tutaj jest, tu mamy do wyboru w WML-u dwa podejścia.
Możemy to połączyć zwykłą krechą.
Proponuję, możemy, co te symbole oznaczają?
Strzałeczka z pustym grotem, tutaj nie ma zastosowania, bo to jest generalizacja.
Używamy tego na modelach pojęciowych. Przypominam jeszcze raz, w WML-u od prawie 10 lat nie ma dziedziczenia.
Zwykła asocjacja jest bardzo ogólną informacją, że coś jest z czymś połączone logicznie, ale nie wiemy jak.
Staramy się unikać nadmiernych ogólników.
Rąbiki, pełny rąbik to jest tak zwana kompozycja. Używamy tego na niskim poziomie, rzadko tego używamy.
Pusty rąbik, to jest kompozycja. Pusty rąbik, tak zwana agregacja, już tego w WML-u nie ma.
Czemu jest w Visual-u? Bo wszystkie aplikacje tego typu są kompatybilne wstecz.
Czyli jeżeli ktoś zaczął robić swoją dokumentację, nie wiem, w 2000 roku i ma elementy, które były w WML-u,
no to nie będzie teraz tej całej dokumentacji prół, tylko będzie musiał sobie jakoś z tym żyć.
Natomiast w WML-u dzisiaj od 2015 roku nie ma dziedziczenia, nie ma agregacji do tego pustego rąbika.
Tak.
Natomiast linia z kółeczkiem, z plusikiem w środku, to jest tak zwane zawieranie się.
Tego związku używamy raczej, jeżeli chcemy na piechotę pokazać strukturę XML czy JSON-ów.
Też raczej tego tak nie robimy, będziemy stosowali raczej, to już widzieliście, diagramy struktur złożonych.
Jeżeli modelujemy architekturę, to są dwa wyjścia. Albo pokazujemy, że coś, że jeden element realizuje funkcjonalność drugiego,
i to jest to R, realizacja.
Ewentualnie piszemy, że ktoś coś czegoś używa.
Wybieramy tą strzałkę kropeczki z otwartym grotem, na dole po lewej, o to.
No i teraz tak tą kreskę, nie ma tam, nie piszemy komentarza.
Tak tą kreskę, zrób żeby było ładnie, o, zobaczymy co nasz kolega zrobi, tak.
Wyobraź sobie, że ten schemat powinien być czytelny dla twojej sąsiadki.
Zróbmy mały eksperyment. Znaczy teraz tak, zwróć uwagę, że przy środowisku nawet strzałki nie widać.
Przesuń tą strzałkę, kliknij tą strzałkę, przytrzymaj myszką gdzieś tą linię i troszeczkę ją, przesuń ją w dół.
W dół i w prawo, żeby była pod kątem prostym do tego środowiska. Jeszcze w prawo, jeszcze, jeszcze. No więc tak, okej, może być, tak.
No na przykład, na przykład, też nie wdaj tej strzałeczki. Możesz kliknąć to słowo środowisko, kliknij to, żeby się podświetliło.
Słowo środowisko kliknij. O i troszeczkę to przeciągnij w dół. Powinno się dać.
A, w takie słowo.
To już. Znaczy słuchajcie, uczcie się rysować dobrze i ładnie. Im brzydszy diagram, tym bardziej nieprzydatny.
Pamiętajcie, że książki w księgarni sprzedają się, bo mają ładne okładki. Nie zapominajcie o tym.
No dobra, czyli mamy teraz sytuację taką, w której już wiemy, że mamy te cztery komponenty. Coś mamy cztery, no było pięć chyba. Przesuń.
O nie, dobra. Mamy tak. Karty, lista życzeń, wypożyczenia, reszty linków. Dobra. I teraz tak. Chcemy tutaj jeszcze pokazać, że mamy,
my musimy z tych aplikacji zewnętrznych korzystne, tak? Przełączamy się na diagram przypadków użycia.
A przepraszam, będziemy mogli przerwę zrobić?
Właśnie też o tym myślałem. Słuchajcie, jest czterdzieści pięć, a my mamy jeszcze tam, jesteśmy tak mniej więcej w połowie. Dziesięć minut przerwy, okej?
Dobra. Widzimy się za dziesięć minut. Już możesz ekran zwolnić, kogo innego poprosimy, a widzimy się za dziesięć minut.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dzięki.
Dobra, wracamy. Chciałem tylko kawa zrobić, przepraszam.
Kto następny na ten, na ekran?
Mamy chętnego, czy nie mamy?
Halo, słychać mnie tam?
Słychać Pana.
Pomylałem przez chwilę. No dobra.
Artur Sosnowski, poprosimy.
Poprosimy Twój ekran.
Już...
Widać?
Tak.
Także, co my tu mamy?
Mamy ten główny
komponent koordynujący,
Saga Koordynator.
Na tym poziomie zakładamy,
że całe
środowisko jest sobie tam gdzieś.
Mamy jakieś hipotetyczne API do środowiska.
PAL 6, jak jest w tej chwili zrobione.
Każde ma w detalach swoje.
Niewątpliwie możemy się
do tego środowiska dobierać.
Na razie zakładamy, że to środowisko
to są
generalnie systemowe rzeczy.
Jest to też pewne uproszczenie,
bo tak naprawdę, żeby się dorwać
do zewnętrznej aplikacji, tak się musimy
przez to środowisko przebić.
Z uwagi na to, że te modele, które robimy,
to są takie modele,
że ten model nazywa się Platform Independent.
To znaczy, że my projektujemy logikę,
nie musimy znać szczegółów
nie musimy znać szczegółów
platformy, środowiska implementacji,
bo nie ma to w tej chwili znaczenia.
Musimy wiedzieć,
upewnić się,
że to będzie działało.
Czyli zakładamy, że jest jakieś środowisko,
które nas informuje o takich ogólnikach
właśnie systemowych.
Że to jest rodzina, że jakiś dysk twardy,
że jakieś coś tam.
Przełączamy się na diagram przypadków użycia.
Będziemy chcieli pokazać,
że mamy dostęp
do
wyszukiwarki ISBN,
do systemu FK.
Zaznaczamy tych wszystkich aktorów.
Proszę
obramować myszką tych wszystkich czterech aktorów.
O tak.
Zrobione.
CTRL C wystarczy,
bo będziemy, skopiujemy to do
ten drugi danym.
Teraz przełączamy się na diagram komponentów.
I CTRL V.
CTRL V.
Przesuńmy to w prawo od razu.
I teraz tak.
W wizualu standardowo,
zwróćcie uwagę, że tam się pojawiły takie literki
małe A u góry.
Co to jest? Otóż
po lewej stronie
macie repozytorium.
Rozszerz trochę to okienko.
Po lewej stronie
bo ci nie schowała nazwa.
Rozszerz. Po lewej stronie
tam gdzie jest ta struktura folderów.
Skrajny.
Jeszcze w lewo. Nie, nie. Po lewej stronie ekranu.
Jeszcze w lewo mysz.
Nie, nie, nie. To zostaw. Nie ruszaj tego.
Po lewej stronie ekranu macie
legendę symboli
i dalej rozszerz to okienko,
żebyśmy widzieli to repozytorium.
O dobra, wystarczy.
Rozwiń
opis techniczny aplikacji.
Tu się będzie powoli układała taka drzewiasta struktura.
Rozwiń aplikacja wspomagająca.
To jest nasz system.
Mamy te przypadki użycia. Mamy komponent.
Aplikacja. Rozwiń to.
Oto. Tak.
Po lewej stronie
mamy drzewiaste
repozytorium projektu. Od ogółu
do szczegółu. Najbardziej ogólnym
Najbardziej
ogólnym
diagramem, jednym, jest diagram kontekstowy
zwany przypadki użycia. Jest na szczycie
hierarchii. Potem w tym diagramie
mamy system, poszczególne przypadki
użycia i aktorów. Ten system
rozbijamy na architekturę HLD.
Potem będą jeszcze poszczególne komponenty.
Mamy tutaj, jeżeli karty katalogowe
książek gromadzą w sobie jakieś
informacje. Masz ten przypadek użycie
karty katalogowe książek. Rozwiń go.
W repozytorium.
Przeglądarka modelu to jest
repozytorium modelu. Niżej, niżej.
Masz bączek karty katalogowe. Ma plusik.
Rozwiń to. No i widzimy,
że tam pod spodem już jest jakiś formularz
karty, jakieś wymaganie i tak dalej. Tak?
Także to będzie nam po prostu ładnie
rosła ta struktura drzewiasta.
To bardzo pomaga utrzymać
porządek. Natomiast
my na diagramach właśnie się przeklikujemy
tymi malutkimi ikonkami.
Zwróćcie uwagę, że wszystkie komponenty
Saga Koordynator
jest komponentem dodatkowym.
Takim dodanym sztucznie. Tak?
Na tym wyższym poziomie tego nie ma.
Ale karty katalogowe książek,
lista życzeń to są komponenty
wyklikane z przypadku włożycia.
Więc one idą tą hierarchią od ogółu do szczegółu.
Te strzałeczki
informują nas, że istnieje element
nadrzędny lub podrzędny
i pozwalają nam nawigować
pomiędzy tym. Bo my możemy pomiędzy
tymi diagramami nawigować.
Czyli przełączać. Przełączać jest
od diagramu na diagram.
Przez tą miniaturkę,
której często używacie pulpitu.
Zwróćcie uwagę, że na diagramie mamy takie
pagoniki. Architektura HLD,
aplikacja wspomagająca.
To jest ścieżka do tego
diagramu od szczytu.
Jak na tych pagonikach u góry po lewej stronie
są trzy kropeczki. Kliknij to.
Nad diagramem są takie pagoniki z nazwami.
I po prawej.
Masz taki pagonik.
Architektura HLD, aplikacja
wspomagająca. Jest pagonik z trzema kropeczkami.
W prawo myszka, w prawo myszka.
W prawo, w prawo, w prawo.
Wyżej, w prawo.
To są te pagoniki.
Lewy ma trzy kropeczki. Bo ta ścieżka jest dłuższa.
Kliknij te trzy kropeczki.
To jest ścieżka do tego diagramu
od szczytu hierarchii
tej przeglądarki modelu.
Macie bez przerwy podgląd,
gdzie jesteście w hierarchii tego modelu.
Jest to bardzo wygodne narzędzie.
Bo wbrew pozorom
tych schematów blokowych
nie będzie aż tak dużo.
Będzie ich trochę,
ale to będzie raczej kilkadziesiąt,
a nie kilkaset.
Biorąc pod uwagę, że każdy ma swój kontekst,
ta dokumentacja będzie bardzo przejrzysta.
Słuchajcie, duże systemy,
mówimy o logice biznesowej.
Pamiętajcie o jednej rzeczy.
Jeżeli wiemy, że środowisko ma swoją dokumentację,
pomijamy go w tej dokumentacji.
Być może będziemy mieli
jakiś tam
high level design stack itd.
Jest to inna dokumentacja.
Myśmy na pierwszych zajęciach mówili,
o tzw. architekturze korporacyjnej.
Pamiętamy?
Nie korporacyjnej, tylko
heksagonalnej.
Przepraszam.
Zaraz sobie przypomnimy.
W takim razie.
Momencik.
Zaraz sobie
coś znajdę
szybciutko.
Moment.
I wam pokażę.
To na razie
ja na chwilę
przechwycę ekran,
ale tutaj bądź w pogotowiu.
Widać moją przeglądarkę?
Tak.
Popatrzmy.
Generalnie, jak się domyślacie,
mam więcej niż jedną grupę,
różni ludzie o różne rzeczy pytają,
jak będę o czymś mówił,
a wy mówicie, że nie, u nas tego nie było,
to mówcie od razu.
Architektura heksagonalna.
To akurat było na poprzednim.
To teraz tylko szybko.
Tak właśnie coś kojarzę, co chyba u was było.
To tylko wam pokażę, o co chodzi
z tym portem, który narysowaliśmy.
Szybciutko przywołamy rysunek.
Niech będzie ten.
To jest taki najbardziej przejrzysty.
Co to jest?
Otóż to, co my rysujemy w tej chwili,
to jest środek tego czerwonego.
Niewątpliwie istnieje to wszystko naokoło,
ale to jest coś, co my nazywamy,
będzie ta architektura,
będzie środowisko.
Nie musimy go znać.
Bo to,
którą drogą ja się dorwę do dysku twardego,
zależy od tego,
czy będą Windowsy,
Linuxy, AWSy.
Zwróćcie uwagę, że ta część
nie ma żadnego wpływu,
nie powinna mieć
na logikę biznesową tej aplikacji.
To się mówi logika dziedzinowa generalnie.
Bo to może być biznes,
to może być projektowanie aplikacji,
która steruje silnikiem samochodu
albo systemem ERP w jakiejś firmie,
biblioteką na przykład.
I mamy teraz taką sytuację,
że my to,
to są nasze porty
do reszty świata.
To, czego jeszcze nie ma,
od zera projektujemy bibliotekę.
Wszystkie pozostałe rzeczy są.
Kupiliśmy w pudełkach Windowsy,
Linuxy, umowa na AWSa,
obojętnie, to wszystko jest.
Ta dokumentacja
tego otoczenia
powstanie później,
jak już ktoś zdecyduje,
które środowisko to będzie.
Ale to, co jest w środku tego czerwonego,
nie ma prawa być od tego zależne.
Dzięki temu mamy możliwość
zaprojektowania aplikacji,
zanim wybierzemy środowisko.
Możemy jej logikę przetestować.
Jeżeli ta aplikacja powstanie
jako hermetyzacja
tego czerwonego,
to przeniesienie jej
do innego środowiska
staje się bajecznie proste.
Słuchajcie, żeby nie było,
że jestem gołosłowny.
Jak projektowałem system
obsługi całej Polonii na świecie
w 2017 roku,
on był fizyczny.
Wtedy na AWS-ie.
Ta aplikacja
obsługiwała strasznie skomplikowane
formularze, bo to były dotacje
i ich rozliczenia.
Ta aplikacja
udokumentowana
potem była przenoszona
do innego środowiska.
Z AWS-a, na którym to było w PHP,
potem to przenieśli do innego środowiska.
Skutek był taki, że
oni, mając dokumentację
taką, jaką właśnie robicie w WML-a,
w WML-u,
ona była aktualizowana.
To nie jest problem, żeby to aktualizować,
jak się ma sensowne nawędnie.
Oni tą aplikację po prostu napisali,
przepisali w nowym języku
w ciągu kwartału,
potem ją przetestowali,
zmigrowali dane. To było proste,
bo ta aplikacja nie miała bazy relacyjnej,
tylko dokumentową.
Migrowane były całe dokumenty w XML.
Ta migracja im zajęła po prostu jeden dzień.
I ta aplikacja dzisiaj funkcjonuje dalej,
pod inną nazwą. Ona już ma trzecie środowisko.
To jest cały czas ta sama logika.
Ta aplikacja, ta architektura
jest standardem dzisiaj.
To jest standard,
który pozwala na relatywnie łatwe,
szybkie migrowanie
i przede wszystkim utrzymanie i rozwój
nie kosztuje majątku.
To, co Wam powiedziałem,
gdyby ta firma,
która wyrzeźbiła te swoje 1 200 000 linii kodów
w Javie, zrobiła to dobrze,
to mieliby tą dokumentację,
gdyby komuś się nie chciało
to by tą aplikację odtworzyli
w kwartał, może pół roku
czy w rok góra z tej dokumentacji,
wybraliby sobie dowolne środowisko,
na przykład tańsze
i uruchomili ją.
A oni mają milion linii kodu
i nie mają nic.
Biorąc pod uwagę, że to było w Javie napisane,
w Javie Enterprise Edition,
to ta logika jest odtąd rozsmarowana
aż po tabele.
Dlaczego nie robimy tabel relacyjnych bez danych?
Bo one są poza tą czerwoną linią.
Nie chcemy żadnej logiki,
w bazie relacyjnej.
Ma być tutaj.
Mapowanie obiektowo-relacyjne powoduje,
że my stąd wysyłamy na przykład
całą kartę biblioteczną
i kompletnie nas nie interesuje,
czy ta karta będzie jasonem na dysku,
czy będzie zapytaniem SQL-owym
na 5 km do jakiejś bazy.
Nie interesuje nas to kompletnie.
Dlaczego?
Bo poza tą czerwoną linią
nie ma prawa być żadnej logiki biznesowej.
Ta architektura powstała
20 lat temu z kawałkiem,
żeby separować, unikać
takich zależności.
Jak aplikacja jest zaprojektowana zgodnie z tą architekturą,
zmiana środowiska to jest kwartał
pół roku, uwierzcie mi.
To jest po prostu jednorazowe przepisanie
w nowym języku kodowania
tego, co wy teraz w UML-u robicie.
W tego UML-a
będzie 50, 100, może 200 stron,
ale nie 2000.
To jest to,
co dzisiaj staje się standardem w projektach.
Mi czasami mówią studenci na podyplomowych
a myśmy tak nie widzieli
w żadnej firmie.
No bo robi to kilka procent firm.
Dlaczego? Bo to jest trudne.
Sami widzicie, że trzeba się tego nauczyć.
Ale to jest tak zwana przyszłość.
Od tego nie ma odwrotu.
Czy mamy wybór?
Powiem wam tak.
Nie, bo jeżeli programista trafi
do fabryki okrętów wojennych
albo trafi do fabryki pralek
czy samochodów,
tam wszędzie komputer w środku jest.
To on będzie się musiał nauczyć
czytać rysunki techniczne
tak samo jak spawacz.
Bo na początku ktoś, kto projektuje statek
albo lodówkę,
zrobi rysunki techniczne.
Część opisująca programator pralki
będzie w UML-u
i potem przyjdzie spawacz,
który zrobi bębel tej pralki
ze stali nierdzewnej.
Przyjdzie elektryk i podłączy standardowy silnik
i przyjdzie programista-koder
i on z tego UML-a zrobi komputer,
który się nazywa programator pralki.
Od tego nie ma odwrotu.
To się już dzieje od dawna.
Od tego nie ma odwrotu.
Na naszej uczelni dwa lata temu
w takiej grupie jak wasza
miałem trzech ludzi z Boscha z Niemiec.
Trzech Polaków stwierdzili,
że studia w Polsce będą tańsze.
Po co oni przyszli się uczyć tego UML-a?
Bo się dowiedzieli,
że dokumentacja techniczna silnika,
którą Bosch produkuje,
tam są sterowniki w trójsku silników
Dizla, ma być narysowana.
Tam nikt nie trzyma kodu źródłowego.
Jest rysunek techniczny opisujący silnik,
jest rysunek techniczny opisujący
zawory tego silnika
i jest rysunek techniczny w UML-u
opisujący logikę sterowania w trójskiem.
Która będzie w komputerze później.
I nie ma dyskusji.
No dobra, wracamy do naszego.
Czyli teraz wasz kolega z powrotem tutaj
z tymi swoimi ekranami.
To wszystko, co my robimy,
od jaką kategorię by to się
powiedzmy na rynku pracy kwalifikowało?
To jest analityka,
to jest analityka biznesowa,
to jest bycie architektem,
to jest biznes...
Wiecie co? Zaraz wam pokażę.
Zaraz wam pokażę, bo odpowiedź jest.
Być może ją nawet wam pokazywałem.
Dajcie mi sekundę, wam zaraz pokażę.
Ja sobie kiedyś skopiowałem
jedno z ogłoszeń,
taką wskazówkę firmy rekrutacyjnej w Stanach.
Dosyć świeża, bo to jest tam
sprzed dwóch, trzech lat.
To się nazywa
w anglosaskich dokumentach
Software Engineer.
Tu jest artykuł, macie na czacie.
W tym artykule,
bo on się zmienia.
Jak ten artykuł powstawał,
jak go pierwszy raz widziałem,
to tam był taki fajny rysunek poglądowy.
Oni go usunęli, bo tam w tekście
pozmieniali trochę.
Jak czegoś nie zepsuje oczywiście.
Sekunda.
Dobra, wkleiłem.
Otwórzcie sobie ten obrazek.
Macie na czacie?
Tak.
I co tam mamy? Zwróćcie uwagę,
że ten człowiek po lewej, to on nie koduje.
Ten człowiek po lewej
rysuje w OMR-u, on nie koduje.
No tak, tylko w Stanach to powiedzmy
są te Software Engineer pozycje,
ale w Polsce... Jeszcze raz?
W Stanach jest, są pozycje, że tak powiem
na polskich inżynierów oprogramowanych. Wiem.
A w Polsce chyba raczej nie ma.
Wiesz co, powiem tak,
jest mało,
ale to się zmienia powoli.
Bo niestety Polska, nie chcę powiedzieć,
że jest trochę zacofana,
bo nie,
ale faktem jest,
że jeszcze tego zbyt wiele nie ma.
Z czego to wynika?
Wiecie co, nie wiem, z powodów historycznych.
Czy to się zmienia?
Pierwsze zmiany są w przemyśle,
bo przemysł po prostu to wymusza.
Jeżeli to się zmienia, to to jest,
jeżeli ktoś chce być...
Ja pamiętam, i to nie jest jakaś
aż tak świeża sprawa,
bo...
To było, nie wiem, 8-9 lat temu,
jak miałem szkolenie z UML-a
w fabryce pociągów w PES-ie w Bydgoszczy,
to oni wtedy mieli pierwsze większe kontrakty
z Zachodem.
Głównie sprzedawali pociągi do Niemiec.
I tam była krótka piłka.
Tam gdzie są pociągi,
tam gdzie jest maszynista
i tam jeszcze parę innych rzeczy,
tam jest software.
Bo jak się domyślacie w tej chwili,
jak się domyślacie w tej chwili,
w pociągu, w autobusie,
w samochodach pewnie wiecie,
tam jest kupa software'u.
Każdy z tych elementów ma jeden, dwa, trzy komputery na pokładzie.
I tam jest krótka piłka.
Dokumentacja pociągu to nie jest kod źródłowy
komputera, który maszynista ma pod sobą.
Tylko są to rysunki techniczne.
Kół, kabiny,
rysunki tamtej całej architektury
wiecie i tak dalej.
I powinny być rysunki.
Proszę mi narysować jak ten software działa
w tej kabinie maszynisty.
Bo nikt nie będzie czytał 100 tysięcy linii kodu
tam nie wiem w C czy w J.
Nikt, nikt tego nie czytał, uwierzcie mi.
To jest mitologia, która krąży.
Zresztą to nie jest tylko problem w Polsce.
Bo to co widzieliście w Stanach,
nie tylko w Stanach, w Europie Zachodniej
są te stanowiska.
Nie są aż tak powszechne, a to się właśnie teraz zmienia.
Tak.
Sekundę, bo tutaj ktoś mnie atakuje w mailu
z Ubica. Moment.
Ja mam pytanie odnośnie tego obrazka.
Jeżeli mogę.
Tak, tak.
To pierwsze formal training, jak to przetłumaczyć
na polski w sensie
To znaczy się
jeżeli mówimy, znaczy to byśmy
mieli, ten formal training to jest w zasadzie
to są nasze studia inżynierskie tak naprawdę.
To co
w zależności od, bo to jest kwestia
systemu edukacji, tak.
Generalnie w języku angielskim
pojęcie training oznacza wszelką
wszelką zdobywaną wiedzę, tak.
Jeżeli mówimy o engineering degree,
jeżeli pada słowo, hasło degree
to znaczy chodzi o jakieś formy studiów.
Inżynierskie, czyli tamten
ichniejszy Baccalaureate powiedzmy
Master of Science to jest dosyć wysoko, tak.
Znaczy my w Polsce produkujemy tych
magistrów taśmowo, natomiast na zachodzie
jest to rzadki tytuł.
Przede wszystkim nie ma takiego
ciśnienia na zachodzie na posiadanie
studiów jako w języku
polskim rozumianych, tak. Słuchajcie
publikacje naukowe, grube książki
piszą ludzie, którzy mają
są z wykształcenia
inżynierami.
Magister, inżynier to już jest taki
okej, będzie na uczelni, będzie
trochę więcej teorii robił, być może
będzie startował z doktoratem.
Tam trochę to inaczej
wygląda. Natomiast nie zmieniając
dlatego raczej będziecie mieli w tej branży
szczególnie w zachodzie najczęściej
będziecie mieli wymagania na poziomie inżynierskim.
Studia inżynierskie
są to studia. Jak wam się
wydaje, co jest, co wyróżnia
studia czy wykształcenie inżynierskie
od
wcześniejszych form wykształcenia?
Jak wam się wydaje, co odróżnia inżyniera od ludzi,
którzy go jeszcze nie mają, nie muszą
mieć. Bardziej zaawansowane z
rozumienia dziedziny i
jakby większe,
bardziej szczegółowe
poznanie tej dziedziny.
Studia inżynierskie to jest pierwszy poziom
edukacji, który
uczy
abstrakcyjnego myślenia.
Bo jeżeli ktoś jest wymyślnikiem
i
jest, nie wiem, szefcem, świetnym
spamaczem, świetnym inżynierem, świetnym
coderem, tak? Programer tutaj.
To znaczy, że on dostaje
dokument, na podstawie
którego robi.
Inżynier jest pierwszym stopniem projektanta.
Programista. Zwróćcie uwagę, że
pomijając te stopnie wykształcenia,
jeżeli mówimy
o, taka magiczna granica
pomiędzy inżynierem, a
zresztą nie ma w tym żadnej ujmy.
Jest masa książek na świecie.
Ile razy spotkaliście się
z tytułem książki Software Classmanship?
Takich książek jest kilka. Jedna jest,
jedna z popularniejszych, tego,
Uncle Boba, jak on się nazywał,
Roberta Martina.
Software Classmanship, to jest
wymiosło. A to jest naprawdę
dobre, żeby pamiętać, że
w Polsce jest jakaś taka głupia
moda, że a, rzemieślnik, szef, to jakiś
gorszy gatunek człowieka. To jest absolutna nieprawda.
Żaden okręt nie powstanie
bez świetnych spawaczy.
Ale żaden okręt
nie powstanie bez projektanta okrętów.
Żaden drapacz chmur
w Dubaju nie powstanie
bez armii świetnych
chmurarzy, elektryków, nie wiem kogoś tam jeszcze.
Ale ten drapacz chmur jest najpierw
zaprojektowany na desce kreślarskiej.
Software wpada, znaczy dawno wpadł
w te rygory, tylko że kiedyś to była straszna nisza.
To się w tej chwili zmienia.
Faktem jest, że
w wielu projektach,
jeżeli już pytacie o to,
i ja się z tego bardzo cieszę, bo to znaczy, że
ludzie są bardzo stresowani tym też rynkiem pracy.
Słuchajcie,
na świecie znakomitą większość ludzi
w tej branży stanowią
administratorzy platform
i deweloperzy.
Na świecie jest bardzo mało projektantów
w tej branży.
Dowód bardzo prosty.
Ile razy spotykacie się w tej branży z UML-em?
Ja słyszę permanentnie,
nie UML to jest jakieś dziadostwo stare,
nikt tego dzisiaj nie robi, jedziemy tym kodem Agilem.
Okej.
Jeżeli ktoś by powiedział,
że w PES-ie jest tylko kod źródłowy
całego software'u w tym pociągu
i nie ma rysunków technicznych,
to byście go po prostu,
pewnie by was śmiechem zabił.
To jest niemożliwe.
Tylko, że kiedyś to było dzimdzianie w C
sterowniki pracy silnika spalinowego,
sterowanie, sterownik windy,
sterownik klimatyzacji w pociągu.
Teraz to wychodzi
na przykład wyżej już, tak?
Kolejna miejska rozdzielcza w pociągu
to jest ekran LCD,
a nie ruchome wskazówki.
Znaczy ten software,
komputer nie zastąpi tramwajów w całości,
ale przynajmniej elementy sterowania
to prawie na pewno.
Tylko, że tych elementów sterowania
nie są dwa,
tylko ze 20, a 30.
I jakbyście powiedzieli inżynierowi,
okej, nie, to spyta się was
taki inżynier w PES-ie,
czy tam, nie wiem, w fabryce samochodów,
za chwilę dojdziemy do tego,
jak to działa.
No to przyszedł Kowalski,
mówi tak, proszę pana,
tu jest rysunek techniczny tej tokarki,
a tu jest system wtrysku,
bo mamy wtryskarkę na produkcji,
a potem przychodzi człowiek,
a tu jest 200 tysięcy linii kodu,
bo księgowa używa systemu FK.
To ten ostatni wylatuje za drzwi
z całym szacunkiem.
Nikt tego nie będzie czytał.
Bo prezes zobaczył te rysunki techniczne
i zrozumiał, jak działa pociąg,
jak działa lodówka
i kompletnie nie ogarnia
głupiego systemu finansowo-księgowego,
bo ktoś zamiast mu przynieść 15 obrazków
przyniósł mu 15 tysięcy linii kodu źródłowego.
Panie, to jest kod, który działa.
Kogo to obchodzi?
To już generalnie przestaje ludzi obchodzić.
Nasze rekrutacje
mają jedną nieprzyjemną cechę.
Prowadzą je administratorzy platform,
ci full-stack deweloperzy.
No nikt z tych ludzi
nie będzie szukał gościa,
czy gościuby od UML-a,
bo on sam go nie zna.
Ale są projekty,
szczególnie te, które powstają od nowa
albo podnoszą z bagna jakieś istniejące systemy,
gdzie szukamy tego gościa po lewej stronie.
Słuchajcie, ta strona internetowa
celowo wam pokazuje stronę ze Stanów.
Znajdziecie podobne w Europie.
To nie jest przypadek,
to nie jest fobia nauczycieli akademickich
takich jak ja.
Zresztą ja na uczelni spędzam może
jedną czwartą czasu.
Reszta to są praktyczne projekty.
Ja nie koduję od 20 lat, słuchajcie.
Ja projektuję oprogramowanie
w UML-u.
Nie po to, żeby z tego generować coś.
Tylko, że taki projekt jaki wy robicie
jego można potem zrobić w czymkolwiek.
Będzie działał.
Bo pewne detale nie mają znaczenia
na logikę aplikacji.
Czy wy się teraz
uczycie wartościowej wiedzy,
bo ja was rozumiem, nie?
Pensja, znaleźć pracę, rynek pracy.
Powiem tak.
To jest pytanie na poziomie
czy warto się nauczyć
bardzo dobrze jeździć samochodem
albo czy warto robić cokolwiek
bardzo dobrze.
No po co ja mam być najlepszym szewcem w województwie
skoro mało kto wymienia zelówki
w drogich butach.
No owszem, mało kto, ale są tacy ludzie.
Jak już ktoś ma buty za 500 zł
to zapłaci za zelówkę 200.
Ja sobie kiedyś zupełnie przypadkiem
wyklikałem na Instagramie chyba
gościa,
który właśnie za 100-200 funtów
wymienia zelówki w butach.
Ktoś by powiedział, czy gościa pogięło?
Nowe buty kosztują, kurcze,
nie wiem, w Primarku będę kosztował 50 funtów, tak?
Ale na tym świecie są ludzie,
którzy noszą lepsze buty,
bo są trwalsze, bo są wygodniejsze,
bo mają jakieś tam zalety.
Nie dlatego, że są modne, tak?
Ja nie mówię o trampkach.
Słuchajcie, ja się dowiedziałem pół roku temu,
że na tym świecie ludzie,
tak jak to, że spekulują ludzie walutami
czy bitcoinami, to jest prawda.
Są to inżynierskie wersje trampek
po 8-15 tysięcy.
Normalne, chamskie trampki ze szmaty i gumy,
jak są ładnie zrobione, mają fajne logo,
to osiągają na giełdach tych
butów sportowych
ceny powyżej 10 tysięcy złotych.
No nie pytajcie mnie, z czego to się bierze.
A to już jest rynek spekulacyjny, tak?
Tak samo jak cena tam, nie wiem, waluty,
czy tam, nie wiem, czego jeszcze, obrazu.
Natomiast mówimy o inżynierii
i w każdej inżynierii jest taki malutki fragment,
ja mam coś jeszcze jednego wkleję,
ja mam coś jeszcze jednego wkleję,
to jest fragment raportu,
faktem jest, że sprzed kilku lat,
ale to się nie zmienia,
to się nie zmienia.
Gdzie ja to mam tutaj?
Zresztą być może go wam pokazywałem
przy innej okazji, ale nie zaszkodzi.
O,
to jest raport jakości,
nie wiem co tu jest,
raport jakości systemów informatycznych
i projektów w ogóle.
Robi go firma
Standish Group regularnie,
co tam, co 4-5 lat,
to jest,
ja mam raport, taki już publiczny,
sprzed,
gdzie ja go mam,
coś posiałem, mam nadzieję, że nie posiałem.
Jeszcze raz,
gdzie on jest.
To jest obraz tej branży,
natomiast wy, jeżeli się nauczycie tego robić dobrze,
oczywiście można to ćwiczyć lub nie,
to wpadamy w jakieś 5-6% rynku.
Coś posiałem.
I ja to sprzedam.
Mam taki,
taki folderek dla studentów.
I coś.
I wciel.
Jeszcze mogę zadać pytanie.
O, mam.
Już sekundę, żebym czegoś nie pomylił.
O, to jest,
to jest ten raport.
I teraz,
idzie, idzie, idzie, idzie, idzie, idzie.
Macie już obrazek, czy nie?
Tak.
To jest ta zielona kolumna.
Mówimy o tej zielonej kolumnie,
po lewej.
Zwróćcie uwagę, że przy średnich, dużych projektach,
to jest poniżej 10%.
To są projekty, w których tak naprawdę
używa się rysunków technicznych itd.
Także,
ta tabelka się nie zmienia od,
przynajmniej jak ja te badania śledzę,
do 20 lat, jest ta sama proporcja.
Powiem tak.
Ja kiedyś rozmawiałem, bo tutaj już,
jak już pewnie wiecie, mieszkam tu na wyspach,
konkretnie w Szkocji, rozmawiam z ludźmi,
to mi ludzie mówią, to się nie zmieni.
Na całym świecie będą ludzie, którzy kupują tanie rzeczy,
bardzo tanie.
Cytując takie trochę,
znaczy na niektórych obrażliwe,
po prostu na całym świecie będą ludzie,
którzy odżywiają się w McDonaldzie
i ci, którzy rzadko pójdą na dobry stek.
I te proporcje się nie zmieniają nigdy.
Nie będzie tak, że to, że dobry stek jest lepszy,
w przeciętnej restauracji,
jest trochę lepszej jakości jedzenie niż w McDonaldzie,
to my na tym świecie wiemy od dawna.
Natomiast nie jest prawdą,
że spada popyt na McDonalda,
bo nie spada.
Powoli nawet, ja wiem czy rośnie, nie wiem, nie spada.
W każdej branży jest to samo,
w branży informatycznej też.
Ta tabelka, którą macie,
jakość projektów informatycznych,
to tylko te proporcje się nie zmieniają,
ja jak śledzę, ponad 25 lat.
Cały czas to samo.
Jest tylko kwestia,
skąd się bierze zielona kolumna.
Zielona kolumna,
tam trzeba się dostać.
Trzeba naprawdę więcej umieć.
Trzeba trafić na rekrutację,
gdzie jest trochę wyższy poziom wymaganej wiedzy.
I właśnie macie tą,
ta tabelka wcześniejsza,
ten Software Engineer Programmer,
to jest właśnie fragment tego typu rekrutacji.
Nie robiłem badań
i nie potrafię wam powiedzieć,
czy w Polsce
ten Software Engineer
to na to jest duży popyt, czy nie.
Natomiast w Polsce
jest ładnych paru ludzi,
takich jak ja,
którzy od 20 lat nie kodują,
tylko projektują software w WML-u.
Ja nie jestem sam.
To nie jest tak, że poza Żelijskim
nikt nie ma takiego focha.
Przecież Visual Paradigm
to jest aplikacja,
której używa tysiące ludzi na świecie.
Takich jak ja i wy teraz na tych zajęciach.
Ja się bardzo cieszę,
że uczelnia kupiła wersję
z tego systemu wszystko,
bo mogę wam pokazać naprawdę poziom,
narzędzie, które jest na poziomie.
To nie jest jakieś Miro czy Dravio.
To jest potężny system,
którego ludzie używają,
to znaczy Toyota tego używa
przy projektowaniu samochodów
w tej części informatycznej.
Visuala używa na przykład Toyota,
nie wiem czy wiecie,
do projektowania software'u
i nie tylko.
Używa Boening przy części samolotów swoich.
Tylko mówimy o dwóch, trzech, czterech,
pięciu procentach ludzi na tym rynku
w tej branży.
Reszta koduje.
Gdybym miał na tą tabelkę patrzeć,
tą wcześniejsza,
ten software programmer,
to ten software engineer,
przy średnich, większych projektach
taki zespół deweloperski,
mówimy o tych ludziach,
którzy kodują tą część logiki,
nie mówimy o tych tam full stackach.
To jest jakieś od 10 do 40 ludzi
kwestia wielkości projektu.
Z 5-40 ludzi to my potrzebujemy
jednego, dwóch takich software inżynierów.
Takie są proporcje.
Mniej więcej.
I to nie są ci wszyscy specjaliści odklepania w Javie.
Niestety.
Z całym szacunkiem dla Javy, żeby nie było.
A a propos tej tabelki właśnie,
bo tutaj jest napisane,
że używają zaawansowanej matematyki,
a właśnie w sumie
bardziej mi się to kojarzy,
że programista musi opracować jakiś algorytm.
Wiecie co, to też...
Gdzie to może być właśnie aplikowane?
Przeczytajcie sobie cały ten artykuł,
bo tutaj są takie zdawkowe rzeczy,
ta zaawansowana matematyka itd.
Bierzcie pod uwagę,
że w przeciętnej szkole średniej
w Stanach Zjednoczonych
zaawansowana matematyka to jest poziom
przeczytania godziny.
Może nie aż tak.
Bierzcie poprawkę na to,
że paradoksalnie my mamy
w Polsce dosyć wysoki poziom edukacji.
Mówimy o edukacji podstawowej.
Niektórzy się w Polsce śmieją,
ale o co wy się uczycie
o tych tam bakteriach
w szkole itd.?
To może nie używamy tego na co dzień.
Tylko, że
w Polsce, jak się kogoś spytacie,
gdzie na Globusie są Stany Zjednoczone
i gdzie jest Australia,
no to jestem przekonany,
że z rzadkimi wyjątkami każdy uczeń podstawówki
wam powie bez problemu.
Zadanie,
jakbyście w Stanach Zjednoczonych
dodali pytanie, gdzie jest Polska,
to będą szukali w promieniu pięciu
kilometrów od swojego miejsca zamieszkania,
bo w Stanach są, nie wiem, pięć Warszaw jest,
są dwie wiochy zwane Polska,
ale bierzcie poprawkę na to,
że na Zachodzie ten poziom
powszechnej edukacji jest dosyć niski.
On strasznie spadł.
Przecież
w Internecie jest masa znartów,
typu chodzi facet, czy tam dziewczyna
z mikrofonem po Nowym Jorku,
po Chicago, czy po jakieś dziurze w Teksasie
i pyta się o jakieś rzeczy
z podstaw geografii
i ludzie pojęcia nie mają.
Wiecie jaka jest
najbardziej znana anegdota
w Europie a propos linii lotniczych?
Nie wiem,
czy macie świadomość,
ja już się dopytywałem, to jest prawda.
W Austrii
w porcie lotniczym jest specjalna
darmowa poczekalnia dla Amerykanów,
którzy chcieli polecieć do Australii.
Mnie nie odróżniają tego
kompletnie.
Także bierzcie poprawkę na to.
Ale pomijając już takie rzeczy,
które są lekko półśmieszne w tym momencie,
ten formal training
to są generalnie studia inżynierskie.
Jeżeli mówimy
o tym, to jest ważne,
skonceptualizowanie systemu,
to jest narysowanie
jego abstrakcji.
Software engineer jest architektem.
Należy narysować abstrakcję
działającego systemu.
W Stanach Zjednoczonych
pewnie słyszeliście, że tam masowo
tych ludzi zwalniają, to jest prawda.
Dlaczego?
Bo to jest nieprawdopodobne.
W tej chwili sponsorzy projektu
zauważyli, że to nie jest tak,
że na informatykę siano nie gra roli.
Nie wiem czy wiecie,
od dobrych 15 lat,
nie tylko już w Unii Europejskiej,
projekty informatyczne to są projekty
fix price, a nie czas i materiał.
Czas i materiał to jest piaskownica inżynierska.
Przetarg w Brukseli,
czy przetarg w Warszawie
to jest pytanie co zrobicie,
za ile i na kiedy.
Instytucje w ogóle nie podpisują umów,
co wy tam robicie, fajny software
i co to jest, jak skończymy to powiemy.
To jest piaskownica informatyczna.
My się możemy z tego śmiać,
ale na konferencjach Google'owych
Google robi świetną informację,
GoTo,
te konferencje robi,
są referaty na YouTubie,
Continuous Delivery,
konferencja organizowana przez autora
jednej z lepszych książek,
to tam referaty pod tytułem Agile Dad
to jeszcze tylko,
cytuję kolegę, który się wplącze po świecie,
mówi Jarek, to tylko wschodnia Europa
jeszcze robi te rzeźbienie patykiem w wodzie.
Większe projekty
są planowane.
Ale cały czas mówimy o dosłownie,
widzieliście, 5-6% projektów.
To są te projekty,
gdzie sponsor projektu powiedział
sorry, zanim zaczniesz
powiedz co zrobisz, ile to będzie kosztowało
i kiedy skończysz.
Jeżeli ktoś nie potrafi odpowiedzieć na te 3 pytania,
nie dostanie pieniędzy na projekt.
Oversee entire process.
To znaczy, że ktoś musi ogarniać całość.
To jest z reguły jedna osoba w projekcie.
Te metody naukowe
to
tak naprawdę UML jest zaliczany
do takich samych języków.
UML to jest notacja zbudowana
w 100% na logice i teorii zbiorów.
Jeżeli już ktoś chce drążyć temat.
Bo klasa, to jeszcze wam chyba mówiłem.
Ja więcej mówię o tym na wykładach
z grupą, która ma wykłady ze mną.
Klasa to jest klasyfikator,
to jest definicja zbioru.
Zbiorem jest zbiór wszystkich obiektów,
które mają cenę, brutto, netto
i numer buta prezesa.
A w matematyce to jest zbiór liczb parzystych.
To jest zbiór wszystkich liczb, które podzielone
przez 2 nie dają zera,
nie są liczbą pierwszą i są zielone.
A to czy to jest matematyka,
czy system RP, nie ma to znaczenia żadnego.
Naukowe metody oznacza,
że stosujemy naukowe metody.
Twardą logikę,
teorię zbiorów i przyległości.
Jeżeli dla kogoś
programowanie to jest tylko pisanie
powodu, który się wykona,
to jest oczywiście bardzo potrzebne.
Ale to jest za mało, żeby całość ogarnąć.
Ta zaawansowana matematyka
to jest przede wszystkim logika.
Przede wszystkim logika.
Logika i teoria zbiorów.
Zwróćcie uwagę, że tak jak rozmawialiśmy,
zaawansowana matematyka,
elementy ontologii,
jak już rozmawialiśmy wcześniej,
to wiecie, że
systemy informatyczne
bardzo rzadko liczą.
To jest porównywanie ciągu znaków.
Jak wam się wydaje,
ostatnio najsłynniejszy,
najbardziej śmieszny software pod słońcem,
czyli sztuczna inteligencja,
ChartGPT i tak dalej.
Jak wam się wydaje,
ile tam jest matematyki?
Ile jest matematyki w ChartGPT?
Kto ma pomysł?
Pół procenta, pięćdziesiąt, sto?
Dużo. Bardzo dużo.
Prawie zero.
Przecież prompty piszemy po polsku czy po angielsku,
a nie piszesz wzorów matematycznych.
To jest właśnie taka mitologia.
Tam prawie nie ma matematyki.
To jest software prosty jak konstrukcja cepa.
Widzieliście kiedyś detale sieci neuronowej?
To są sieci połączeń,
gdzie
na poszczególnych ścieżkach są różne wagi.
Możemy mieć jakiś prosty algorytm,
który się między tymi ścieżkami przemieszcza.
W większości przypadków
jest to zwykłe losowanie
albo losowanie skorygowane o wagę.
Przecież język,
to nie jest język mówiony,
nie ma nic wspólnego z matematyką.
W języku polskim mniej.
W języku angielskim
reguły gramatyczne to jest może
dwadzieścia procent języka.
Cała liczba to są idiomy i inne dziwne rzeczy.
W polskim też może mniej.
Tam nie ma żadnej matematyki.
Tam są miliardy wzorców
statystycznych
z odpowiednimi wagami.
Tam cała matematyka
sprowadza się do sieci
wektorowych ontologii
opisanej matematycznie
Matematyka sieci neuronowej
to z kilkastu na cztery.
Jeżeli bym o tej matematyce w ogóle mówił.
Tam nie ma matematyki żadnej.
Tu po prostu jest
miliardy tekstów
obrobionych statystycznie.
Jeżeli ktoś pisze prompt
kto żyje w Australii
a z tych milionów tekstów
wynika z tego, że o aborygenach
można powiedzieć to samo
ale na pięć różnych sposobów
to znaczy, że w tym chat GPT
maszyna losująca wam wygeneruje
z grubych kawałków
a maszyna losująca wam wygeneruje
daną wersję.
Jakbyście się kiedyś nudzili
to w pewnych odstępach czasu
dla chat GPT
zadajcie identyczne pytanie
i zobaczycie, że będzie o tym samym
tylko inaczej sformułowane.
To jest jedna wielka betoniarka
statystyczna.
Tam nic więcej nie ma.
Pół roku temu ukazał się fajny artykuł
do poziomu SSMR
co mówi, że to co nazywamy
sztuczną inteligencją
czyli te właśnie maszyny do pisania
typu chat GPT
to jest po prostu jedna wielka
zagregowana ignorancja.
Przecież jak wam się wydaje
na czym się uczy chat GPT?
Na milionach stron internetowych.
Jak wam się wydaje
jaki procent stron internetowych
od idiotyzmów na pudelku
przez jakieś idiotyzmy na Tik Toku
w miarę sensowne blogi
pojedyncze procent tekstów w internecie
ma naprawdę sensowną wartość naukową.
Pojedyncze procenty.
Z tego większość jest objęta płatnością
jako publikacje naukowe.
To znaczy, że chat GPT
ten cały LLM
uczy się na najgorszym szmelcu w internecie.
Znaczy na darmowej wiedzy.
Jeżeli tydzień temu
inna grupa studentów
próbuje mnie przekonać
poniekąd jestem dużo racji
że jak coś jest tanie to jest śmieciem
bo oni, bo wie pan
w szkołach informatycznych
za jakość trzeba zapłacić.
Okej, generalnie tak.
No to ja się pytam
okej, to od pół godziny
mnie przekonujecie, że dobry programista
że jakość i tak dalej
że za to się płaci.
To ja się pytam to jaką wartość ma
miliony stron darmowych tekstów w internecie.
No i zapadła na sali
tak zwana niezręczna cisza
bo to jest jedna wielka kupa szmelców.
Chat GPT to jest
i stwarza największy szmelc
z internetu
bo tylko ten darmowy.
Nie zapominajcie o tym.
Poszlibyście do lekarza, który
wydaje, albo sami sobie zrobili
diagnozę pisząc
medical chat GPT gdyby taki był
no gdybym miał katar
to może bym spróbował
ale nic więcej.
Także bierzcie poprawkę na to
że w każdej branży
jest masa mitologii wokół tego wszystkiego.
Ludzie narzekają na naukę
na tych akademickich tam jajogłowych
w każdej grupie ludzi
są ci, którzy są fajni
i są ci nie fajni.
Prawnicy są zawodem
zaufania społecznego
podobno tak?
Tak czy nie?
Adwokat. Fajny facet czy nie?
Fajna kobieta czy nie?
Adwokat.
A kim są prawnicy, którzy bronią
mafii narkotykowych
w całych Stanach Zjednoczonych i Ameryce Południowej?
To są też prawnicy przecież.
Oni kończą te same studia.
Bronią największych zbrodniarzy
na tej planecie.
Myślicie, że branża informatyczna
jest jakaś lepsza od tego?
W życiu.
W każdej branży znajdziecie
cały przegląd ludzkich charakterów.
Jak to mówią
nie ma świętych krów.
Nie ma świętych krów
i nie ma darmowych obiadów.
Pamiętajcie o tym.
Znakomita większość świata
odżywa się, no duża część,
w McDonaldzie.
A wy po tych zajęciach
ja wiem, że w knajpie ze stekami
trudno znaleźć pracę.
Tam jest ostra selekcja,
żeby nie było.
Każda branża ma to samo.
Idziecie na ulicę,
McDonald's, Burger King,
jakiś Greek,
tego jest cała masa.
Oni wszyscy szukają ludzi do pracy
i gdzieś tam na rogu
jest fajna knajpa, troszkę droższa.
Steki są, nie?
Dojrzewały dwa tygodnie.
W tej knajpie też niektórzy kucharze
znajdują pracę.
Jak się domyślacie to nie są ci,
którzy smaczą frytki w McDonaldzie.
Ja jestem tym typem,
który nie owija w bawełnę,
bo nie za to mi płacą.
Moją rolą jest was nauczyć z tego UML-a
i powiedzieć co was poczeka
jak pójdziecie na rynek.
Na żadnym rynku nie jest lekko.
U spawaczy też nie.
Przeciętny spawacz będzie spawał
płoty i bramy na wsi,
a elita spawa rury
w gazociągach
i statki.
Żadna nowość.
Tak jest od dawna na tym świecie.
No dobra, wracamy do obrazków.
Ale pytajcie o wszystko.
Jak tylko będę miał to powiem.
Także ja mam świadomość,
że prawdopodobnie wy
pójdziecie do roboty po tych studiach
i na 10 ludzi, 9 nigdy w życiu
nie zobaczył pracodawcy UML-a.
Jest takie zagrożenie, żeby nie było.
Ale słuchajcie, jesteście na tej uczelni
z własnej woli.
Ja was tutaj nie przyciągnąłem.
Zakładam milcząco,
że nawet jak tego UML-a
nie będziecie używali codziennie,
to przynajmniej jak was dopadnie,
to będziecie rozumieli co jest na was grane.
A jak będziecie mieli trochę farta
i trochę się spocicie, to być może
wystarczy.
Dobra słuchajcie, mamy jeszcze
coś do zrobienia.
Martin Szum, poprosimy ekran.
Oczywiście, już rucham.
Jeszcze chciałam zapytać,
to co robiliśmy do tej pory
przez ostatnie zajęcia, to bardziej
próbowaliśmy odpowiedzieć na pytanie,
co my robimy rysując ten diagram.
A teraz bardziej wchodzimy w szczegóły,
w jaki sposób mamy to zrobić.
Zajęcia na inżynierii
są najczęściej prowadzone przez wykładowców
w ten sposób, że najpierw mówimy
okej, po co my to robimy
i potem przechodzimy, jak to należy
dobrze zrobić.
To, czy będziecie się uczyli spawalnictwa,
projektowania okrętów, projektowania,
oprogramowania lodówek czy pralek,
samolotów, nie ma znaczenia.
Jakbyście poszli do szkoły lotniczej
na inżynierię, to najpierw się nauczycie,
dowiecie się, że są samoloty,
że mają skrzydła, że ptaszki
machają skrzydłami, że samoloty nie machają
skrzydłami, a pod koniec studiów
będziecie się uczyli projektować
silnik samolotu i dlaczego te skrzydła
są takie, a nie inne.
Naturalna kolejność, ale generalnie masz rację.
Tak to z grubsza wygląda.
I teraz, co my tu będziemy robili?
Bo na razie mamy fajny obrazek
i na razie jeszcze nic z tego nie wynika.
Na razie zostawimy sobie tych aktorów
i teraz tak, przypadek u życia,
każdy to jest
jakiś scenariusz.
I teraz my musimy
po co myśmy tą architekturę
zrobili?
Ta inżynieria,
jak każda,
wszystko się gdzieś tam przecina.
I teraz
do tej pory mówiliśmy o wzorcach
architektonicznych, na razie
jakbyście poszli na budowę
do architekta, to on wam powie, że tak,
jeżeli chodzi o domki jednorodzinne,
to są pewne zasady, na przykład
garaże są zawsze na parterze,
zlatka są podziemne.
Kuchnia najczęściej jest
na parterze. Jak wam się wydaje?
To jest pozornie dziwne pytanie,
jest bardzo informatyczne.
Dlaczego w domkach jednorodzinnych
kuchnia jest na parterze blisko wejścia?
Kto ma pomysł?
Z czego to wynika?
Bo normalnym zachowaniem człowieka
jest to, że jak wraca z zakupów
obwieszony reklamówkami z żabki,
to jedyne co myśli, to żeby wejść do domu
i zostawić te reklamówki w kuchni.
Bo jakbyście komuś zrobili
kuchnię w domku jednorodzinnym
na pierwszym piętrze, jeszcze za łazienką,
to by was znienawidził.
Bo musiałby przyjść do domu,
zdjąć buty, bo się upierniczył, bo deszcz jest,
i potem z tymi reklamówkami
zapierniczać na pierwsze piętro.
Znienawidziłby was, gdyby jakiś
architekt tak zrobił, będzie
najbardziej znienawidzonym architektem.
Pewne wzorce architektoniczne
wynikają, jak to się mówi,
z dekad, w branży budowlanej,
z setek lat doświadczenia ludzi.
Żeby przekonać kogoś, że ma sens
kuchnia na pierwszym piętrze,
to ja nie wiem, musielibyście jakąś tam
windę zamontować chyba przy wejściu,
żeby to miało sens.
I tak dalej, i tak dalej.
Wzorce architektoniczne, na przykład
Saga, to jest wzorzec lat osiemdziesiątych.
Od dawna wiemy,
jeżeli aplikacja jest skomplikowana,
ma wiele komponentów,
które dopuszczajcie do integracji
między komponentami.
Ja wam pokazywałem gwiazdę śmierci Netflixa i Amazona.
Oni właśnie puścili to na żywioł.
Zwróćcie uwagę, że
my tu mamy tylko pięć komponentów, sześć.
Jeżeli każdy by sobie chciał
po swojemu brać wszystko z zewnątrz,
od innych komponentów,
to każdy komponent musiałby mieć w sobie
pełną logikę biznesową.
To jest bardzo głupi pomysł.
A jeżeli powiemy sobie tak,
komponenty są specjalizowane,
widzą się nawzajem,
w związku z tym nie musimy martwić się
o integrację między nimi.
One mają wąską specjalizację
i jest koordynator.
Koordynator to są same scenariusze,
tam żadnej logiki nie ma.
Nie wiem, praktycznie żadnej.
Koordynator to jest taki kierownik budowy.
Sam nic nie potrafi,
ale kieruje pracą dwóch tysięcy ludzi.
Co prawda ma gumowce, bo jest błoto,
ale zawsze ma czyste rączki.
To jest wzorzec projektowy od tysięcy lat.
Człowiek, który zaprojektował
piramidy albo katedry katolickie,
nigdy w życiu nie miał
w łapie kamienia.
Jak ja słyszę w internecie,
jak ktoś nie koduje,
cytuję faceta z Francji,
dyskusja o architekturze,
jak ktoś nie koduje i mówi o informatyce,
to jest klaunem.
Nie tylko w Polsce są tacy idioci.
Poza Polską też.
I tam ktoś go pyta.
To jest książka z algorytmami.
Ten facet, który tę książkę napisał,
nigdy nie kodował.
To on jest tym idiotą.
Bo ten facet nie koduje.
A napisał algorytmy bardzo skomplikowane.
Nie tylko na pierwiastkowanie,
ale na produkcję.
On nie kodował.
To on jest tym głupim klaunem,
w opinii tego kodera.
Nie słuchajcie takich ludzi.
To są koszmarne brednie.
Jeżeli ja słyszę, że ktoś,
który nie koduje 15 lat,
nie ma prawa projektować software'u,
to jest 15 letnie dziecko
i prawdopodobnie jeszcze z tych kapci nie wyrósł.
To jest kompletna brednia.
To jest kompletna brednia.
No dobra, lecimy.
Klikamy przypadki użycia.
Zaraz coś zobaczycie.
Klikamy przypadki użycia.
I teraz tak.
Robiliśmy formularz
dla kart katalogowych.
Klikamy karty katalogowe.
Prawy klawisz.
Otwórz szczegóły.
Klikamy diagramy.
Mamy formularz karty.
Formularz jest nośnikiem danych.
Kliknij w tę
miniaturkę pulpitu
po prawej stronie u góry.
Przełącz się na diagramy.
Tam u góry masz strukturę.
U góry masz taką linijkę.
Brawo, brawo.
Diagramy, dobra.
Diagram struktur złożonych.
Mamy na razie jeden.
Żeby ustalić komunikację między aplikacjami
będziemy potrzebowali kilka.
I teraz zobaczymy jak się projektuje
taką logikę aplikacji.
Bo na razie mamy architekturę.
Tak jak wasza koleżanka powiedziała
próbujemy zrozumieć zjawisko.
Dobra, wracamy do przypadków użycia.
I teraz rzucimy się na wypożyczenia.
Klikamy prawym klawiszem wypożyczenia.
Prawy klawisz, otwórz szczegóły.
Nie mamy diagramu żadnego.
Klikamy na dole dodaj.
Dodaj nowy diagram.
Na dole dodaj.
Dodaj nowy diagram.
Szukamy diagram struktur złożonych.
Następny.
Zmieniamy mu nazwę na
karta wypożyczenia.
A i na początku dodaj słowo formularz.
To jest taka konwencja, bo
tych diagramów UML-owych
docelowo może być więcej.
Żebyśmy wiedzieli z grubsza co jest grane.
One mają z reguły, jest jakiś taki
przyjęty system, że to jest jakiś
formularz, że jakaś logika, że repozytorium.
Do tego jeszcze dojdziemy.
Otwieramy teraz.
Na dole mamy otwórz.
I teraz tak.
Klikamy z legendy klasa.
Rysujemy fajny
taki większy prostokącik na środku.
Piszemy formularz
karta wypożyczenia.
I teraz z uwagi na to,
że generalnie
nie tylko w UML-u jest wszystko klasą.
Tylko my musimy wiedzieć, że ta klasa
to jest fragment kodu, który
jakąś mądrą logikę robi, a inna klasa
reprezentuje strukturę XML-a,
JSON-a. Generalnie będziemy mówili o formularzach.
To znaczy, to jest JSON czy XML nie ma znaczenia.
Klikamy na tej nazwie prawym klawiszem.
Prawy klawisz, stereotypy.
Przejeżdżamy do
edytu i stereotypy. A mamy.
I wybieramy dokument. Przepraszam, bo już mamy.
Zapomniałem. I wybieramy dokument.
Otóż w UML-u
w ogóle w branży pojęcie
dokument oznacza jakiś ciąg znaków.
To jest dokładnie
taka sama definicja jak w ustawie.
Mamy w ustawie dokument.
Konkretna,
jakiś tam zestaw danych niosących
treść, mających określoną
strukturę, bla, bla, bla. Tak z pamięci
cytuję ustawę. Dokumentami
i teraz nie ma znaczenia,
czy my jakiś ciąg znaków
przesyłamy przez API między aplikacją
A i B, czy my go przesyłamy
z aplikacji na ekran, bo homo sapiens
trzeba by przeczytać. To jest dokument.
Każdy ciąg znaków
będący dla nas jako
ludzi lepiej lub gorzej zrozumiałym tekstem
to, czy to będzie formula,
czy to będzie proza, nie ma znaczenia. To jest dokument.
Generalnie dokument to jest
treść, którą my jako ludzie
znamy, rozumiemy, przetwarzamy, whatever.
Na razie
czy my teraz musimy znaleźć, znać
struktury tej karty wypożyczenia?
Nie musimy. Wracamy do przypadku
użycia.
Prawy klawisz wypożyczenia.
Prawy klawisz wypożyczenia.
Prawy klawisz wypożyczenia.
Otwórz szczegóły.
Otwórz szczegóły.
I teraz klikamy scenariusz.
I teraz klikamy scenariusz.
Na tym etapie, na dole macie taką literkę,
zmieniamy ten scenariusz
na nowe wypożyczenie.
na nowe wypożyczenie.
I teraz
I teraz
to jest ten etap,
kiedy ustalamy, my jako projektant
z naszym sponsorem
z naszym sponsorem, jak to ma działać.
No i załóżmy, że tak.
Przypadki użycia zawsze są
inicjowane przez aktora.
Bo pamiętamy, że przypadek użycia to jest usługa,
którą aplikacja świadczy nam.
Czyli ja jako aktor
klikamy teraz tak.
Wchodzimy tam w scenariuszu,
macie pierwszą linijkę.
Na przykład prawy klawisz
na przykład prawy klawisz
dodaj aktora
wybieramy z listy
i ok.
Otóż
Visual jest tak skonstruowany,
że nie tylko robi te śmieszne obrazki,
ale generuje perfekcyjną dokumentację.
Zresztą fragment widzieliście.
I teraz chodzi o to,
że jeżeli mamy
100 stron dokumentacji
i nikt jej nie aktualizuje
to prawdopodobnie dlatego, że jest to bardzo pracochłonne.
Visual Paradigm to jest taki
to jest aplikacja taka jak
nie wiem czy wiecie
fabryka samochodów, okrętów, czy tam nie wiem pralek
nie ma takich systemów cut-cam
wiecie te rysunki 3D
jakieś tam przekroje się generują itd.
Po co to jest?
Bo praca, dawno temu inżynier
jeszcze jak ja byłem w techniku
to wiecie deska, papier, piórko
ja te wszystkie rysunki musiałem tymi rękami
z linijką, z cyrklem
benedyktyńska robota
i tak była robiona
bo rysowanie maszyny górniczej
bo ja jestem po technikum górniczym
rysowanie maszyny górniczej
to jest produkowanie na próbę
w tamtych czasach nie było Agile'a
i pewnie nie będzie w tej inżynierii
w związku z tym
branża informatyczna
potrzebuje identycznego narzędzia
i te narzędzia mamy od lat 90
to się nazywa CASE, to już wiecie
Computer Aided System Engineering
to znaczy, że te nasze schematy UMLowe
to jest odpowiednik tych rysunków 3D
samolotów, pralek itd.
Narysujemy jedno i ten mówi tak
ja poproszę rzut z lewej strony
na zdjęcie Czary Mary mamy rzut z lewej strony
a dlaczego mamy ten rzut?
bo jak mamy jeden porządny model
to my go możemy potem wirtualnie kroić
w pionie, w poziomie, rzuty, kolorować
visual to jest to
pracownik i teraz tak
chcemy napisać, pracownik biblioteki
inicjuje opcję
piszemy inicjuje opcję
domyślam się, że w menu
prawy klawisz
przypadek użycia
dodaj przypadek użycia
i wypożyczenia
Enter
trafić odpowiedź
specjalny znak, klikamy to takie żółte po lewej stronie
takie słoneczko żółte
wybieramy odpowiedź systemowa
i piszemy
wyświetla
prawy klawisz
dodaj klasę
to okienko to jest wyszukiwarka
wpisujemy tam formularz
słowo formularz
no i teraz jak rozwiniecie ten opis techniczny
to jest proszę nie tak
klasa
jak rozwiniecie
i wpiszesz tą wyszukiwarkę
ta wyszukiwarka ogłosi tak jakby filtr
i teraz rozwijaj
to ci się pokaże tylko to co jest formularzem
wypożyczenia, formularz w kartach wypożyczenia
odklikujemy ten formularz i ok
poszło
Enter
znowu prawy klawisz pracownik biblioteki
wprowadza dane
do
formularz
karty wypożyczenia
możecie sobie piętro wyżej
ją zrobić copy paste jak ktoś chce
zaznacz całe
a pracownik biblioteki to gdzie był
jak się wchodzi
jeszcze raz
a dodaj
jeżeli chcecie wstawić
pamiętajcie że visual jest tak skonstruowany
że jeżeli chcecie gdziekolwiek w tekście
użyć nazwy
diagramu elementu na diagramie
to nie piszemy z palucha
tylko nazwy tych elementów
wyklikujemy sobie prawym klawiszem
jeżeli ktoś chce napisać o formularzu
karta wypożyczenia
to nie pisze z palucha karta wypożyczenia
czy tam pracownik biblioteki
tylko wyklikuje, że istnieje
na jakimś modelu diagramie
element nazwany pracownik biblioteki
i to jest jego nazwa
jaki jest efekt, no efekt jest taki
przejdźmy do diagramu przypadków użycia
a formularz karta wypożyczenia
to gdzie jeszcze raz
on jest klasą
to jest klasa
a
generalnie w WMLu
praktycznie wszystko jest klasą
szczególnie komponenty, formularze obojętnie
komponenty to są też klasy
tylko taki wyższy poziom strakcji
zróbmy taką rzecz
prosty eksperyment
przełączamy się na diagram przypadków użycia
i
przypadek użycia wypożyczenia
zmienimy mu nazwę
na obsługa wypożyczeń
ok
i teraz
klikamy prawym klawiszem
do scenariusza próbujemy wrócić
otwórz szczegóły
scenariusz
widać
jeszcze raz
jak się to robiło
zmieniliśmy
gdzie się zgubiłeś
może tak
wróciłem do funkcjonalności aplikacji
tu
i co dalej?
diagram przypadków użycia
to jest fragment naszej dokumentacji
to nie są obrazki
w takich aplikacjach jak visual paradigm
ten element jest w repozytorium
po lewej stronie tam jest
zwróćcie uwagę, że macie tam przeglądarkę
po lewej stronie macie przeglądarkę modelu
macie przypadek użycia
obsługa wypożyczeń
to jest dokładnie to
proszę kliknąć obsługę
wy tego nie róbcie
kliknij obsługa wypożyczeń
prawym klawiszem
w nazwie
dodaj na końcu trzy xy
w nazwie
ok
co się stało na diagramie
zaktualizowało się, nie?
kliknij prawym klawiszem
otwórz szczegóły
ok
zaktualizowało się, nie?
a teraz mamy to na ekranie
przejdź myszą znowu
na przeglądarkę modelu
obsługa wypożyczeń
prawy klawisz, zmień nazwę i wywal te xy
czy teraz wyobraźcie sobie
że macie dokumentację na 100 stron
i wyobraźcie sobie
że robicie to w Wordzie
z pomocą Miro czy Dravio
ktoś wam powiedział
że zmieni nazwę opcji w menu
to wy teraz musielibyście
w tym Wordzie
przejechać się przez 100 stron
zaktualizować wszystkie teksty
i diagramy
to jest benedyktyńska robota
biedna robota
biedna robota
dlatego dokumentacje robione w Wordzie
i podobnymi metodami
bardzo szybko przestają być aktualizowane
bo to jest kupa roboty
której nikt nie lubi
takie aplikacje jak Visual
powstały po to, żeby projektowanie
i zarządzanie projektem
nie było robotą na grube noce
to jest problem też
przecież po co w fabryce tramwajów
mamy taki system CAD CAM
no dokładnie z tego powodu
w fabryce pociągów
czy w Newagu
powiedzieli, że mają przy każdej modyfikacji
zaktualizować ręcznie na papierze
10 tysięcy stron dokumentacji technicznej
to w latach 80-tych tak się działo
a dzisiaj by was wyśmiali
jakbyście powiedzieli
w fabryce pociągów
że oni tą dokumentację
systemu informatycznego sterującego
kabiną motorniczego
to oni mają teraz ręcznie w tym Wordzie
to by was wyśmiali
ale jakbyście powiedzieli, że tej dokumentacji nie będziecie robić
to by was wyrzucili z pracy
a propos tego
gdzie się używa UML-a
no w Boeingu się używa od
2008 roku
ale nikt nie robi żelowo samolotów
nie
mamy ten scenariusz, lecimy dalej
pracownik wprowadza dane do formularza
i dopisujemy na końcu i naciska OK
trzecia linia na końcu i naciska OK
my teraz opisujemy
jak ta aplikacja będzie działała
tak żeby zrozumiał każdy użytkownik
nawet gdyby był prezesem fabryki Pampersów
Enter
piszemy co zobaczy użytkownik
naciśnie OK
no zobaczy komunikat
PAR6 czy o błędach czy o sukcesie
i znowu wybieramy tym słoneczkiem
odpowiedź systemową
i piszemy system
wyświetla komunikat
ok
i koniec
zwróćcie uwagę
że to jest coś co zaskakuje wielu ludzi
otóż ciekawostka
praca z aplikacją
to co macie na ekranie
jest tak samo proste
jak dobrze zaprojektowane API
jest proste
ten dialog ma być prosty
nie dokumentujemy
że aktor
że kliknął myszką wybierz książkę
że kliknął
później
pola na karcie wypożyczeń
jak się wypełnia formularze ekranowe
mam takie pytanie
pierwszy raz w wyciu
wleźliście na przykład
na sklep internetowy
i wyskakuje wam formularz zamówienia
albo nie wiem profil użytkownika
i tam jest dużo pól
tak imię nazwisko miejscowość
adres wysyłki
jak wygląda scenariusz
takiej aplikacji
przecież nikt nie musi pisać
przecież jeżeli ja mam szablon
formularza profil
klienta
to dokumentacja wygląda tak
szanowny użytkowniku
czytelniku
tu masz na stronie A4
szablon formularza fajny obrazek
nie dużo pól imię nazwisko adres
widać ok
na drugiej stronie
jak ta aplikacja działa
to w bardzo prosty sposób
aktor czy tam user nacisnął
zamawiam albo rejestruj się
system wyświetla formularz
profil
użytkownika
użytkownik wypełnia formularz
naciska ok
system wyświetla komunikat
ale wiemy że istnieje kartka
na której jest mockup tego ekranu
jaki ma sens pisanie
aktor kliknął nowy profil
system wyświetlił formularz
aktor wpisał imię potem wpisał nazwisko
a potem wpisał swój adres
a jak go zapytają to jeszcze adres wysyłki
jest robota głupiego
po to robimy mockup ekranu
żeby nie pisać prozą
że jest 30 pól do wypełnienia
to jest kompletny idiotyzm
mówię poważnie tak
słuchajcie jak pójdziecie do normalnej roboty
do normalnej firmy gdzie jest inżynier projektant
to jakby zobaczył że ktoś prozą opisuje
kolejne pola na formularzu
to by was wyśmiał i z tej roboty wyrzucił
bo to kompletnie nie ma sensu
po to robimy mockup ekranu
żeby powiedzieć
user wypełnił profil
użytkownika co tam jest
panie 30 pól na tej drugiej stronie
są wszystkie z detalami opisane
nie piszemy prozą imię nazwisko adres
po co po to są te obrazki
żeby nie pisać
to znaczy że wy macie teraz przed nosem
kompletny scenariusz tego przypadku użycia
kompletny
bo istnieje diagram który jest treścią formularza
zwróćcie uwagę
że my nadal nie musimy wiedzieć ile tam jest pól
bo logika wypożyczenia
nie zależy od tego czy tam jest 15 pól czy 30
logika polega na tym
że umawiamy się że
formularz
karta wypożyczenia zawiera
wszystkie potrzebne informacje
co to znaczy pogadamy o tym jutro
żeby to narysować
bo my teraz chcemy zobaczyć jak ta aplikacja będzie działała
klikamy tam macie
takie małe ikonki u góry
klikamy tą trzecią od prawej
taka karteczka
klikamy tą karteczkę ze strzałeczką
i wybieramy synchronizuj z diagramem sekwencji
visual
na rybkę zrobił taki
podstawowy prosty diagram
to jest graficzna forma
to jest diagram sekwencji UML
troszeczkę aplikacja wspomagająca
osuń to trochę w prawo
tak żeby się tego napisy mieściły
co my tu mamy
diagram sekwencji
to jest taki specjalny diagram
który pokazuje co tam się wyprawia w środku
na tym poziomie jest taka czarna skrzynka
taki dialog actor system
na tym prostokąciku
aplikacja bo on taki jest skomasowany
jest taka zielona kropka u dołu
to bardzo przydatna kropeczka naciśnij ją
o i już
nie musimy ręcznie tych tam skalowania robić
otóż to jest dialog
pomiędzy aktorem a aplikacją
jako czarna skrzynka
ale my wiemy że mamy architekturę wymyśloną
mamy tą architekturę
i po lewej stronie w przeglądarce modelu
macie aplikacja wspomagająca
mamy taki komponent
aplikacja wspomagająca
rozwiń to
tym plusikiem
i my teraz wiemy że
na pewno jest koordynator
klikamy ten koordynator
i przeciągamy go na prawo
lifeline
wybieramy opcję lifeline
ta pionowa krecha w prawo go przesuń
on musi po prawej stronie
teraz tak
diagram sekwencji on pokazuje
w jakiej kolejności co się wydarzy
tutaj czas płynie w dół
ta przerywana krecha to jest tzw.
pionowa kreska komponentu
tzn. że ta pionowa kreska przerywana
ona oznacza dialog z tym komponentem
te poziome strzałki
oznaczają wywoływanie
operacji interfejsów
każda klasa ma operację
każdy komponent na API ma operację
no dobra
tu mamy tak
będziemy modelowali
bebechy
bo na razie mamy czarną skrzynkę
czyli tak
zaraz wam się wyjaśnię dlaczego
ten taki szeroki bar
na tej przerywanej kresce pionowej
jest taki szeroki bar
on oznacza konkretny wątek
czyli to jest taka jakby sesja
początek koniec sesji
przeciągamy ten bar
na tą drugą linię przerywaną drag and drop
już powinno załapać
poszło
teraz tą aplikację smagającą
wymalamy bo się zbędna
to wymalamy bez problemu
tak na wszystkie
będzie łatwiej
przesuń to w lewo
musimy szanować powierzchnię
wystarczy
i teraz my wiemy że teraz tak
no i teraz zaczynamy projektować
mamy architekturę
architektura z wzorca
no nie powiem że bez myśli
ale klepiemy tą architekturę HLD
klepiemy prawie jak małpy
inicjuje obsługę
okej to ten koordynator
powinien nam coś wyświetlić
i teraz bardzo powoli
bo tak musimy trochę miejsca zrobić
klikaj powoli reszta naśladuje
mamy kolejny taki mały bajer wizualny
u góry macie nad legendą takie coś jak kursor
taka ikonka kursor jest
po prawej stronie
tam przy tym kursorze
taki mały czarny trójkącik
klikamy go wybieramy opcję czyściciel
powoli
naprowadzasz mysze
między linie jedną i dwa
przytrzymujesz
lewy klawisz myszy
ciągnij w dół
wystarczy okej wystarczy
to jest takie narzędzie do rozpychania się
bo zamiast na sztuki przesuwać
te trzy linie to trochę roboty
to robimy taki myk
słuchajcie wizual jest bardzo ergonomiczny
jak ktoś nabierze trochę wprawy
no jak się domyślacie ja trochę mam
naprawdę rysowanie w tej aplikacji
jest poetycznie proste
i szybkie
dobra i teraz mamy tak
inicjujemy tą opcję
ma się pojawić formularz
skąd ja wezmę formularz karty wypożyczenia
który komponent odpowiada za
wypożyczenia a więc za karty
bo się musi komunikować
no API wypożyczenia
API wypożyczenia
wie wszystko o wypożyczeniach
a musi się komunikować
jak się komponenty komunikują z sobą
no te jasony wypluwają
komunikaty dokumenty
przeciągamy to API wypożyczenia na prawo
będziemy zawsze używali
lifeline będziemy używali API
bo to API tak naprawdę
komunikują się między sobą te interfejsy
te bebechy to tam później
natomiast tak klikamy ten bar
koordynatora
jak pojawi się miniaturka
rośnika przeciągamy ją na linie
API wypożyczenia
przeciągamy powoli
masz tam miniaturkę łącznika
nie teraz powiem jeszcze raz
powoli
cofnij się
dobra masz
musisz złapać tą miniaturkę
i ciągniemy w prawo na tą linie
i puszczamy
i tu piszemy
nowe wypożyczenie
tą pionową linie
poziomą przepraszam
klikamy
pozioma
dobra i piszemy
nowe wypożyczenie
ten komponent
przesuniemy to trochę do góry
tą strzałeczkę
a jeszcze jedna rzecz
żeby nam się automatycznie numeracja robiła
prawy klawisz na pustym miejscu gdziekolwiek
wybieramy
numer sekwencji
i zmieniamy na automatyczną aktualizację
jeszcze raz klikamy
to samo prawy klawisz
numer sekwencji
i wybieramy pojedynczy poziom
czyli tak
aktor kliknął tak naprawdę w menu
tak koordynator
koordynator mówi ty dawaj nowe wypożyczenie będzie
klikamy przy dwójeczce
przy grocie dwójki klikamy przy grocie
tam się pojawi taka strzałka
automatyczny poziom jak to się robi
jeszcze raz
numer sekwencji
jeszcze raz prawy klawisz na pustym miejscu
numer sekwencji
i ustawiamy automatyczną aktualizację
i pojedynczy poziom
a pojedynczy
a do
już dobra
będzie nam łatwiej rozmawiać
groc dwójki jak go kliknie
tam się pojawi taka miniaturka strzałki w lewo
klikamy o to
dobra prawy klawisz na tej strzałce
nic tam nie piszemy prawy klawisz
otwórz specyfikacje
argumenty
zjeżdżamy na do dodaj
element modelu
a jak mi się kliknęło
że argumenty wywaliłem to jak to się wcofnąć
jak wywaliłeś
bo tam jest krzyżyk w tym
w tej zakładce
dobra to zaraz ci pokażę
to zróbmy tak
wyjdź z tego
po prawej stronie
na wysokości tych fiszek jest taki mały trójkącik
oto kliknij to
znajdziesz tam argumenty
i sobie je wyklikaj
bo kliknij więcej
kliknij
tu masz wszystkie
znaj argumenty
to są wszystkie piszki już
dobra czyli tak jeszcze raz
argumenty dodaj
jeszcze przepraszam jak zrobiliśmy tą linię przerywaną
ten komunikat wrazujący
jak klikniesz
przy dwójce przy groczy jak klikniesz
pojawią się miniaturki
u kolegi już nie
tam być taka miniaturka
taka strzałeczka w lewo
tak dokładnie w tym miejscu
i ona ci się sama zrobi
czyli teraz tak na tej trójeczce
jeszcze raz prawy klawisz
to jest element modelu
no wy macie filtr
szukamy formularza
to muszę sobie rozwinąć
formularz karty wypożyczenia
ok
i ok
to znaczy że
moduł wypożyczenia
jak dostanie strzał nowe wypożyczenie
to on nam pusty formularz
proste nie
cały kompletny string
no to teraz tą czwóreczkę podciągamy
a jeszcze jedno
to jest ten moment
kiedy zakładamy
że na tym formularzu się pojawi data
nie
skąd bierzemy datę
środowisko
tak jest to szukamy
API środowisko po lewej stronie
albo środowisko nie pamiętam
mamy środowisko
a bo nie mamy interfejsu
jedno mi umknęło
przełączamy się na diagram
zmienimy to trochę
przełączamy się na diagram komponentów
na które się zagadałem z wami
trochę na skróty zrobiliśmy
i teraz tak
to co macie w tej chwili
mamy API środowisko
i ono jest
na zewnątrz komponentu
porty
nie są częścią aplikacji
one są na zewnątrz
on nie jest w środku tylko poza tym
wracamy na nasz diagram sekwencji
i API środowisko
jest
przejdź na przeglądarkę modelu
o tu
przeciągamy to na prawo
linia życia
i teraz koordynator tak
mam formularz
ale umowa jest taka
że datę to my wstawiamy
a nie user
łączymy koordynatora do środowiska
strzałeczką
pamiętacie jak?
w środowisku środowiska
piszemy data
klikamy przy grocie
to strzałeczkę powrotną
prawy klawisz
otwórz specyfikacje
i teraz tak
nie mamy bebechów
tego środowiska
dodaj
bo nie było takiej potrzeby
w związku z tym
wybieramy tekst
z palucha piszemy
i piszemy aktualna data
i zakładamy
a jak tą podszerowaną
jeszcze raz
jak klikniesz przy grocie
to pojawi się
miniaturka strzałki w prawo
i taka powrotna w lewo
jak ją klikniesz to ci się zrobi
zrobiło się?
a tak
dobra ok
czyli
nasz koordynator tak
idzie do pożyczki
dawaj mi ten formularz
mam formularz
i on teraz wie ok
na tym formularzu jest data
to bierzemy że środowiska
tą datę
i teraz chcemy narysować
że ten formularz
że ten koordynator
ten formularz
zaktualizował
musimy troszeczkę te 3
6, 7, 8 w dół przesunąć
a tam się dodaje tekst
czy element modelu
ale wiemy że jest
to jest takie uproszczenie
tam gdzie jest dodaj
tu wybieramy dodaj tekst
a nie element modelu
to jest nam potrzebne
z tego względu że my jesteśmy autorem
architektury tej aplikacji
ale my możemy nie znać
architektury środowiska
bo my nie wiemy czy to będą
Windowsy, Linuxy, AWSy
w związku z tym piszemy enigmatycznie
że środowisko nam zwróci aktualną datę
co zrobi deweloper
ok to my to wyrzeźbimy
w AWSie albo w Azure
a może w Linuxie
u mnie w Linuxie aktualna data
to jest brum brum brum
czyli jak wybierzecie dewelopera
albo wy nim możecie być
to tam się pojawi
prawdziwa nazwa
prawdziwego elementu
tego tam hipotetycznego jasona
czy tam czegoś
z tego środowiska które wybraliśmy
bo my robimy model platform independent
nie wiemy czy to będzie Windows czy Linux
ale wiemy że to tak będzie działało
troszeczkę tą czwórkę i piątkę do góry
teraz kończymy
nie wiem kończymy o wpół
czy piętnaście po bo ja już się pogubiłem
piętnaście po
ok dobra
to zaraz kończymy
i teraz ten nasz koordynator
musi ten formularz
bo teraz tak ten koordynator ma
ma tutaj ten pusty formularz
tu ma żółtą karteczkę data
i on teraz musi do kupy skleić tak?
klikamy raz tą ikonkę łącznika
o to raz
i tam jest na dole po prawej taki zawijas
na dole po prawej o to to wybieramy
ten symbol w WMLu oznacza
że tu się wykona taki chwilowo nowy wątek
i tam piszemy
napiszemy enigmatycznie uzupełnienie formularza
ok
czyli mamy tak
user przywalił obsługa wypożyczeń
system musi mu tą kartę
wypluć na ekran
czyli nasz koordynator idzie sobie
do wypożyczeń i mówi ty
dawaj formularz pusty
potem ty środowisko co tam dzisiaj mamy
no pierwszy kwiecień dawaj to
wkleił tą datę do formularza
a wie no wie bo na formularzu xml jest napisane
tu jest data nie
i jak już to skleił do kupy to pokazał na ekranie
formularz karty wypożyczenia
user wpisuje wszystko a datę ma wpisaną
nie może na nic zrobić dobra
dzisiaj przerwa kontynuujemy na kolejnych zajęciach
jakieś pytania na temat wypożyczenia?
jeszcze jeden moment
ja mam jedno pytanie
czy możemy
w sensie czy jest możliwość uczęszczenia
na wykłady z panem
czyli co nie ma problemu
wykłady są na mój stan wiedzy
wykłady są
otwarte
co najwyżej musicie to załatwić w dziekanacie
żeby wam wejściówka chodziła
bo na mój stan wiedzy nie ma problemu
żeby student przychodził na wykłady na jakie mu się żywnie chce
bo jak to się mówi jako studenci
płacicie za swój kierunek
i tak dalej
ale możecie jak macie czas
na inny wykład pójść
wykłady jak wiecie są
nawet nie ma obowiązku obecności
tylko że musicie to zgłosić w dziekanacie
bo wtedy w ubiku będzie dopisali
ale żeby w Teamsach
wam wskakiwały te uprawnienia
bo żeby przyjść na wykład na Teamsach
to musicie być w Teamsach w grupie
także na mój stan wiedzy nie jest to żaden problem
tylko musicie tą minimalną biurokrację
czyli w dziekanacie
żeby was dopisali do wykładów
ok dziękuję
jeśli komuś się to uda zrobić to też niech da znać
bo inni też wiem że próbowali
i co a coś nie poszło?
no z tego co wiem to tak
ale ja nie byłam jedną z tych osób więc tak tylko mówię
to wiecie co
może zróbmy tak
bo być może ktoś nie wie
ja nie jestem etatowym pracownikiem
tylko jestem takim wykładowcem z zewnątrz
faktem jest że 10 lat
ale nie jestem na etacie tylko jestem współpracownikiem uczelni
idźcie do dziekanatu
i jak wam dziekanat powie że coś ja muszę zrobić
bo być może ja muszę was ręcznie dopisać
dopuścić do tych lekcji na Teamsach
bo być może o czymś nie wiem
to mi dajcie znać
bo albo was dziekanat dopisze do listy
do grupy wykładowej
tak na mój rozum
a jeżeli z jakiegoś powodu nie
tylko będzie ok chodźcie sobie
tylko sobie z Żelińskim załatwcie żebym wam linki wysyłał
to mi o tym powiedzcie to sobie jakoś poradzimy
ok bo z tego co wiem
to na wykłady tak naprawdę
nie ma ograniczenia żeby wejść na wykład
bo gość można wejść z jakiegoś innego konta
można
natomiast właśnie to dziekanatu się spytam
czy mogą przypisać linki
żeby do mnie były wysyłane
a jak nie no to
to znaczy właśnie kwestia jest chyba z tym linkiem
bo gdyby was dziekanat wpisał
dopisał do grupy wykładowej
to ten link dostaniecie z automatu
a jeżeli dziekanat mówi że nie ma z tym problemu
ale link to sobie musicie sami załatwić
no to po prostu piszcie tak
piszecie do mnie
tylko teraz pytanie czy wy widzicie rozkład zajęć
tak możemy podejść
jeżeli wiecie kiedy ja mam wykłady
to po prostu
przed wykładem
tam na czacie dwa słowa
i ja wam będę odsyłał linki
ewentualnie spróbuję
tego nie robiłem być może mogę was
raz do tej grupy podpiąć
żeby już potem tego nie robić
słuchajcie nie ma problemu
jak będą wykłady to mi na czacie napiszcie
jaki był wynik rozmowy z dziekanatem
jeżeli to jest tak że to ja powinienem te linki wam wysyłać
to damy radę
ok dziękuję
coś jeszcze
to też są wykłady z tego przedmiotu
tak bo ja mam na uczelni
wykłady z UML i z projektowania
i mam laboratoria
natomiast wykłady z UML tak samo jak z BPMN na przykład
tylko że wykłady
znaczy uczelnia tak robi że nie zawsze ta sama osoba ma
wykłady i laboratoria
wiem że niektórzy wykładowcy nie mają laboratoriów
to jest kwestia czasu ludzi
to już nie do końca wiem
z czego to jest
jest tak jak widzicie
często się udaje uczelni
z tą samą osobą dla studentów
wykład i ćwiczenia
natomiast niektórzy mają wykłady
nie mają laboratoriów są takie grupy
bo to zależy od kierunku
na przykład na chmurze chyba nie mają laboratoriów
mają wykłady
natomiast wy nie macie ze mną wykładów z UML
a macie z kim innym chyba tak
tak nie mamy z UML
tylko ogólnie z inżynierii oprogramowania
a prawdopodobnie macie wykłady z inżynierii oprogramowania
ogólne i słusznie
macie laboratorium a nie macie samych wykładów z UML
no to możecie jak macie czas
i zdrowie to możecie się tam do mnie do klikać
z tego wiem co dziekanat nie ma z tym problemu
okej ja jeszcze mam jedno pytanie
tak
mnie interesuje ten temat bardzo
i czy byłaby możliwość zrobienia jakiegoś
zadania
pod koniec semestru
wiesz co z zadaniami to jest tak
wiem wiem wiem
wiecie co z zadaniami to jest tak
że to jest dosyć pochłania czas
i wasz i mój ja nie mam z tym problemu
tak ja jako wykładowca jestem dla studentów
natomiast jak się domyślacie mam też ograniczony czas
ale możemy tak
może zróbmy tak
jeżeli chodzi o jakieś ćwiczenia i tak dalej
to tak właśnie głośno myślę
bo nie jesteś pierwszy
ja dla studentów
to są otwarte informacje
a więc mojego bloga może czytać każdy
tam są dwa projekty
trzy projekty takie pełne
wiesz no biblioteka chyba też jest
ja wam go na następnych zajęciach wyślę
znaczy chcę żebyśmy go zrobili
razem po kolei
bo to jest tak
że jeżeli ktoś z was chce sobie
później coś tam poćwiczyć
to może zróbmy tak
dopóki mamy laboratorium
to pytajcie się o co wam wszystko
do głowy przyjdzie
bo to laboratorium jest dla was
tak że jeżeli ja mam jakąś tam wizję
na co poświęcam ile czasu
jak macie pytania
do innej części niż ta którą ja
że tak powiem uznałem za lepszą
to jest moje subiektywne odczucie
to pytajcie o wszystko
to jest moje zajęcie
ja mam kilka takich projektów
tylko na moim blogu jest już 800 stron
po 20 latach
i ja wam wyślę kilka przykładowych
takich gotowców
natomiast gdybyście chcieli nabierać wprawy
na przykład Visualu
bo na rynku jeżeli chodzi o aplikacje
z tych popularniejszych
to chyba w tej chwili
najpopularniejszą bo najstarszą aplikacją
jest chyba Sparx Enterprise Architect
potem Visual
niektórzy używają IBMowskiego Rational Rose
są jakieś dodatki
UMLowe do Eclipse chyba
natomiast tych aplikacji nie jest dużo
bo jeżeli chodzi o aplikacje które tylko obrazki robią
to tego jest masa Lucidchart jakieś tam Dravio
Niro tego jest masa tylko to nie są
narzędzia do projektowania
to są narzędzia do rysowania
jak ktoś ma do narysowania 2-3 schematy blokowe
a nie chce robić tego w Powerpointie
to bierze Dravio
bo tam jest biblioteka UMLowa
a w Powerpointie nie ma
ale zrobienie projektu
takie jakie my robimy
to ani w Dravio ani w Miro jest po prostu niemożliwe
czy Lucidchart bo to są takie lepsze Powerpointy
one po to powstały
natomiast narzędzia CASE
takie właśnie jak Enterprise Architect Sparx
Visual Paradigm, Rational Rose, IBM
to tego jest 5-6 na rynku
tak samo jak narzędzi CAD-CAM
mamy SolidWorks, AutoCAD
SolidEdge
tych aplikacji jest 5-6 na tej całej planecie
nie ma takiej potrzeby żeby było więcej
no ale jest więcej niż jedna
ale one mają wspólną cechę
i z nimi jest identyczny
to czy to będzie Enterprise Architect
czy będzie to Visual
to jest tylko kwestia klikania
natomiast idea jest identyczna
ale o tym będziemy mówili pod koniec zajęć
ja o tym mówię więcej na wykładach
także jak najbardziej jak chcecie
to na te wykłady przyjdźcie
a na laboratoriach pytajcie absolutnie o wszystko
ja będę starał się panować nad zjawiskiem
jak widzicie średnio bo jest 26 po
ale to mamy czas
coś jeszcze?
chciałem zapytać czy jest jakaś możliwość
oj oj
bo obejrzeć obejrze
ale jeśli chodzi o obecność to
słuchajcie
zajęć praktycznych się odrobić nie da
bo liczy się obecność
jeżeli coś do mnie przyślesz
i sobie z czymś nie poradzisz
to ja ci na pewno odpiszę
ale my na uczelni mamy dosyć restrykcyjną politykę
co do tego że jest kurs na prawo jazdy
do egzaminu teoretycznego
uczysz się z książek
------------------------------------Ja chciałam coś powiedzieć
Dzień dobry
Jestem połączona teraz z telefonu
Ponieważ na moim Macu
Nie mogę się połączyć z Teamsami
Jest jakby niezaktualizowany
Zupełnie nie mam aktualnej daty
Będę próbować się połączyć
Chciałam zgłosić teraz, ale jestem
Pracuję na komputerze
Ale pracuję na komputerze i jestem tutaj
Tylko po prostu na razie będę próbowała się przełączyć
Dobra, rozumiem
Ale wiecie
No dobra
To dzisiaj ochotnikiem będzie
Sekundę, muszę coś myśleć, wyskakują okienka jeszcze
Teamsy są fascynujące
No dobra
Tu ostatni się zalogował
Sebastian Matuszczyk
Poprosimy Polbit
Jasne, już było
Słuchacie mnie dobrze?
No dobrze
A, słuchacie mnie czy?
Nie, coś mi
Brzęczy i słabo słyszę
Okej, to kilka słów, nie?
Nie zrozumiałem
A teraz?
No, się tak lepiej, ale coś przerywa strasznie
Mam jeszcze inny mikrofon
Także też go mogę podłączyć
No dobra, zobaczymy
Na razie pokaż Polbit
Nas interesuje bardziej Polbit niż Twój głos
No dobra, okej
A jak to się robiło na Macu?
Tak, to było jakość udostępni
Musisz cały ekran udostępnić
Nie będziemy dyskutowali na temat wyższości jednych świąt nad drugimi
Tylko ustawienia tych płatności
Mam hasła, płatności ochrona
Ja obok jeszcze mam takie pytanie
Bo mnie nie było na ostatnich zajęciach
I nie mam aktualnego środowiska w sensie rzeczy
Tak, tak, tak
Tak, tak, tak
Tak, tak, tak, tak
Tak, tak, tak, tak
Tak, tak, tak, tak
Tak, tak, tak, tak
Tak, tak, tak, tak
Tak, tak, tak, tak
Możemy zrobić tak, że, może tak, bo jeżeli kogoś z Was nie było na jakichś zajęciach i nie ma tam paru obrazków czy tam paru rzecznych obrazków z poprzednich zajęć to, a biorąc pod uwagę fakt, że robicie, że robimy to wszyscy jednakowo, to
Visual ma możliwość aktualizacji, bo taka informacja dla tych, którzy używają lub mają zamiar używać później jeszcze albo mają gdzieś w pracy, bo niektórzy mają.
Visual jest tak skonstruowany, że plik źródłowy, to gdybyście chcieli sobie wzajemnie pomóc, plik źródłowy VPP, on trzyma projekt i wszystkie elementy w projekcie mają swoje takie wewnętrzne, unikalne ID,
które pozwala wizualizowaniu.
Nie pozwala wizualowi zarządzać wersjonowaniem i tam jeszcze całą masą innych rzeczy.
Natomiast wszystkie elementy na diagramach zgodnie z zasadami notacji, bo to co Wam mówiłem chyba na początku, przynajmniej nie pamiętam, czy Wyście mieli ze mną wykłady czy nie.
Jeżeli chodzi o notacje takie jak BPMN, UML czy w ogóle, to pamiętajcie, że identyfikatorem elementu jest jego nazwa.
Czyli jeżeli ktoś ma jakiś diagram klas.
I tam ma klasę fajne kółka, to z perspektywy modelu identyfikatorem tej klasy jest jej nazwa.
To wewnętrzne ID, które trzyma sobie visual, ono nie służy do zadania modelem, tylko służy do wewnętrznym takim jakby administrowaniem.
Na przykład sprawdzanie różnic pomiędzy diagramem dzisiejszym, a z przed czterech dni.
No bo jeżeli klasa ma tą samą nazwę przez cały rok projektowania.
To nie jesteśmy w stanie trzymać, nie bylibyśmy, narzędzie nie mogłoby trzymać historii.
Dlaczego to jest takie ważne?
Bo jeżeli ktoś, skutek jest taki.
Jeżeli ktoś zaimportuje sobie plik VPP, swój historyczny albo cudzy.
I Visual stwierdzi, że w pliku importowanym jest klasa, która ma identyczną nazwę jak klasa istniejąca.
To on do nazwy tej klasy importowanej doda na przykład jedynkę.
Bo nie dopuszcza kolizji nazw.
Bo dla niego drugi plik VPP jest drugim plikiem do integracji.
A jeżeli Wy wyeksportujecie sobie projekt do XML-a.
W XML-u będą nazwy klas, ale już nie będzie wewnętrznego ID Visuala.
To Visual zrobi tak, że importując taki plik.
Rzeczy, które mają różne nazwy będą różnymi rzeczami.
A rzeczy, które mają takie same nazwy będą nadpisane w zależności od tego, która jest młodsza.
Bo data jest.
I teraz to jest tak.
Gdybyście Wy chcieli komuś przekazać, jedna osoba drugiej.
Na przykład tak jak Wasz kolega.
Nie było go na ostatnich zajęciach.
Czyli ma projekt.
Załóżmy sprzed tam dwóch lat.
Trzech tygodni.
My generalnie trzymamy się nazewnictwa.
To możecie zrobić w ten sposób.
Ktoś kto ma aktualny projekt.
Eksportuje do XML-a swój projekt.
Przesyła koledze.
Kolega importuje tego XML-a.
I mu się, że tak powiem ładnie zaktualizuje.
Nie niszcząc niczego.
I nie powielając elementów.
Bo gdybyście koledze wysłali plik VPP.
I kolega by go zaimportował.
Samą nazwę mu się po prostu powieli dwa razy.
Bo Visual będzie chciał to ratować.
I po prostu doda.
Czyli na przykład Wasz kolega ma.
Tak jak tutaj macie.
Ma przypadek użycia lista życzeń.
Wszyscy macie przypadek użycia lista życzeń.
Gdybyście koledze wysłali plik VPP.
I go zaimportował.
To on będzie miał.
To po tym imporcie.
Będzie miał przypadek lista życzeń.
I lista życzeń 2.
A jeżeli wyślecie mu plik XML.
To nie będzie miał drugiego.
Załóżmy że ma ten przypadek lista życzeń.
Ale załóżmy że nie ma dwóch aktorów.
Bo myśmy załóżmy zrobili to tydzień temu.
To Waszemu koledze jak zaimportuje plik XML.
Nie powieli się przypadek użycia lista życzeń.
Bo już go ma.
Ale wskoczą mu te rzeczy których nie miał.
To jest akurat fajne.
To jest bardzo fajne.
To jest o tyle przydatne.
Że.
Bo jeżeli.
Współpracujące osoby.
Korzystają z serwera.
Bo Postmania czy tam Vipository.
Bo to się tak nazywa.
Visual ma swój serwer.
I serwer sobie z tym doskonale radzi.
Serwer.
Visual ma taki sam serwer jak na przykład.
Nie wiem.
Jak serwery wersjonowania.
Na jakichś tam Githubach.
CSVach.
Czy innych SVRach.
Tam się ta logika kręci.
Bo serwer to widzi.
Natomiast jeżeli.
Przesyłają sobie projekt.
Dwie niezależne osoby.
Jak to się ładnie mówi po polsku.
Peer to peer.
No bo ktoś może nie mieć.
Na przykład.
Mamy taką sytuację.
W której.
Ktoś dostaje plik do recenzji.
Tak.
Ja na przykład.
Zdarza mi się.
Że w ramach tam różnych tam.
Ze studentami.
Czy spoza uczelni.
Jakieś tam mentoringi.
I tak dalej.
Ktoś mi przesyła plik.
Do recenzji.
I efekt jest taki.
Że.
Ten ktoś ma swój plik oryginalny.
Ja go dostałem.
Coś tam pogrzebałem.
Jak ja bym mu go zwrócił.
W postaci VPP.
To mu się powieli.
Prawie wszystko.
A jeżeli.
A jeżeli.
Ja dostanę plik VPP.
Ale oddam mu.
Wyeksportowany XML.
To jemu się to zaktualizuje.
I nic się nie zepsuje.
To jest bardzo fajna.
Bardzo fajna rzecz.
To zresztą jest.
Zresztą.
To jest taka ciekawostka.
Że to jest jedno.
Z niewielu narzędzi.
Które pracuje.
Na plikach XML.
Visual.
A nie na.
Relacyjnym modelu danych.
Pod spodem.
To jest ogromna zaleta.
Bo większość narzędzi.
Tych case.
Tamte.
UML.
Bimeny.
Ma pod spodem.
Relacyjny model danych.
No i z tym jest taki dramat.
Że z tym się nie da nic zrobić.
Po prostu.
Na plik XML.
To jest.
Tfu.
Visual.
To jest tak naprawdę normalny.
Że XML.
Taki sam.
Jak widzicie.
W repozytorium.
No i dobra.
Co my tu mamy.
Myśmy.
Proszę się przełączyć.
Na te.
Na te.
Na te.
Na wszystkie diagramy.
Tu pamiętamy.
Tak.
Po prawej stronie.
Taki mały pulpicik.
Miniaturka.
Sobie szybko.
Przypomnijmy.
Co my tam mamy.
A.
To mi nie działa.
Swoją drogą.
Przeglądarka modelu.
Ok.
Po prawej jest taki mini pulpicik.
Po prawej stronie u góry.
O.
Jeszcze dalej.
O to.
I teraz tak.
Co my tu mamy.
My mamy tak.
Mamy diagram przypadków użycia.
I mamy tą tak zwaną architekturę high level design.
A czemu.
Zaraz.
Powinniśmy mieć diagram.
Bo jeszcze mieliśmy więcej.
Myśmy mieli więcej.
No.
To akurat też kojarzę.
Chwilka.
To.
Masz relację.
Ja zły plik otworzyłem.
Chwilka.
Bo to mam.
No.
Właśnie.
Tak.
Tak.
Tak.
No.
To mam.
No.
Właśnie.
Albo masz zły plik.
Albo przespałeś coś.
Nie.
Nie.
Na pewno to zrobiłem.
Znaczy.
Bo ja też mnie nie było na ostatnich zajęciach.
I ja to robiłem z tego.
Z pana nagrań.
Tak będąc w pełni szczerym.
Znaczy.
Ok.
Proszę.
Słuchajcie.
To taka.
Kolejna uwaga.
Jeżeli.
Znaczy się.
Zdarzało się.
Że niektórzy studenci.
Na każdych zajęciach.
Otwierali sobie nowy plik.
I ponieśli tych plików tam.
Ze dwa.
Trzy.
Jeżeli ktoś ma dwa.
To będzie plikiem głównym.
A pozostałe.
Musi wyeksportować.
Do XML.
I je zaimportować.
Wtedy będzie miało bezpieczne.
To mu się wszystko ładnie połączy.
No dobra.
To masz ten pełny plik.
Bo powinniście mieć.
Muszę go zobaczyć.
Gdzie on jest.
Kombinuj.
Kombinuj.
Powinniście mieć.
Ja tak pamiętam.
Bo mam tu ściągawkę.
Co myśmy na zajęciach robili.
Powinniście mieć.
Architekturę.
Przypadki użycia.
I diagramy sekwencji.
I scenariusze.
No dobra.
Zobaczmy.
Zobaczmy.
Zobaczmy.
Proszę.
Kto ma.
Kompletny projekt.
Przyznasz się.
Chyba ja.
W ramach.
W ramach parytetu.
Zapytamy.
Magdalena Doleśniak.
Masz wszystko.
U siebie.
Wydaje mi się.
Że tak.
Dawaj.
Zobaczymy.
O.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
To już jest.
O.
To już jest dużo.
No dobra.
To teraz tak.
Na razie trzymajmy ten ekran.
Krótkie przypomnienie.
Projekt aplikacji ma zawsze taką strukturę drzewiastą od ogółu do szczegółu.
Na samym szczycie jest zawsze diagram przypadków użycia, bo on jest umową na zakres.
Diagram przypadków użycia jest umową na zakres projektu.
I tu po raz.
Być może o tym mówiłem.
Nie rysujemy na tym diagramie tych wszystkich extendów i include'ów, bo diagram przypadków
użycia nie służy do modelowania procesów, interakcji, architektury kodu.
On do tego nie służy.
To są tak zwane te konstrukcje include i extend.
To są u niektórych autorów nazywane wręcz reliktowe.
To są konstrukcje z czasów początku lat dziewięćdziesiątych, końca osiemdziesiątych.
Bo Jacobson jak opracował, przypominam, że UML jest, teraz już się w miarę uporządkował.
To jest zlepek trzech notacji.
Obie miały pewną wspólną cechę, że miały taki, no powiedzmy sobie, obiektowy rodowód.
Akurat przypadki użycia nie są obiektowym.
Taka ciekawostka.
Jeżeli mówimy o paradygmacie obiektowym, to generalnie diagramy klas i wszystkie pochodne,
trzymają się tego, że mamy klasy, obiekty i tak dalej.
Natomiast diagram przypadków użycia jest tak zwanym diagramem pomocniczym.
Pomocniczym w tym sensie, że ma pewne uproszczenia w stosunku do tego fundamentu UML-owego, o którym mówimy.
I jest diagramem pomocniczym, bo on nie służy do modelowania architektury systemu.
Diagram przypadków użycia to jest taka umowa na główne menu aplikacji, tak naprawdę.
Nie wiem, czy wam pokazywałem.
Ja wam pokazywałem fragment oryginalnej specyfikacji UML-owej?
Jeżeli chodzi o use cases, czy nie?
Czy to nie ta grupa?
Jakaś cisza niezręczna.
To na chwileczkę wrócimy.
Bo ten diagram budzi, niestety, masę nieporozumień.
One właśnie wynikają z tego, że ludzie trzymają się kilku książek sprzed 30 lat z okładem.
Ja na chwilę przechwycę ekran.
Czegoś nie zepsuję.
I zaraz do ciebie wrócimy.
Co to mi da, że mi czegoś nie zepsuł?
Ok.
Na pulpitu dostępnie będzie łatwiej.
Widać te specyfikacje?
Popatrzmy.
Widać, tak?
Przypadki użycia.
Ja to powiększę.
Przede wszystkim przypadki użycia służą do spisania wymagań.
W sensie, do czego system będzie używany, a nie jak.
Pamiętajcie, przypadki użycia są listą tego, do czego system będzie używany, a nie jak będzie używany.
To, jak będzie używany.
To są diagramy sekwencji.
W UML-u nie ma czegoś takiego, jak przepływ ekranów.
Żeby nie było niejasności.
Nie ma czegoś takiego.
I nie używamy tych extendów i include'ów.
Bo to są tak naprawdę starożytne konstrukcje opisujące w kodzie go to...
Zaraz wam to pokażę, co to jest.
I teraz tak.
Diagram przypadków użycia jest diagramem, który służy do zdefiniowania zakresu projektu.
Czyli będzie system, będzie aplikacja i my chcemy wiedzieć komu i do czego będzie osłużył, a nie jak będzie działał.
Kolejny cytat.
To taka ciekawostka.
Przypadek użycia sam z siebie jedno jajeczko jest stwierdzeniem, nie wiem, fakturowanie, zarządzanie fakturami, whatever.
Ale faktury, załóżmy, że ktoś ma w firmie ERPA, sklep internetowy i CRM-a.
I każdy z tych systemów ma w menu opcję faktura.
Jest to możliwe?
Oczywiście, że tak.
Tak jest w wielu firmach.
Przecież sklep internetowy wystawia faktury.
Często.
System CRM też często wystawia faktury.
System finansowo-księgowy też często wystawia faktury.
Bo na przykład w tej samej firmie, w sklepie internetowym, gdzie są sprzedawane materialne przedmioty, sklep internetowy wystawia fakturę i ta faktura leci do księgowej.
W ramach tam, nie wiem, integracji, whatever.
CRM, gdzie na przykład są usługi serwisowe obsługiwane, też wystawia faktury.
Za naprawy pozagwarancyjne.
I te faktury z CRM-a lądują też u księgowej.
A księgowa w systemie FK też ma możliwość wystawienia faktury, bo ona raz na dwa, trzy lata fakturuje sprzedany, zużyty samochód prezesa.
I tam jeszcze, nie wiem, coś innego fakturuje.
To znaczy, że jest możliwe, że jeden przypadek użycia jest tak naprawdę cechą trzech różnych systemów.
Przypadek użycia może należeć do więcej niż jednego systemu.
Przypadek użycia może należeć do więcej niż jednego systemu.
Przypadek użycia może należeć do więcej niż jednego systemu.
No bo w menu faktura jest w trzech aplikacjach.
No bo w menu faktura jest w trzech aplikacjach.
I tu bardzo ważna rzecz.
Przypadki użycia opisują, reprezentują zachowanie, a nie wewnętrzną architekturę.
Przypadki użycia opisują, reprezentują zachowanie, a nie wewnętrzną architekturę.
To co podkreślałem na czerwono.
A więc te wszystkie wygibasy z extendami, include'ami i tam, nie wiem, przepływy prawie,
A więc te wszystkie wygibasy z extendami, include'ami i tam, nie wiem, przepływy prawie,
do tego w ogóle nie powinno być, bo ten diagram do tego nie służy.
do tego w ogóle nie powinno być, bo ten diagram do tego nie służy.
Po drugie, jak ktoś się naklepie tych use case'ów,
to teraz, zobaczcie, do każdego use case'a powinniście zrobić,
przynajmniej powinno być możliwe zrobienie sensownego diagramu sekwencji
na podstawie architektury.
I jeżeli wywalicie extenda, to jak z tego zrobicie dwa niezależne diagramy sekwencji,
które są scenariuszami tych use case'ów, a wykonalne?
które są scenariuszami tych use case'ów, a wykonalne?
Jeżeli mówimy o extendach, to jest to po prostu, jeżeli przypadków użycia,
jako diagramu, można nadal używać do projektowania aplikacji strukturalnych,
nie obiektowych, nie komponentowych, tylko monolitów, tak?
I my możemy sobie wyobrazić, że taki monolit ma w środku jakieś tam GoTo,
Subroutini, Bóg wie co jeszcze.
No ale jeżeli mamy aplikację zorientowaną na komponenty, obiektową itd.,
No ale jeżeli mamy aplikację zorientowaną na komponenty, obiektową itd.,
no to mamy hermetyzację i przyległości i nie ma żadnych extendów i include'ów.
Ja już pomijam, że include jako, jest to konstrukcja dosyć specyficzna,
bo to jest wyciągnięcie kawałka kodu przed nawias i używanie go wspólnie.
No teraz pytanie brzmi, jak to narysuje się na diagramie sekwencji?
To konia z rzędem temu, który sobie z tym poradzi.
No dobra, tyle byłoby o use case'ach, przypomnienia.
Zobaczcie z powrotem na ekran.
A więc tak, na samej górze są przypadki użycia.
To jest jeden diagram, jeden diagram pokazuje cały system.
Kolejna ważna rzecz, przypadkiem użycia jest to, co chce osiągnąć aktor.
Otwórz przypadki użycia, diagram.
Zwróćcie uwagę, że ta aplikacja służy do
uogólniając, pamiętajcie, że przypadek użycia to jest kuwetka
na konkretny typ dokumentów.
Czyli mamy kuwetkę, karty katalogowe,
lista życzeń, wypożyczenia, rejestr czytelników,
API biblioteki i teraz jak się do tego ma API biblioteki?
To też jest kuwetka, tylko że API biblioteki
pozwala zewnętrznej aplikacji pobierać pewne dane.
Strasznie się pilnujcie z jedną rzeczą, bo ludzie to strasznie mylą.
Dzisiejsze zajęcia są ostatnie i będą takim trochę podsumowaniem.
System informatyczny, pamiętajcie o jednej rzeczy,
UML nie jest podręcznikiem analizy i projektowania.
To jest tylko język. My mamy dosyć dużo książek na świecie,
pracowań, dobrych praktyk, wzorców projektowych,
które są takim jakby przewodnikiem, jak to zrobić lepiej.
Być może o to pytamy. Jak wam się wydaje?
Czym się różni lepszy software od gorszego software'u?
Lepsza aplikacja od gorszej?
Załóżmy, że dwa niezależne zespoły, software house'y,
stworzyły aplikację, która ma, tak jak tu widzicie,
identyczny diagram przypadków użycia, bo były identyczne wymagania.
Jedna jest gorsza, druga jest lepsza.
Co to znaczy, że jakaś aplikacja jest lepsza lub gorsza?
Jak wam się wydaje?
Jest sporo kryteriów pod to.
Wolniej działa, trzeba płacić, wymaga 15 serwerów do uruchomienia,
w obsłudze jest jakaś taka dziwna krzywa.
A gdybyście mieli wybrać jedno kluczowe kryterium oceny jakości aplikacji?
Ono tu padło po drodze.
Prędkość działania.
Najgorsze, jakie może być kryterium do oceny aplikacji.
Czy spełnia swoją rolę?
No, jakieś inne pomysły.
A czy powiem tak, jeżeli nie spełnia swojej roli, to to nie jest ta aplikacja.
Bo jeżeli kupimy system, jeżeli wam powiem,
mamy dwie aplikacje, obie służą do wystawiania faktur,
to wam pomoże.
Mamy dwie aplikacje, jedna i druga summa summarum wypluwa na drukarkę,
na ekran, identyczne faktury VAT.
To jak ocenimy, która jest lepsza, która jest gorsza?
Na prostsza po obsłudze?
Może użytkownik jest zadowolony?
Użytkownik może być zadowolony z czegoś dziwnego.
Zadowolony użytkownik to będzie ten, który będzie mógł okradać w obsłudze,
który będzie mógł okradać właściciela
i wyciągać z boku na pendrive dane kontrahentów.
Już chyba mówiliśmy kiedyś o tym, koszty utrzymania i rozwoju?
Dokładnie.
Jeżeli się umówimy, że mamy wymagania
i ta aplikacja spełnia te wymagania,
bo jedna bardzo ważna rzecz w tej branży,
jeżeli my napiszemy wymagania,
to aplikacja, która ich nie spełnia,
nie jest tą aplikacją, o której właśnie rozmawiamy.
Aplikacja, która nie spełnia wymagań, jest jakimś innym produktem.
Ja miałem wczoraj identyczną rozmowę, którą student wyartykułował.
Musicie się w tej branży, znaczy się musicie, nie musicie,
ale jeżeli chcecie rozumieć tę branżę,
to powinniście zrozumieć jedną bardzo ważną rzecz.
Definicje są kluczem.
Co to jest traktor?
Co to jest traktor?
Maszyna rolnicza.
To znaczy, że wszystko, co ma mój szwagin,
to jest traktorem?
Nie, trzeba by całą definicję wyciągnąć.
Wielozadaniowa maszyna rolnicza,
służąca do między innymi orania pola.
Traktorem się nie orze pola.
Traktor jest narzędziem, uwaga,
traktor jest urządzeniem, które ciągnie maszyny rolnicze.
No.
To teraz mam pytanie.
Czy urządzenie, które nie ma jednego koła,
jest traktorem?
Nie jest traktorem.
Bo nie spełnia podstawowej definicji bycia traktorem.
Urządzenie, które ma uszkodzone jedno koło,
ono było jeszcze godzinę temu traktorem.
W tym momencie już nie jest traktorem.
Nie ma czegoś takiego jak zepsuty traktor.
Musicie się nauczyć jednej ważnej rzeczy.
W tej branży perfekcyjnego podchodzenia do definicji.
W tej branży jest to absolutny dramat.
Bo jeżeli ktoś powie,
aplikacja jest, użytkownik jest zadowolony z aplikacji.
No to wam powiem, że najbardziej zadowolonym człowiekiem systemu CRM
jest ten sprzedawca, który jutro zmienia pracę,
bo go wylali na ryj
i on sobie wyciągnie na Excelu wszystkich swoich klientów.
I jak wy mu powiecie, że CRM nie będzie miał opcji,
eksportu danych kontrahenta na pendrive,
to ten sprzedawca was pierwszy znienawidzi.
Jako projektantów.
To jestem ja w moich projektach.
Nie ma czegoś takiego jak zadowolony użytkownik.
Słuchajcie, czym będzie zadowolony polski użytkownik autostrady?
A to na zdjęciu to jest traktor?
Na którym zdjęciu?
Na czacie wrzuciłem.
Okej, moment, otworzę czat.
No na przykład, co on ma?
Słuchajcie, bardzo ważna rzecz.
Ja powiedziałem, że traktor jest czymś, co ciągnie sprzęt rolniczy.
Nie powiedziałem, że cechą definicji traktora są cztery koła.
Większość ma cztery, ale to nie jest obowiązek.
Gdyby ten traktor nie miał jednego z kół,
przestałby być traktorem.
Ale dobrze, że wasz kolega to zdjęcie wkleił,
bo przynajmniej, jak to się mówi, szuka dziury w całym.
I ma rację.
Definicją traktora jest urządzenie, które ciągnie sprzęt rolniczy na polu.
Co by to nie miało teraz znaczyć?
I to urządzenie jest.
Ale jakby mu pękła opona,
którakolwiek z tych trzech,
to dopóki tej opony nie naprawimy,
to nie jest traktor.
Jeżeli mówimy o aplikacjach,
to słuchajcie, polski kierowca jest zadowolony wtedy,
kiedy na autostradzie nie ma fotoradarów,
i nie ma policjantów.
Dlatego nasz kraj jest w czołówce zgonów na asfalcie.
Zadowolenie klienta jest jednym z absolutnie najgorszych,
nie wiem czy wiecie,
z absolutnie najgorszym kryterium.
Wyobraźcie sobie system finansowo-księgowy.
Inne pytanie wam zadam.
Po co firmy?
Pamiętajmy, że gdybyśmy mieli kryterium pod tytułem
fabryka czy software house, który robi gry komputerowe,
to okej.
Ale my mówimy o systemach biznesowych.
Po drugie, nawet w grach komputerowych jest problem,
bo są ograniczenia.
O tym później przy okazji.
Wymieńcie sobie z głowy kryterium pod tytułem
zadowolenie użytkownika.
Bo 99% tego świata cierpi...
Bierzcie poprawkę na jedną rzecz.
Jak wam się wydaje, jakiego software'u na świecie jest najwięcej?
Beznadziejnego.
Swoją drogą.
Ale do czego ten software służy?
Jakie aplikacje powstają na świecie najczęściej?
Przetwarzania danych.
Biznesowe.
Dane to przetwarzane wszystkie aplikacje.
Biznesowe.
Bo mamy aplikacje, które na przykład...
Nowoczesna hala fabryczna.
Prawie każde urządzenie, w szczególności maszyny CNC,
mają software, sterowniki, PLC itd.
Jeżeli ktoś ma samochód nowszy niż 15-20 lat,
to tam jest kupa software'u w środku.
Jeżeli ktoś wsiądzie do samolotu,
to ten samolot jest w połowie komputerem.
Że nie wspomnę o rakietach.
Wasz telewizor to jest w trzech czwartych
jakiś tam Linux albo inne nieszczęście.
Wasz telefon podobnie.
Wszystkie firmy...
Przecież my używamy Teamsów.
To jest software.
Używacie UBI.
To jest software.
Wszystkie firmy na świecie,
prawie, większość,
używają systemów finansowo-księgowych.
Wszystkie rządy na świecie
używają aplikacji.
Nie wiem skąd się to wzięło.
Trzymamy się tej wersji.
To są szeroko pojęte aplikacje biznesowe.
Otóż najwięcej oprogramowania na świecie
to są oprogramowania, które wspiera
działalność firm, urzędów itd.
Bo jeżeli ktoś wyprodukuje
aplikacje biznesowe na świecie,
to są aplikacje biznesowe.
Tysiąc tokarek,
sterowanych numerycznie,
to one wszystkie mają ten sam software.
Tam są kosmetyczne różnice.
Ale jeżeli weźmiecie
tysiąc różnych firm,
to w każdej tej firmie...
Znaczy nie ma dwóch firm, które mają
identyczne systemy informatyczne.
Czyli najwięcej projektów informatycznych
to są projekty tak naprawdę
szeroko pojęte biznesowe.
I teraz pytanie do Was.
Po co firma, czy urząd
wyraża oprogramowanie?
Dajcie sobie spokój
z tym przetwarzaniem danych.
Po co?
Żeby coś wspierać
swoich pracowników czymś,
żeby mogli coś lepiej, wydajniej,
szybciej robić.
Albo żeby mogli po prostu coś robić.
Albo żeby klientowi,
w sensie zewnętrznym
ludziom coś dostarczać.
I tak się w większości ludziom wydaje.
Oprogramowanie
służy
przede wszystkim do
zarządzania.
Co to znaczy, że
oprogramowanie wspiera
zarządzanie przedsiębiorstwem
albo urzędem,
organizacją? Co to znaczy?
Jeżeli ktoś wdraża system
CRM w swojej firmie
u sprzedawców,
to jak Wam się wyda? Co jest głównym
celem tych wdrożeń?
Po jakiego grzyba firma
wdraża system CRM?
Żeby kontrolować
bardziej, żeby wszystko było tak
standardowo.
Żeby wprowadzić
standaryzację, żeby można było
wiedzieć, który sprzedawca
nie dotrzymuje terminów ofert.
To kontrola.
Oprogramowanie w 99%
sprawuje nad sumą.
To się nazywa rozliczalność.
Robimy raporty sprzedaży,
logowania, czasu pracy,
wystawionych faktur,
przeterminowanych ofert.
Obecności na zajęciach.
Obecności na zajęciach.
Wyobraźcie sobie
software na tej uczelni,
gdzie student sam sobie może ocenę wystawić.
I sam sobie może ocenę wystawić.
To ta uczelnia byłaby
jednym wielkim dramatem. Przynajmniej
dla uczelni, bo dla was to może niekoniecznie.
Sporo by było absolwentów
z najwyższymi ocenami.
Ja myślę, że wszyscy by tą uczelnię kończyli
w ciągu dwóch dni z piątką na dyplomie.
To znaczy, że ten software UBI
nie powstał po to, żebyście wy byli zadowoleni,
tylko żeby was kontrolować.
To dosyć mocno.
To znaczy, że projektowanie systemu
dla uczelni na podstawie wywiadów ze studentami
jest najgłupszym pomysłem pod słońcem.
Tak między nami.
I są nawet publikacje naukowe o ten temat.
Jakbyście chcieli zaprojektować
najgorszy system CRM na świecie,
to zróbcie to na warsztatach ze sprzedawcami.
To tam będzie wszystko.
Ręczne poprawianie terminów,
edycja historycznych faktur,
możliwość dopisywania historycznych spotkań,
oczywiście napęd drive'a, eksport
absolutnie wszystkich danych.
To będzie absolutnie najgorszy CRM na świecie.
Ale klient będzie zadowolony.
To już było takim sarkazmem rzucone w razie.
Ja wiem, ale to jest dobry sarkazm.
Ja się teraz pytam.
Jeżeli chodzi o ten system CRM w firmie,
to kto jest klientem tego?
Kto jest klientem projektanta tego systemu?
Nie sprzedawca.
Prezes tej firmy.
Sprzedawca jest ofiarą tego wdrożenia.
Tak z całym szacunkiem.
Bo ten system powstał po to
i tylko po to,
żeby kontrolować,
czy sprzedawca postępuje zgodnie
z umową o pracę
i paroma innymi wewnętrznymi rozwiązaniami.
Otóż największy...
Słyszeliście o czymś takim jak...
Jest coś takiego.
Zaraz Wam coś pokażę.
Dajcie mi sekundę.
To znajdę szybko.
Bo Wy się uczycie projektować oprogramowanie.
To jest bardzo, bardzo odpowiedzialna robota.
Coś Wam pokażę.
Patrzymy na czata i otwieramy tą stronę.
Dzięki.
Widzicie co to jest?
To jest jedno z zaleceń europejskich.
Jak wdrażać RODO.
Nie pytamy ludzi o nic.
To się nazywa privacy by design.
To znaczy, że
ochrona danych nie polega na tym,
że pracowników wreszcie przeszkolili
i poinstruowali.
Tylko ochrona danych polega na tym,
żebyście z ręka boska broni, żebyście
w tym systemie dopuścili do takiej funkcji,
funkcjonalności jak eksport danych na pendrive.
O którą oczywiście poprosi każdy urzędnik
i pracownik firmy na warsztatach.
Lat temu już będzie 5.
Jak mi pamięć nie myli.
Takich spraw jest dużo.
Jedna z takich bardziej znanych.
O ile Wam już o tym nie mówiłem.
SGGW.
Krótkie streszczenie.
Trzeba pomóc swojej uczelni.
Praca w domu.
Praca w domu polegała na tym.
Zdalna praca w domu.
Home office.
Że on sobie te CV elektroniczne skopiował
na Twojego notebooka.
Pracowego zresztą.
I sobie w domu chciał skończyć.
Miał tego pecha, że mu udziabnęli na parkingu
tego notebooka przy supermarkecie.
I się wydało.
Pierwszy odruch.
Ten pracownik jest zły.
Był wszędzie.
Podpisów mieli 10 kg od prawników.
Pracownik jest zły.
I należy go zwolnić.
I jeszcze dać mu karę.
Pracownik poszedł do sądu.
Były dwie instancje.
Wyrok prawomocny.
Pracownik jest niewinny.
Winny jest SGGW.
Bo dopuściło do eksploatacji systemu.
Który w ogóle miał funkcjonalność
polegającą na wynoszeniu tych danych.
OK?
To jest trzon tego typu projektów.
Mamy low by design.
Privacy by design.
Kupę rzeczy jest by design.
To znaczy się, że
projektowanie oprogramowania
nie polega na spełnianiu wszystkich
książęcych życzeń użytkowników.
Tylko na stworzeniu oprogramowania,
które spełnia swoją rolę.
A kluczowym czynnikiem oceny jakości
są koszty wytworzenia i utrzymania.
Bo gdybyśmy tego nie mieli
to każdy system na świecie
byłby wielkim monolitem
i bardzo dużo otworków
miałby do USB do wyciągania danych.
I to byłaby
absolutnie najgorsza aplikacja na świecie.
Taki monolit.
Wyobraźcie sobie, że macie
duży biurowiec
i absolutnie wszystkie ściany
są wylane z betonu.
Czujecie?
I ten biurowiec jest postawiony
nie na 2 miesiące tylko na 25
a nie na 50 lat.
Niektóre budynki mają po 150.
Ale wiecie, co 2, 3, 4, 5 lat
a to byśmy chcieli ściankę przesunąć
a to na parterze kiedyś była Biedronka
teraz zrobimy 4 salony fryzjerskie
a za 10 lat znowu zrobimy inny supermarket.
Czyli te ścianki działowe
będą permanentnie przesuwane
a funkcjonalność niektórych elementów
czy całych pięter będzie się zmieniała.
To znaczy się, że jak ktoś buduje
duży dom to nie interesuje nas
zadowolenie użytkowników,
którzy będą zmieniali.
Zadowolenie i koszty utrzymania
i nic więcej.
Oczywiście on musi spełniać
on musi swoje funkcje pełnić.
Tylko pamiętajcie
jedną z funkcji waszego mieszkania
jaka jest jedna z podstawowych funkcji
każdego z was?
Żeby wam nie wleźli do środka
nie powołani ludzie
bo wasze mieszkanie jest elementem
waszego intymnego życia
kluczowym elementem w waszym mieszkaniu
jest zamek w drzwiach.
Bo jakby wasze mieszkania
były robione na podstawie wywiadów
z mieszkańcami całego miasta
to pierwszymi jego użytkownikami
byliby złodzieje.
Tego się nie robi.
Dlatego projektując oprogramowanie
musicie skupić na definicjach
i musicie pamiętać
że oprogramowanie w 90% przypadków
służy do nadzoru i kontroli.
Po co robimy te raporty?
Jeżeli ktoś z was będzie chciał mieć
tego CRM
czy jakiś inny system
i przyjdzie prezes
albo dyrektor sprzedaży
i on by chciał mieć na przykład
raport skuteczności ofertowania
jak się ma liczba ofert
do liczba zamówień
to jaki ten raport ma sens
jak wszyscy będą mogli edytować
historyczne zapytania, oferty, daty, wszystko.
Ten raport będzie jednym śmieciem.
Tego systemu.
Jeżeli dopuścimy w CRM
jednomożliwości edycji
dokumentów historycznych
to ten raport będzie największym śmieciem
w tym systemie.
To będzie najbardziej
śmieciowa funkcjonalność.
Dlaczego takie wdrożenia jak KSEF
mają potężne problemy?
Bo KSEF jest jednym wielkim dramatem.
Podobnie zresztą teraz
czytam e-doręczenia.
To jest kolejny dramat.
Patrzyłem na ten diagram.
Nasz diagram pokazuje wam
że, pamiętajcie o definicjach
że
ten
ta aplikacja
karty katalogowe książek
to znaczy, że my oczekujemy
że ta aplikacja będzie mówiła prawdę.
Że jest Mickiewicz
i że napisał Pana Tadeusza.
Lista życzeń
ta lista życzeń oznacza
że prawdą jest
że konkretny użytkownik chciałby coś
wypożyczyć.
Wypożyczenie oznacza
że prawdą jest
że tą książkę wypożyczono
2 kwietnia.
Nie wolno tego edytować.
Dlaczego nie wolno edytować
karty wypożyczenia?
Nie powinno być wolno.
Bo wtedy każdy
kogo zaboli
będzie mógł zmienić datę wypożyczenia
żeby mniejszą karę zapłacić.
Pójdziesz flaszką do bibliotekarza
i bibliotekarz mu to przeedytuje.
Aplikacja pozwala na edycję danych.
Dlaczego nasza aplikacja nie ma
administratora?
Bo to jest najgłupszy pomysł
w aplikacji jaki można wymyśleć.
Nie ma nic głupszego
niż konto Supervisora
bo mamy ileś tam reguł
i jest jedna święta krowa.
Co robi przeciętny haker na tym świecie?
Idzie z flaszką do Supervisora.
Co będzie się bawił w jakieś łamanie
do loginów jak on przekupi
albo da w łeb pałką administratorowi
i ma cały system w łapie.
Jak wam się wydaje z czego to wynika?
Słuchajcie jak ja czytam
że nagle w jakiejś firmie
w ciągu dwóch, trzech godzin
jakiś haker w nocy wyprowadził
5 milionów rekordów opisujących pacjentów.
Jak to w ogóle jest możliwe?
Konto admin.
No to że generalnie
włamał się na konto admina bazy danych
i wyciągnął co chciał w ciągu dwóch godzin.
Jakby miał lepszy transfer
na tą gminę.
Po pierwsze takiego konta nie powinno było być
i nie wiem czy wiecie
jednym z najgorszych problemów
są właśnie tego typu systemy
które mają pod maską bazę danych.
Jak się korzysta w aplikacji z bazy danych?
No jest jedno konto
i wszystkie funkcje z tego konta korzystają.
Tak jest najgorzej.
No wiem, ale tak jest najczęściej.
Czasem bywa gorzej.
Jest konto główne admina w bazie
i go się podaje do aplikacji.
A na bazie gminy
takie różne rzeczy jeszcze siedzą.
To miałem na myśli.
Ja akurat nie mam tam żadnych cudów
ale w WordPressie tak właśnie jest
że jest baza danych, na przykład MS SQL
jest jedno konto, login i hasło
i na tym jednym koncie pracują wszystkie
pluginy.
Tak jest bardzo często
w wielu różnych systemach.
Wiele ERPów tak ma.
To jest tylko 5 minut i po włamaniu.
A to będziemy o tym mówili za chwilę
przy innej okazji jak będziemy mówili o architekturze.
Mamy pięć funkcjonalności tej aplikacji.
Jedną z bardzo ważnych rzeczy
jest to, żeby one
pełniły swoją funkcję.
A każda aplikacja ma jedną z funkcjonalności
jest dokładnie to o czym
waż zamek w drzwiach.
Jeżeli my na świecie
nie możemy edytować historii
na czym polega problem
z ksefem?
No problem z ksefem polega na tym,
że znakomita większość systemów finansowo-księgowych
pozwala na edycję historycznych faktur.
To jest absolutnym idiotyzmem.
A ksef
czyli faktury w skarbówce
trzyma się
jak to się mówi
realnego życia i ustawy.
Faktura od momentu wystawienia
jest dokumentem do końca świata
nieedytowalnym.
Bo jeżeli ktoś wystawił fakturę
nacisnął guzik
i powiedział tego a tego dnia
Kowalski kupił rower za 500
ta faktura jest u mnie
i u mojego kontrahenta
od tego momentu.
Faktura w dwóch egzemplarzach
w związku z tym faktura od momentu wygenerowania
nie ma prawa być nigdy do końca świata
edytowana.
A dlaczego faktury
w systemach finansowo-księgowych są edytowalne?
Bo user tak chciał.
Takie były wymagania usera
na warsztatach.
Panie popraw mi tą pan fakturę
sprzed dwóch tygodni, bo się pomyliłem.
No nie ma sprawy, poprawiamy.
I właśnie świat się zawalił.
Cały świat się zawalił.
U kontrahenta ma fakturę
która wygląda tak jak wyglądała dwa tygodnie temu
a w tym systemie macierzystym jest inna
bo ktoś to poedytował.
I to jest początek dramatu tego systemu informatycznego.
A to jest dopiero jedna usterka.
W każdym razie
Trzymamy się jednej rzeczy
przede wszystkim definicja systemu
to jest to, że on spełnia wymagania
bo jak ich nie spełnia to on nie jest tym systemem.
A więc żadnej łaski mi nikt nie robi
że system spełnia wymagania.
Jednym z wymagań
są wymagania poza funkcjonalne.
Czyli to, że system działa szybko
łaski nie robi.
Bo ja mam napisane
system ma wystawiać faktury
czas odpowiedzi po naciśnięciu na ekran
5 sekund
to jeżeli ma 10 sekund
to to nie jest zła aplikacja
to nie jest ta aplikacja, którą ja zamówiłem.
Pamiętajcie o tym.
Oto są wymagania
żebyśmy odróżniali to
za co chcemy zapłacić
od tego za co nie chcemy zapłacić
bo to jest jakiś inny software.
Nie ma czegoś takiego, że aplikacja jest dobra troszkę
przecież
jeżeli ktoś z was ma samochód
czy samochód, który
samochód, który nie jeździ
jest samochodem?
No nie jest.
Przedmiot, który nie jeździ
nie jest samochodem.
To, że on wygląda jak samochód z zewnątrz
niczego nie zmienia.
To nie jest samochód.
Samochód to jest urządzenie, które mnie
być może z rodziną
to co stoi w garażu, bo się zepsuło
przynajmniej na razie
nie jest samochodem.
To wygląda jak samochód.
A jak mechanik przyjdzie i naprawi
to tu będzie samochód. To nie jest samochód.
To jest właśnie problem tej branży
że ludzie, my na co dzień
nie zawsze mamy takie rygory
ale jeżeli projektujemy oprogramowanie
to je musimy mieć
bo wbrew temu co niektórzy mówią
nawet wasze życie jest zero-jedynkowe.
Coś spełnia definicję
albo jej nie spełnia.
Pamiętajcie
nie można, czy można
trochę zjeść zupę.
Bo jak się domyślacie, czy można komuś dać troszkę
po pysku?
No albo dostał w pysk albo nie.
Idzie do sądu
jest naruszenie nietykalności osobistej.
Nie można czyjeś nietykalności osobistej
naruszyć troszkę.
Po prostu ktoś złamał prawo
a dywagację czy on mu dał po mordzie 3 razy
czy 15 to jest zupełnie inna rozmowa.
To nie ma czegoś takiego
no ja mu tylko raz dałem w zęby. To on tylko troszkę po ryju dostał.
A tamten nie. Tamten dostał bardzo
bo ma 4 zęby wybite i nie ma nosa.
I dostał 18 strzałów z piąchy.
Nie. Mamy pojęcie naruszenia nietykalności osobistej
a stopień to jest inna bajka.
To czy samochód jedzie 5 na godzinę
czy 500 na godzinę nie ma znaczenia.
Albo to jest samochód bo się sam przemieszcza
albo nie.
Kluczem w tej branży jest odróżnianie rzeczy
od ich cech.
Samochód jest samochodem
bo jeździ.
A to czy jest czerwony czy niebieski
nie wpływa na to, że on jest samochodem.
Czyli kolor samochodu nie jest elementem definicji samochodu.
Na przykład liczba kół w traktorze
nie jest elementem definicji traktora.
Liczba kół w samochodzie
w traktorze jest cechą traktora
ale definicją traktora jest to,
że on się sam przemieszcza i ciągnie pług.
Liczba kół jest cechą.
Tak zwaną niedefiniującą.
Masa 3 kół
jak jeździ po Francji i po Włoszech
to są samochody. Mają 3 koła?
Mają. To znaczy, że ilość kół pojazdu
nie jest elementem definicji pojazdu.
Niektóre tiry mają 18 kół.
Też są samochodem.
Jak spisujemy wymagania
i projektujemy aplikacje
to nie macie wyjścia.
Ta branża tak działa.
Komputer jest zero rynkowy.
Na tym świecie wbrew pozorom
to jest takie moje ulubione pytanie na zajęciach.
Żeliński twierdzi,
że na świecie wszystko jest zero rynkowe.
Jeżeli ktoś mi poda przykład
czegoś, co nie jest zero rynkowe
to znaczy, że Żeliński
mówi nieprawdę.
Czy jest coś, co nie jest zero rynkowe na tym świecie?
Miłość.
Jest zero rynkowa.
Albo się zakochałeś, albo nie.
To jak bardzo, to jest inny problem.
Mam wrażenie, że połowa filozofów
się z tym będzie kłóciła.
Filozofi są po to, żeby kłócić się
z czymkolwiek.
Który to mówił, że człowiek to jest
zwierzę chodzące na dwóch nogach
bez piór czy większej sierści.
Więc przyniesiemy
ołupionego kurczaka
i mamy człowieka.
Dlatego to jest zła definicja,
bo homo sapiens to jest człowiek myślący
i w tym momencie kurczak odpada jako definicja.
Słuchajcie, to jest właśnie problem.
Dobrze, że o tym mówicie tych filozofach.
Jest filozofia i filozofia.
Jeżeli ktoś będzie mówił,
że filozofia to jest pojęciem,
dosyć pojemnym pojęciem,
niestety w tej branży mamy
zbyt dużo filozofów, mam wrażenie.
Bo jeżeli będziemy mówili o np.
wczesnośredniowiecznych dywagacjach,
ile diabłów się mieści na czubku igły,
to to jest gatunek filozofii.
I tak można w nieskończoność.
Ale gdybyśmy mówili o filozofii
w kategoriach logiki,
to to zostało już dla was uporządkowane
w tzw. dwudziestoleciu międzywojennym.
To się nazywa ładnie filozofia analityczna,
różne są tłumaczenia, nieważne.
Natomiast to, co jest nauką,
czy dziedziną wiedzy,
to jest twarda logika.
Natomiast dywagacje na temat tego,
jak bardzo jakiś poeta
zakochał się swojej żonie czy kochance,
to nie jest filozofia,
tylko jak mówią niektórzy,
filozofowanie jest dosyć kiepskie,
ale dosyć popularne.
Ewentualnie możemy powiedzieć,
że mamy masę sofistów na świecie.
Także nie idziemy w tym kierunku.
Nie będziemy się zastanawiali,
ile diabłów można wcisnąć
do poeta A zakochał się w sąsiadce B,
bo są dwa wyjścia.
Albo się zakochał, albo nie.
To tak jak z tym traktorem.
Ciągnie pług, jest traktorem.
A jak bardzo ciągnie?
Panie, to jest cecha.
Jeżeli mówimy, że traktor jest czerwony,
ten na zdjęciu,
a ile mamy kolorów RGB?
16 mln z kawałkiem.
To znaczy, że kolor traktora
jest cechą tego traktora,
ale nie jest cechą definiującą.
Kolor traktora nie ma nic do rzeczy
w tym traktorze.
Podam wam inny przykład,
taki bardziej z branży.
Mamy wdrożenie systemu magazynowego
i systemu zarządzania produktami.
To już tak bliżej naszej branży.
Nie jest to może ten nasz projekt,
ale inna grupa miała.
I mamy indeksy towarowe.
Indeks towarowy jest stwierdzeniem,
czy ta konstrukcja jest nowym produktem,
czy nie jest nowym produktem.
I teraz mam do was pytanie.
Jeżeli mamy dwa długopisy,
jeden jest niebieski, drugi czerwony,
to mamy jeden produkt,
a kolor jest jego cechą,
czy mamy dwa odrębne produkty?
Bo jeden jest czerwony, a drugi jest niebieski.
Mamy jeden produkt,
długopis,
dwa cechy.
I to jest właśnie problem.
Dlaczego niektóre wdrożenia się nie udają?
Nie można przenosić tych
doświadczeń z firmy A
na firmę B.
Bo jeżeli jest firma A, która sprzedaje długopisy,
a cechą tego długopisu jest to,
że on pisze,
to kolor tego długopisu jest cechą,
ale nie definiującą.
Czyli tak jak powiedziałeś,
jest indeks materiałowy jeden,
ale są dwa kolory.
I mamy takie coś w sklepie internetowym.
Długopisy, indeks,
długopis 1, 2, 3,
cecha niebieski czy czerwony.
Ale gdybyś założył firmę,
która produkuje gadżety reklamowe
dla Coca-Coli i dla IBM,
to kolor nie jest cechą produktu,
a jego definicją.
Bo IBM ma niebieski, a Coca-Cola ma czerwony.
I to są dwa różne indeksy materiałowe.
W tej drugiej firmie to będą dwa odrębne
indeksy materiałowe.
Bo to są różne produkty.
Bo długopis firmowy IBM-a
to nie jest długopis, który ma cechę IBM.
To jest długopis dla IBM-a.
A cechą będzie kształt tego długopisu.
Bo IBM ma generalnie,
produkty reklamowe dla IBM-a są niebieskie,
załóżmy, że tak jest.
Czy ten długopis jest,
nie wiem, dłuższy czy krótszy,
jest jego cechą.
Ale nie jest to cecha definiująca gadżet firmy IBM.
Ale w momencie,
kiedy idziemy po długopisy my,
normalni ludzie, do sklepu,
to dla nas ten długopis jest długopisem,
bo naszą cechą tego długopisu jest to,
że on pisze, a to, czy on jest pomalowany
na czerwono, czy na niebiesko,
dla nas nie ma większego znaczenia.
Przynajmniej w większości.
Za każdym razem musicie się zastanowić,
czy naprawdę zrozumieliście
co to znaczy.
Nie ma czegoś takiego,
że jedno wdrożenie systemu magazynowego
można powielać w innych firmach,
bo to tak samo wygląda.
To jest jeden z największych błędów
firm informatycznych i projektantów software'u.
W firmie, która produkuje gadżety reklamowe,
logo na długopisie
będzie cechą definiującą produkt.
A w innej firmie
kształt długopisu będzie cechą definiującą,
a kolor będzie tylko po prostu cechą,
wariantem.
A to jest tylko w niektórych wdrożeniach
początek dramatu tych wdrożeń.
Większość wdrożeń systemu informatycznych
to są wtopy,
bo ludzie nie zadali sobie trudu,
żeby zrozumieć z czym walczą.
Ja Wam chyba na pierwszych zajęciach
pokazywałem taki wykresik.
Ponad 90% projektów IT na świecie
to są wtopy.
Zaraz wkleję, żeby nie było,
że zmyślam.
Ten wynik się w zasadzie nie zmienił
od wielu lat.
Weźcie sobie do serca
tą tabelkę, którą Wam zaraz wkleję,
bo to jest problem tej branży.
Już macie.
Ono się robi.
Weszło, czy nie weszło?
Ładuje się.
O, już jest.
To jest problem tej branży.
To jest dramat.
Wyobraźcie sobie, że rakiety,
albo samochody osobowe
są tworzone z taką skutecznością.
Ten świat by się zawalił.
Także wracając do tego, co my tutaj mamy.
Jakość oprogramowania
to jest przede wszystkim
istniejąca lista wymagań,
która jest definicją produktu.
Jeżeli jakiś produkt
nie spełnia wszystkich wymagań,
to nie jest produkt niskiej jakości.
To jest inny produkt.
Dopóki produkt nie spełnia wszystkich wymagań,
nie jest tym produktem.
O który nam chodzi?
Ja dostaję do ręki
jako audytor,
czy rzadziej jako biegły, umowy.
Nasz system ma 15 cech.
Udało się osiągnąć 11.
To pan płaci.
Jest troszeczkę niższa jakość.
Nie, to jest jeden wielki bzdet.
To nie jest to, co zostało zamówione.
A potem są dyskusje.
Czy ten produkt jest bardzo zły, troszkę zły,
czy tylko nie tak bardzo zły,
ale jeszcze troszkę.
Tak więc
diagram przypadków użycia
to jest definicja produktu.
Jeżeli mówimy o wymaganiach
pozafunkcjonalnych i powiemy sobie,
że ten system się nie psuje częściej
niż raz w roku,
a jeżeli się zepsuł dwa razy w roku,
to to jest inny system.
Bo nasz miał się psuć raz,
a ten inny się psuje dwa razy.
To nie jest jakaś ortodoksja,
tylko po prostu jeżeli klient mówi
milion złotych zapłacę
za samochód,
który się psuje raz w roku.
No to jak się nie zepsuje
to też nie ten system.
Zwróćcie uwagę na taką rzecz,
że jak samochód się nie zepsuje
to nikogo nie obchodzi.
Dobrze, że o tym mówisz,
bo to jest kolejny przypadek.
Tylko tu mamy trochę zdefiniowany
tego, wymagania
nie do końca dobrze,
bo wymaganie było, że się zepsuje raz w roku,
a nie więcej niż raz.
Ma zepsuć, to ja go sam zepsuję
pod koniec 31.
Słuchajcie, jeżeli kupujemy samochód osobowy,
samochód osobowy zgodnie z kodeksem ruchu drogowego
i tym jakie są przeglądy,
to jest między innymi samochód,
który zgodnie z kodeksem ruchu drogowego,
przynajmniej w Polsce,
ma jeździć,
jeżeli mówimy o drogach publicznych,
to najszybszym miejscem w Polsce
jest autostrada 140 km na godzinę.
To samochód, który ma silnik mocniejszy
i potrafi jeździć
180 km na godzinę,
nie jest lepszym samochodem,
tylko jest głupio droższym samochodem,
bo i tak nie wolno jeździć szybciej 140 km na godzinę.
Nie wiem po jakiego grzyba
ludzie kupują szybsze samochody,
skoro i tak nie wolno jeździć szybciej
niż 140 km na godzinę w Polsce.
A to już jest kwestia marketingu,
psychologii i perswazji.
Kupno samochodu,
który jeździ szybciej niż 140 km na godzinę
ma tą cechę,
że to nie jest lepszy samochód,
to po prostu jest droższy,
przynajmniej legalnie.
Jeżeli ktoś ma oprogramowanie,
podam wam prostszy przykład.
Być może się powtórzę,
ale
ja mam zegarek mechaniczny.
Wiecie jaka jest dokładność
zegarków mechanicznych?
Przeciętny, dobry zegarek mechaniczny.
Jaką ma dokładność?
Normalny zegarek mechaniczny
wymaga korekty
raz na kwartał.
Mój kolega,
być może wy też,
nie czujcie się atakowani.
Prosty przykład.
Jak wam się wydaje?
To nie jest tajemnica.
Mój zegarek kosztował niecałe 300 funtów.
Zegarek szwajcarski,
który kosztuje,
niedawno widziałem,
czy macie świadomość,
że jego dokładność jest identyczna
jak dokładność mojego zegarka?
Dlaczego?
Bo prawa fizyki powodują,
że zegarki mechaniczne
nigdy nie będą dokładniejsze.
Żaden zegarmistrz we wszechświecie
nie przeskoczy praw fizyki.
To znaczy, że zegarek Zuckerberga
za milion i mój
chodzą w zasadzie tak samo dokładnie.
One identycznie wskazują czas.
Jeżeli się umówimy,
do tych kilku sekund,
do dwóch, trzech na dobę,
czy minuty, niecałej minuty
na kwartał, czy pół roku,
to to co ja mam na ręku jest zegarkiem.
To co ma Zuckerberg jest zegarkiem.
Jak ktoś ma na ręku elektroniczny zegarek,
bo moje wskazówki są
prawdziwie mechaniczne,
a ktoś ma wyświetlane na ekranie,
to teraz mam pytanie.
Czy zegarek, który chodzi z dokładnością,
jak wasz kolega pokazuje,
jeżeli się skupimy tylko na wskazywaniu czasu,
żadnej innej funkcji,
to mój zegarek jest
lepszy, gorszy od zegarka kolegi waszego?
Jak chodzi tylko o wyświetlanie,
no to nie, to jest ten sam zegarek.
Na przykład
przypuszczam, że jak masz zegarek elektroniczny,
to podobnie jak Windowsy,
a propos wymagań, my rozmawiamy o wymaganiach.
Nie, nie, nie, tu Linux.
Prawdopodobnie zegarek waszego kolegi
pokazuje czas z dokładnością, nie wiem,
do jednej tysięcznej sekundy.
Załóżmy, że to prawda.
To jest bardzo możliwe, tak?
A teraz mam do was pytanie.
Co w waszym życiu
wymaga pomiaru czasu
z dokładnością większą
niż jedna minuta?
EKG, pulsometr.
Okej, z dokładnością do sekundy.
No.
To są te bardzo rzadkie przypadki.
Ale milcząco zakładam,
że na tej sali nikt nie ma podłączonego
rozróżnika serca do swojego zegarka.
A dwa, że jak będzie chciał mieć pulsometr
czy podobne urządzenie,
to jest to inne urządzenie, ono nie jest zegarkiem.
Ona ma w środku generator.
Wiem, że możesz mieć...
Zwróćcie uwagę na taką rzecz.
No to już nie jest zegarek wtedy do końca.
To już nie jest zegarek.
Ale okej, idźmy tym tropem.
Ja wam zaraz wytłumaczę, dlaczego drążę ten temat.
Załóżmy, że twoje urządzenie na ręku
pokazuje ci tętno, nie?
Załóżmy.
No, mi pokazuje, no.
Okej, no teraz pytanie brzmi.
Z jaką dokładnością interesuje ciebie
czy twojego lekarza tętno?
Z jaką dokładnością?
No, tam dwóch, trzech,
powiedzmy, pięciu.
Ileś uderzeń serca
na minutę, nie?
No nie mierzymy tego z dokładnością do jednej tysięcznej
uderzenia serca, tylko do jednego
uderzenia serca, nie?
To znaczy, że zegarek mój
i ta część, która jest zegarkiem
waszego kolegi, kolega nie ma lepszego zegarka,
kolega ma coś,
co jest kompletnie w wielu miejscach nieprzydatne
do niczego. Znaczy ma C, ma funkcjonalność,
której nie jest w stanie wykorzystać.
Przecież samoloty startują
z dokładnością do minuty,
autobusy na przystanku mają
przynajmniej w ZTM-ie
w Warszawie
regulaminową dokładność plus trzy minuty,
jak się umawiacie z kumplami na piwo, to
z dokładnością do kwadransu najczęściej,
zajęcia,
spóźnienia na zajęcia są
rozpatrywane w granicach minut,
nikt na świecie nie mierzy czasu
poza powiedzmy szpitalami
i paroma innymi miejscami
z dokładnością lepszą niż minuta.
To po co ludzie kupują
zegarki, które chodzą z dokładnością do jednej
tysięcznej sekundy,
przepłacając za nie?
No teraz wyobraźcie sobie...
No ale jakich? No pokaż mi,
kto z was, kto z was, mówię poważnie
słuchajcie, bo to jest tak, mamy software
i...
No konkretnie w zegarku elektronicznym
to ja nie korzystam z niego
bo chciałem mieć zegarek,
ja korzystam, bo chciałem mieć
powiadomienia na ręce
z telefonu. Okej, słusznie, dlatego masz
na ręku coś, nie tylko zegarek,
ale popatrz na taką rzecz, że
jeżeli mamy, my mamy coś takiego
jak zegarek w komputerze, zegar systemowy
i on tam chodzi
w zasadzie z dokładnością do sekundy,
więcej nikt nie mierzy. To co mamy
na ręku i teraz, jeżeli
mówimy o wymaganiach na system informatyczny,
to jest ten sam problem.
Jeżeli to jest zegarek,
którego cechą, funkcjonalnością,
celem zakupu
jest to, żeby się nie spóźniać
do szkoły, do pracy, na autobus,
na pociąg, na samolot,
a nie jesteśmy człowiekiem, który mierzy
nawet nie puls serca, tak,
ale mierzy, nie wiem, prędkość bolidów
czy tam powiedzmy, jak jest bieg
na 100 metrów, to tam liczą
z dokładnością do jednej dziesiątej
czy do setnych części sekundy, tak, do setnych.
To są te rzadkie przypadki na olimpiadzie,
to na 100 metrów prawie wszyscy tak samo
szybko biegają, bo tam już tam
jedna dziesiąta, jedna setna sekundy
się liczy. Normalny człowiek tak nie żyje.
To znaczy, że 99,99
firm
będzie kupowało oprogramowanie,
które, gdyby było zegarkiem,
ma chodzić z dokładnością do minuty.
Czyli jeżeli ktoś sobie kupi zegarek
do celów biznesowych,
który ma dokładność jedna tysięczna sekundy,
to to nie jest lepszy software,
tylko to jest niepotrzebny software,
bo za to trzeba zapłacić.
Pamiętajcie, że
oprogramowanie, w ogóle systemy
projektujemy nie po to, żeby były
najszybsze, najlepsze i najdroższe,
znaczy być może fabryka tak myśli,
ale jeżeli już mówicie o użytkownikach,
no to OK.
Projektując oprogramowanie,
skupiamy się
na definicji celu,
w którym jest przypadek użycia
jeden, drugi, trzeci, piąty,
bo to są przypadki użycia i ich cechy,
to jest definicja produktu.
Czyli system dla biblioteki
będzie systemem dla biblioteki,
jeżeli
będzie obsługiwał karty katalogowe,
będzie obsługiwał listę życzeń,
będzie obsługiwał wypożyczenia,
będzie obsługiwał rejestr czytelników
i będzie udostępniał dane na zewnątrz,
nazywamy to API biblioteki.
Jeżeli
którakolwiek z tych cech nie zostanie spełniona,
to to nie jest nasz system biblioteki,
to jest jakiś inny system.
My możemy się umówić,
że będziemy go wdrażali etapami,
nie ma w tym nic złego.
Tak jak samochodem.
Nie najpierw kupimy samochód,
a siedzenia kupimy za pół roku.
Tylko wtedy musimy się zdecydować,
że ok, siedzenia są podniesieniem komfortu jazdy,
definicja samochodu brzmi
sam się przemieszcza,
a więc jak sobie przy kierownicy kucniesz,
to masz samochód.
Ale jak tam nie ma jednego koła
i ten samochód nie będzie jeździł,
to to nie jest samochód.
Czyli urządzenie, które ma
skórzane, mięciutkie fotele
może być samochodem,
ale urządzenie, które nie ma tych foteli
może być samochodem.
To wy musicie jako projektanci,
analitycy, obojętnie,
zdefiniować czym jest przedmiot
zamówienia, projektu itd.
Przypominam jeszcze raz,
nie ma nic złego w tym,
że produkt,
bo ten produkt ma więcej
niż jedną funkcjonalność.
To jest bardzo ważne.
I teraz skąd się wzięło to,
że nie cenimy komponentowe
aplikacje?
Bo umawiamy się,
że jeżeli nasz system
jest duży i tych funkcjonalności
ma pięć i jest możliwe
używanie trzech funkcjonalności,
a nie wszystkich pięciu,
to tak naprawdę mamy coś w rodzaju
pięciu odrębnych produktów.
Czyli my możemy powiedzieć,
OK, na tym ekranie
mamy pięć różnych rzeczy.
Mamy karty katalogowe.
Czy karty katalogowe same z siebie
służą?
Czy może istnieć system,
który ma karty katalogowe
i nie ma tych pozostałych
czterech rzeczy?
Dlaczego służą karty katalogowe?
Karty katalogowe są do tego,
żeby stwierdzić,
że istnieje
w bibliotece książka
pan Tadeusz Mickiewicza.
To jeżeli karty katalogowe są,
a nie ma kart wypożyczeń,
to mają swoją rolę.
Dowiedzieliśmy się z tej funkcjonalności,
że w tej bibliotece jest książka
pan Tadeusz Mickiewicza.
Bo ta funkcjonalność nie służy
do wypożyczeń, tylko do stwierdzania
faktu, że ta książka jest
w księgozbiorze.
To znaczy, że możemy sobie wyobrazić
sytuację, w której wdrożyliśmy
karty katalogowe, pozostałe cztery
funkcjonalności będą wdrażane
za miesiąc, dwa, trzy.
Ma to sens. Dlaczego?
Dobry projekt,
aplikacja dobra,
to znaczy, że
każdy use case
można wdrożyć niezależnie
od pozostałych,
bo to jest pięć definicji,
pięć use case'ów tworzy
nasz produkt.
Ale to mogły być, na przykład
bez API też będzie system,
tylko my mówimy, ok, nasz system
ma cztery funkcjonalności, cztery funkcje,
cztery usługi, whatever.
I w tych punktach utrzymania i rozwoju
to wzorce projektowe,
każda usługa aplikacji
może funkcjonować
niezależnie od pozostałych,
podstawowy warunek
architektoniczny.
Drugi warunek, powinny być możliwe
do wdrożenia w dowolnej kolejności,
bo każda z nich sama
z siebie do czegoś służy.
Możemy
brać pod uwagę fakt, że one będą
jakoś integrowane z sobą, o tym za chwilę.
I teraz przełącz się na diagram,
który pokazuje, jak to wygląda
pod względem komponentów,
ten high level design.
Ta architektura spełnia
te wszystkie wymagania.
To znaczy, że komponenty,
te pięć bloczków po prawej stronie,
nie są z sobą
w żaden sposób połączone.
To znaczy, że można je wdrażać
w dowolnej kolejności,
można go wyłączyć
i reszta się nie posypie.
Potrzebujemy wspólny komponent
żeby te cztery niezależne integrować.
Bo cechą komponentów
wypożyczenia jest przechowywanie
danych o wypożyczeniach,
a Saga Koordynator
jako komponent służy po to,
żeby koordynować pozostałe cztery.
Nie ma takiej opcji
w menu jak Saga Koordynator.
To jest cecha architektury,
bo jeżeli mamy mieć cztery
nie połączone z sobą komponenty,
czy tam pięć w tym przypadku,
to potrzebujemy szósty,
który to połączenie zrealizuje.
Ale ta aplikacja,
jeżeli chodzi o koszty utrzymania
i rozwoju jest,
jako wdrowiec, perfekcyjna.
Dlatego nie robimy,
jeżeli ktoś chce mieć aplikację
wysokiej jakości, nigdy nie będzie
monolitem, bo monolit zawsze będzie
trudny i kosztowny
w utrzymaniu i rozwoju.
Jakość aplikacji
w stu procentach
zależy od jej architektury,
a głównym cennikiem jakości
jest koszt wytworzenia
i jej utrzymania i rozwoju.
Jakość pracy z ekranem
nie jest cechą jakości aplikacji,
tylko wymaganiem.
Jeżeli zamawiamy
o oprogramowaniu, które fakturuję,
to znaczy,
że mamy definicję pojęcia faktura,
jest szablon.
Jeżeli aplikacja źle nalicza VAT,
to to nie jest
niskiej jakości aplikacja,
to nie jest ta, którą ja chciałem.
To jest jakiś inny software.
Wtrącę pytanie tu po drodze,
bo dość często argumentem dlaczego
się robi takie monolity,
mini-monolity, to się tłumaczą,
że to jest właśnie mniejszy koszt
wyprodukowania.
Wiadomo, że większy koszt jest później
utrzymania, ale...
Wyprodukowanie monolitu niekoniecznie
jest mniejszym kosztem
niż aplikacji komponentowej.
Skąd się to bierze?
To jest tak,
bo to jest bardzo dobre pytanie.
Ludziom się wydaje,
że jak mają software
podzielony,
znaczy nie podzielone na kawałki,
to znaczy, że nie ponoszą koszty
projektowania komponentów.
To jest taka sama sytuacja
jak z rowerem.
Można sobie wyobrazić,
pamiętajcie o jednej rzeczy,
projektowanie oprogramowania
zawsze będzie zawierało w sobie
element rozwiązywania
i badania problemu.
Nie istnieją projekty,
w których wszystkie pomysły
są dobre za pierwszym razem.
Im większy projekt,
tym bardziej jest to nieprawda.
To znaczy, że projektant,
tak samo jak projektant domów,
pierścionków,
będzie jako projektant,
jako twórca,
dwoma, trzema, piętnastoma podejściami
chciał osiągnąć efekt,
jakim jest wymaganie,
które ma spełnić.
Na przykład,
jak ktoś będzie miał
do spełnienia wymaganie,
że mają się integrować faktury
z numerami butów klientów.
Nie ma gwarancji,
że projektant tego systemu
wymyśli najlepszy sposób
tej integracji za pierwszym razem.
Może będzie musiał przetestować
dwa, trzy, cztery pomysły
i wybrać najlepszy.
To jest klasyka gatunku
przy projektantach.
Nie istnieje na świecie
każdy ołówek ma gumkę
na drugim końcu.
Projektant domów,
jakbyście na przykład,
czy ktoś z was kiedyś był,
byliście kiedyś
na przykład w sklepie
typu Castorama czy Leroy
i chcieliście na przykład,
szukacie rzeczy do łazienki,
to dzisiaj to jest tak,
że idziecie,
siedzi sobie człowiek
z jakimś tam archikadem
i wtedy będzie żółty,
to będzie to działało,
ale będzie brzydkie.
To ja nie chcę.
A płytki muszą być różowe.
To znaczy zanim dopuścicie
do remontu łazienki,
to na pewno porównacie,
że trzy, cztery warianty.
Teraz pytanie brzmi,
co jest tańsze,
przećwiczenie trzech wariantów
na archikadzie,
nie wiem, 20 minut,
czy wykonanie niezależnych
czy projektowanie,
bo ten drugi wariant był lepszy niż trzeci,
czyli zrywamy płytki
i wstawiamy te, co były wczoraj.
Ten wariant na archikadzie
będzie tysiąc razy tańszy.
To znaczy, że projektowanie
nie podnosi kosztów systemu,
tylko drastycznie je obniża.
Ja mam dziennych studentów
w czwartek, pytam się ich,
OK, zrobiliście, bo oni robią
identyczne laboratorium jak wy,
zrobiliście na diagramie
cztery poprawki, bo się okazało,
że to się może zdarzyć
na etapie projektowania.
Pytam się ich, ile wam zajęło
przećwiczenie trzech wariantów integracji
na diagramie sekwencji?
No zajęło im podobnie jak wam pół godziny.
Pytam się człowieka,
bo już mieli kodowanie,
ile by ci zajęło czasu
sprawdzenie tego wariantu
na żywca na kodzie?
Tydzień.
Takie są proporcje.
To znaczy, że jak ktoś
zrobi od razu w kodzie,
to ma na pewno dziesięciokrotnie drożej
na wejście, ma dziesięć razy drożej.
Po co wy się tego u Mela uczycie?
Przynajmniej mi się tak wydaje.
No po to, żeby to zrobić
dziesięć, sto razy taniej
i szybciej.
Żeby przetestować wariant na kodzie,
trzeba postawić środowisko,
napisać pięćset linii kodu albo więcej,
jeszcze wyłapać literówy w debuggerze
i odpalić test Tera.
To jest tydzień roboty.
A żeby to zrobić tak,
to macie diagram sekwencji,
architekturę i dwie godziny dla jednej osoby.
Bez żadnej platformy.
Zwróćcie uwagę, że wasz diagram UML
nijak się nie ma
do przyszłej technologii języków programowania,
bo to nie ten etap jest.
Ja znam projekty,
gdzie ktoś wybrał środowisko,
po testach się okazało,
że był kiepski wybór
i trzeba było zmienić środowisko.
A za poprzednie zapłacić.
Także,
jeżeli spojrzymy na to,
że jeżeli wymagania są definicją produktu
i nie dyskutujemy na ten temat,
czy one są, czy nie są spełnione,
bo nie mogą nie być spełnione,
to jedynym kryterium jakości systemu
jest koszt.
Absolutnie nic więcej.
Czyli jak ktoś kupuje samochód,
to zakładamy, że on jeździ,
wozi te torby i rodzinę,
to jedynym kosztem,
zwróćcie uwagę na tą rzecz,
jak ktoś ma samochód,
to już po pierwszym roku wie,
ile pali na 100,
nic więcej się nie liczy.
Jeżeli on spełnia wymagania,
jest klima, 5 ludzi wchodzi itd.,
łaski nie robi,
od tego momentu liczy się tylko jedna rzecz,
ile pali na 100,
nic więcej się nie liczy.
Jeżeli aplikacja, oprogramowanie
spełnia wymagania,
a zakładamy, że nie może ich nie spełniać,
to absolutnie jedynym parametrem
tej aplikacji,
odróżniającym zło od dobrych,
czyli oto świat od 40 lat
kruszy kopie.
Architektura.
Architektura.
Oto kruszymy kopie.
Gdybyście tą aplikację zrobili
jako monolit,
to musielibyście czekać półtora roku,
aż powstanie cała,
bo nie jest w stanie powstać troszkę.
Troszkę w sensie mamy 5 modułów.
Czyli dopóki, gdyby to był monolit,
to musicie czekać do momentu,
aż wszystko będzie działało.
A teraz, jak to się mówi,
kopiąc już leżącego,
jaki sens ma
podłożenie pod ten system
jednej centralnej relacyjnej bazy danych?
Nie ma to żadnego sensu.
Bo
jedna centralna relacyjna
baza danych z zasady
z wszystkiego robi monolit.
Dopóki nie macie wszystkich tabel,
nie wdrożycie jednego modułu,
bo nawet jakbyście chcieli zrobić jedną opcję
w menu, to i tak musicie mieć kompletną bazę danych,
bo jak nie, to będziecie za każdym razem
robili nową i migrowali dane.
Dlatego dzisiejsza architektury
mikroserwisowa, bo tak to się nazywa,
to jest podstawowy wzorzec,
to jest to, że jak mamy tutaj 5 aplikacji,
5 komponentów,
to każdy ma swoją lokalną wewnętrzną
bazę danych, bo niczego nie współdzielimy.
Tylko problem
zaczyna się
tego.
Relacyjna baza danych ma swoje jednak
plusy, bo tutaj mamy
nie mówię, że
w każdym miejscu, ale tu mamy
przykład książek.
Na start mam powiedzmy 10 tys. książek.
Każda baza nierelacyjna
bez problemu to przeszuka.
Idźmy do Biblioteki Narodowej.
No i co?
Ile w Bibliotece Narodowej jest książek,
ile w Bibliotece Narodowej
jest kategorii, ile w Bibliotece
Narodowej jest
autorów,
i później powiedzmy, że ja chcę
przeszukiwać bazę po autorze
używając pierwszych 3 liter
tylko z jego nazwiska, bo
nie pamiętam konkretnie.
No i jaki jest problem? Baza dokumentowa,
dobrze, że o to pytasz.
Otóż
jest taka fajna prezentacja
sprzed kilku lat, MongoDB,
co jest największym problemem ludzi,
którzy używają baz nieSQLowych?
To, że nie rozumieją, jak one działają.
Ale ja nie mogę sobie
przeszukać później wydajnie takiej bazy,
bo MongoDB nie da rady prędkościowo.
Poczekaj, momencik,
daj mi sekundę,
żebym czegoś nie zepsuł.
Mam dosyć nowe badanie.
Teraz wam pokażę coś.
24
kilkanaście razy szybsze od Oracle'a
na tej konkurencji, o której wspomniałem.
Ja nie lubię. Oracle jak dla mnie jest...
To może być inne.
Zaraz wam pokażę badanie,
które mam
sprzed kilku dni.
To jest jedno z nich.
To jest chyba to.
Słuchajcie,
dla tych, których to interesuje.
Bazy nieSQLowe
to są bazy,
które właśnie mają bardzo fajną cechę.
Odróżniają cechy definiujące od niedefiniujących.
Wrzuć uwagę na taką rzecz.
Po jakich kryteriach przeszukujesz
bibliotekę?
Autor, kategoria...
5-6?
Nie ma więcej.
Nie ma więcej.
5-6 kolumn do przeszukania.
Bo na grzbiecie książki masz...
Książkę możesz znaleźć,
bo masz rok wydania,
wydawca, autor, tytuł...
Co jeszcze?
Cztery mam.
Biblioteka Narodowa, co jeszcze będziesz miał?
Kategorie.
Pięć.
Jeszcze przypisy.
Co masz na myśli o przypisy?
No bo jak chcę na przykład
znaleźć książkę
o konkretnie, kiedy
wspominali tam, nie wiem, o
Mezopotamii, to nie będzie w kategoriach,
tylko to będzie w tych...
Nie ma takiej kategorii.
Równie dobrze możesz przekonywać resztę świata,
że pójdziesz do biblioteki i znajdziesz...
Proszę wszystkie książki, których głównym bohaterem jest Harry Potter.
Nie istnieje taka kwarenda.
My możemy
dodatkowo...
Akurat miałem narodowy projekt.
Nie istnieją takie kategorie.
Tak między innymi to jest wymyślone.
Biblioteka Narodowa przyszykuje,
potrafi, pozwala ci znaleźć książkę
na podstawie tych pięciu kryteriów,
które są na grzbiecie książki.
Jeszcze będzie ISBN szósty
i będą może dwie, trzy kategorie typu
fiction i tak dalej. Cztery, pięć kategorii.
Ale nie znajdziesz w żadnej bibliotece książki
pod tytułem, poproszę wszystkie książki,
której bohaterem jest Janko Muzykont,
a akcja dzieje się na południu Krakowa.
Nie istnieje taki katalog książek.
To mogę dać inny przypadek.
Ale to skończmy to.
To znaczy, że masz książkę.
To znaczy, że masz jedną tabelę w takim mongo,
która ma pięć kolumn, nierelacyjną.
W szóstej kolumnie
jest PDF, XML, JSON z całą tą książką.
Przepraszam, ale jak już mam
sześć kolumn, które znaczą mi to samo,
a szósta jest
PDF-em, to dla mnie
to już jest baza zwykła.
Nie, to jest baza dokumentowa.
Klasyczna baza dokumentowa.
Dlaczego? Bo nie masz relacyjnych,
masz tylko jedną tabelę.
Jedna płaska tabela na pięć kolumn.
To jest kwestia definicyjna właśnie.
Model relacyjny oznacza
wiele połączonych relacyjnie tabel
z usunięciem redundancji.
Jeżeli masz jedną płaską tabelę,
macie
jedną płaską tabelę na pięć kolumn
i niezależnie od tego,
czy w prawej kolumnie,
nie wiem, czy wiecie,
czy macie jedny Amazon.
Wyobraźcie sobie, że mielibyście bazę relacyjną,
napchaliście tam u Bezosa
do bazy książki,
pięć milionów transakcji po pierwszym roku
i macie piękną
bazę relacyjną na książki,
a potem przychodzi Bezos i mówi
dobra, od przyszłego roku sprzedajemy AGD.
To macie do przeprojektowania wszystko
i do migracji wszystko.
A jeżeli będziecie mieli coś takiego,
jedna tabelka, jedna,
cena, nazwa,
jakieś tam, nie wiem,
tabelka pod tytułem
typ sprzętu, nie, AGD, książki, tam, nie wiem,
buty, to macie jedną płaską
tabelę, nie mamy tutaj
potencjalnie żadnego SQL-a,
a w skrajnie,
w hipotetycznej, skrajnej kolumnie
jest w dowolnej formie tekst
JSON-owy, XML-owy, albo
PDF-owy, który jest precyzyjnym
opisem tego odkurzacza lub książki.
I tak działa Amazon od wielu lat.
Amazon piętnaście lat temu
z układem wyszedł z modelu relacyjnego,
bo tam się dobiły koszty.
Tam jest nierelacyjna baza.
Pamiętajmy, że model relacyjny to są połączone tabele
relacyjnie z usunięciem
redundancji. My możemy
sobie wyobrazić, że na MSSQL-u
postawimy jedną tabelę
bez żadnych relacji i to będzie
nie SQL-owy model danych.
Tak zwany tam, no SQL, whatever.
Nie mylmy to, że mamy
motor SQL-owy ze
strukturą danych, bo bazy
dokumentowe nie polegają na tym, że nie ma SQL-a,
bazy dokumentowe polegają na tym, że mamy
jedną płaską, hipotetyczną tabelę,
w której mamy kluczowe metadany
i w tej tabeli jest kolumna,
która jako jeden atrybut
trzyma cały
zbiór danych, na przykład w postaci
JSON-a czy XML-a. To znaczy,
że jeżeli mamy taką tabelkę,
a struktura bazy danych
nie przetwarza struktury tego pliku,
to znaczy, że w jednej tabeli
możecie mieć faktury, zamówienia,
Harry Pottera i katalog
książek z Narodowej.
Taka jest różnica.
Czy to nam nie utrudnia
życia po prostu, że tam może być wszystko?
Podaj przykład.
Ja nie mówię,
że to nam utrudnia. Ja się pytam,
czy to nam nie utrudnia życia,
że ja w jednej kolumnie mam wszystko.
No to właśnie problem polega na tym,
że to bardzo ułatwia życie, bo na razie
nie ma argumentów za tym, że to utrudnia.
Zwróćcie uwagę na taką rzecz.
Podam Wam kolejny przykład
z naszego podwórka. Zrobimy sobie jedną rzecz.
Klikamy
model, ten, component
karty katalogowe książek.
Klikamy go.
To, co mamy na ekranie,
to jest tzw. architektura
high level design.
Klikamy i na dole, jak się pojawi,
oczywiście każdy komponent
ma w środku jakąś architekturę.
W prawym dolnym rogu mamy
takie złamane haczy, taką złamane strzałkę.
Klikamy tą złamane strzałkę.
Nowy diagram.
Diagram class.
Dobra.
Jeszcze raz?
Powoli.
Klikasz komponent
karty katalogowe książek.
Jak go klikniecie,
w prawym dolnym rogu
pojawi się taka miniaturka takiej
złamanej strzałki.
To jest tak naprawdę diagram podległy.
Wybieramy nowy diagram.
Szukamy diagram class.
Ok. Naciskamy następny.
Pusty. Następny.
Ci, którzy są
szybsi mają problem.
Wracamy z powodu.
Nie usuwamy tej nazwy.
Chyba jeszcze raz muszę to wykliknąć.
Chyba jeszcze raz musisz.
Diagram class.
Możemy troszkę wolniej od początku.
Ok, dobra.
Nie ma problemu.
To powolutku.
Tutaj klikamy.
Jeszcze raz.
Jaka jest idea?
Visual pracuje w ten sposób,
że możemy sobie budować ten nasz model
od ogółu do szczegółu.
Udokładniając.
Będziemy teraz robili architekturę
low level design.
Ją się robi dla każdego komponentu osobno.
Jeżeli chcemy zrobić
w tej chwili projekt, model, bebechów,
komponentu, karty katalogowe książek,
to
klikamy ten komponent.
Jak się podświetli,
to nam w prawym dolnym rogu
pojawi się między innymi miniaturka
od ogółu podległości.
Klikamy tą miniaturkę
i mamy nowy.
Tam jest istniejący diagram,
bo możemy sobie w przyszłości to przekomponować.
Visual pozwala naprawiać
swoje własne błędy, żeby nie było.
Klikamy ten diagram podległy.
Nowy diagram.
Ta linijka u góry, to okienko,
to jest wyszukiwarka,
bo tych diagramów w Visualu jest dosyć dużo.
Diagram class.
Klikamy następny na dole.
Jak się podświetli następny.
Teraz nic nie ruszamy.
Visual wam podpowiada
nazwę tego komponentu.
Karty katalogowe książek.
Dopisał, że to jest
diagram class. Dla was do celów
edukacyjnych zostawmy to.
Nie ruszajmy tej nazwy, żebyście widzieli.
Zrobimy sobie na przykład
myślnik. Nie naciskaj
niczego. Dopisujemy
tam myślnik i dopisujemy architektura
LLD.
To się nazywa powszechnie low level
design. Naciskamy teraz,
klikamy ok.
I teraz
skorzystamy. To jest tak. Najpierw
poddetektando narysujecie, a potem wam powiem
z ilu wzorców skorzystaliśmy projektowych.
Klikamy w legendzie
klasę.
I teraz
uwaga. My mamy
przełącz się
na diagram komponentów. Reszta nie musi.
On jest tam poniżej.
Diagram komponentów.
Otóż nasz komponent
ma interfejs. To się nazywa
API karty katalogowe.
To znaczy, że my
korzystamy
z tego komponentu przez API,
a całe mięso
jest za interfejsem.
Nie ma innej drogi
do funkcjonalności komponentu.
Nie ma żadnej innej drogi nie przez API.
To znaczy, że
przełączamy się na ten diagram class z powrotem.
Na przykład control tabulator.
Albo przez to menu, obojętnie.
Czyli
ten komponent
wystawia to swoje publiczne API
i to jest ta klasa,
żeby...
Visual ułatwia to, bo moglibyśmy zrobić dwie rzeczy.
Żebyście poznali
trochę narzędzie. Po lewej stronie
w przeglądarce modelu
przejdź myszką, masz coś takiego, znajdziesz API
karty katalogowe.
Przeglądarka modelu. Jest?
API karty katalogowe.
Przeciągnij to drag and drop na nasz diagram.
W puste miejsce.
Znaczy...
Dobra, okej.
Przesuń to w lewo.
To jest ta klasa.
To...
Żeby narysować
to jest coś, co
na początku może być dla was trudne.
Otóż takie narzędzia jak Visual
to nie są narzędzia na poziomie
PowerPointa, Dravio czy jakieś tam Miro.
To jest potężny autokad,
taki archikat,
bo po lewej stronie macie
symbole,
których użyliście na diagramach.
Każdy diagram to jest jakiś
specyficzny widok
tego modelu.
Modelem naszego systemu jest to coś po lewej stronie,
a te diagramy to są kolejne widoczki.
Widoczek z tej perspektywy.
I teraz
na diagramie komponentów widzieliśmy
klasę
API karty katalogowe,
ale bebechy wszystkie
pozostałe zostały niejako
ukryte w komponencie. Komponent jest takim
bardziej abstrakcyjnym elementem.
I tam są jakieś bebechy, które teraz rysujemy.
Ten diagram klas jest diagramem, który
służy do pokazania wnętrza
tego komponentu.
Interfejs
tego komponentu jest jego częścią.
Rysujemy go na tych diagramach
HLD jawnie, żeby w ogóle
widać było, że tam jest jakiś interfejs.
A teraz chcemy pokazać, co za tym
interfejsem jest po prawej stronie,
tej hipotetycznej prawej.
Teraz, żeby to narysować na tym
diagramie, mamy
możemy to zrobić tak, że
wersja jedna
przeciągamy, bo my mamy to API
to API
to jest ta klasa, którą żeśmy narysowali ostatnio.
Jeżeli ją z repozytorium
przeciągniemy na diagram, to ona się
pokaże. Mamy API karty katalogowe.
Gdybyśmy chcieli to zrobić
inaczej, czyli narysować na piechotę
tą klasę, to teraz reszta
nic nie klika. Proszę kliknąć
ty, który pokazuje ekran. Kliknij prawym
klawiszem to klas, tą klasę,
która się nazywa klas.
Zjedź na dół
powiązane elementy
trzecia od dołu.
Przyłącz
do innego elementu modelu
i znajdź
tutaj API karty katalogowe.
Pierwsza u góry masz.
API karty katalogowe. OK. I złącz.
Tak.
Chcemy.
Co się stało? Powiększ.
Jak klikniesz na tą zieloną
kropkę kliknij. Nie, nie, nie.
Co się stało?
Otóż my
korzystając z cech takich narzędzi
to jest. My możemy
na diagramie pokazać klasę, która
już została wcześniej stworzona
w ten sposób, że ją przeciągamy
z repozytorium na diagram.
Visual ma też taką cechę,
że my możemy,
bo my możemy zrobić tak. OK. Narysowałem
interfejs, a potem się obudziłem
przecież to jest ten sam interfejs,
który narysowałem już miesiąc temu.
No to my możemy z dwóch elementów
zrobić jeden.
To co myśmy teraz zrobili
to myśmy zrobili prostą rzecz.
Powiedzieliśmy, że ten element, który narysowałem
no to powinien być ten sam.
To powinno być to coś, co ja narysowałem miesiąc temu.
A żeby nie psuć diagramu
to nam Visual to złączył
niczego nie niszcząc. Mamy porządek.
Tak.
Obojętnie który z nich. Znaczy wy
nie macie. Usuń jeden z tych
bo nie potrzebujemy dwóch.
Wywal go. Naciśnij.
Delete i poszło. Nie no to jest bezpieczne.
Będzie komunikat. I OK.
I teraz tak. To jest API.
Najpierw to narysujemy
a potem wam powiem co to był za wzorzec.
Teraz tak. Proszę kliknąć
klasę.
Wszyscy. Klikamy klasę w legendzie.
Wstawiamy klasę po prawej stronie
za interfejsem.
Nie. Klikamy klasę
i dajemy jej nazwę.
Logika karty katalogowe.
OK.
Ustawiamy to po prawej
stronie za interfejsem.
Naciśnij tą zieloną klopę. No dobra.
I tak po prawo. Prawo. Prawo. Prawo.
Prawo. Dobra. Trochę dalej w prawo.
Potrzebujemy trochę więcej przestrzeni między nimi.
No nie aż tak. Kolejna klasa.
Po prawej stronie od logiki.
Wklepujemy.
OK.
I teraz piszemy. Repozytorium
karty katalogowe.
Repozytorium
Repozytorium karty katalogowe.
OK. I ustawiamy po prawej stronie.
Taki łańcuszek będziemy mieli.
Znowu klikamy klasę.
Wstawiamy czwartą po prawej stronie.
I piszemy.
Napiszmy ładnie
koperta, żeby się to zrozumieło.
Koperta. Karta katalogowa.
Karta katalogowa.
I po prawej stronie.
To powinien być łańcuszek.
OK.
I teraz tak.
Przełączamy się na diagram przypadków użycia.
Wybieramy karty katalogowe.
Klikamy karty katalogowe książek.
Na tym przypadku. Prawy klawisz.
Otwórz tam szczegóły.
Otwórz szczegóły.
Klikamy diagramy.
Klikamy.
Klikamy ten formularz.
Karta indeksowa książki.
To znaczy, że
my już wiemy,
że będzie istniał jakiś opis tej książki.
Nie znamy jeszcze w detalach
tego opisu.
Ale wiemy, że istnieje takie coś.
Dokument.
Formularz. Karta indeksowa książki.
Oznacza, że istnieje miejsce,
do którego będą w przyszłości
wstawione atrybuty tych książek.
My na razie ich nie musimy wcale znać.
Nie w tym momencie.
Załóżmy, że na początek
my wiemy, że
klikamy otwórz.
Bo
na podstawie rozmowy z Waszym kolegą,
ekspert od książek
i super. My wiemy, że
my o książce wiemy, że ma.
Klikamy teraz część w legendzie.
OK.
Piszemy indeks.
Numer. Część.
Wklikujemy się do środka.
Klikamy tą część.
Klikamy i teraz tu do środka.
Nie przeciągasz tego. Klikasz.
Przejeżdżasz myszą do środka formularza
i klikasz jeszcze raz.
O. I tam piszemy
indeks.
OK.
Przesuwamy na górę.
Ten diagram
to jest dosyć
nie wiem dlaczego, dosyć rzadko używany
w WMLu diagram. To się nazywa
diagram struktur złożonych. To jest diagram,
który służy do modelowania
mniej czy bardziej wyrafinowanych złożonych.
Na czym polega problem? Że takie coś jak
karta katalogowa, faktura, to nie jest
klasyfikator, który ma płaską listę
atrybutów, bo nie istnieją takie dokumenty.
Faktura ma
przynajmniej trzy poziomy zagnieżdżenia.
Bo jest faktura.
Na fakturze jest nabywca.
W nabywcy jest sekcja
adres, a w adresie jest sekcja
kod pocztowy na przykład.
My mamy sytuację podobną.
Przesuń ten indeks na przykład gdzieś tam
w lewo, do rogu.
Ten diagram
ma tą przyjemną cechę, że on może
służyć za tak zwany brudny mockup.
Klikamy teraz klasę.
Klikamy klasę. Wklikujemy się
do środka.
Do naszego formularza.
Piszemy
autor.
Powiększ troszkę
tą klasę.
Okej, może być.
Wklikujemy się teraz w część
i autor ma imię i nazwisko.
I wklikujemy do środka.
Do autora. Imię.
Ustawiamy
po lewej stronie u góry.
Wklikujemy się
z nazwiskiem.
Okej.
I gdzieś tam.
Traktujcie to jako taki
wstępny mockup.
Książka ma jeszcze
oprócz autora ma
wydawcę.
Klikamy część w legenda.
Wklikujemy się do środka.
Piszemy wydawca.
Kolejna część. Rok wydania.
Znowu.
Legenda. Część. Do środka.
Rok wydania.
Kolejna część.
Do środka.
Gatunek.
Jeszcze jedna część nam brakuje.
Dobra.
Indeks, gatunek, rok wydania, wydawca.
Jest autor.
Klikamy znowu część.
Jeszcze jedna część.
Wklik na dole i piszemy
streszczenie.
Powiększ to streszczenie,
żeby zajmowało cały dół.
Możecie spokojnie ten diagram traktować
jako taki tzw.
brudny mockup
tego formularza. Okej.
I teraz tak.
Nie musimy się zastanawiać, czy przewidzieliśmy wszystko,
bo nie ma to większego znaczenia.
My wiemy, że w wersji minimalnej
uzgodniliśmy z bibliotekarzem, dyrektorem biblioteki,
że o każdej książce my wiemy, że ma numer
indeksowy, gatunek, rok wydania, wydawca,
autor, a autor ma takie cechy
jak imię i nazwisko.
No dobra. Przełączamy się z powrotem
na nasz
diagram klas.
Tylko na koniec
w takiej klasie
my wiemy, że wtedy nie można
indeksować po tym
streszczeniu, nie można indeksować po
wydawcy. A z czego
tak uważasz?
No jak zaczniemy indeksować po streszczeniu
to baza nam będzie dwukrotnie większa.
Bo ty myślisz
o relacyjnej bazie.
Ale w bazie nierelacyjnej, jeżeli
włączymy sobie tego
indeksy tekstowe
dla rzeczy
typu streszczenie,
to przecież baza albo będzie powolna,
albo będzie
dwa razy większa, bo po prostu
musi wszystko to przeindeksować
w środku, albo wyłączymy
indeksy i musi przeszukiwać po wszystkim.
Nie gniewaj się. Właśnie udowodniłeś
światu, że nie należy dawać projektowania
coderom, bo tego się nie robi.
Jest taka fajna prezentacja w Mongo.
Ludzie, którzy używają
baz Mongo czy Postgres w wersji
nie SQL-owej, używają nawyków
baz relacyjnych i próbują indeksować
pełnotekstowo te JSON-y, które
to jest kompletnie od czapy pomysł.
Tego się nie robi. To jest najgłupszy pomysł pod
słońcem architektonicznym. Ale mówię, w takim wypadku nie mamy
wyszukiwania pod tym. Zaraz się dowiesz,
że mamy i to będzie szybsze niż w SQL-u.
Przeczytaj sobie to. Jak mamy 10 tysięcy,
10 milionów na przykład
tabelek. 10 tysięcy
obiektów JSON-owych.
Bez indeksowania on musi przejrzeć
wszystkie tak czy tak.
Ja bym ci nie dał nawet jednego projektu.
Zaraz zobaczysz dlaczego. Nie gniewaj się.
Nie, ale naprawdę.
Możemy szukać przez wszystkie
bez indeksowania. Zaraz ci pokażę.
Mamy, jest
wzorzec, on się nazywa repozytorium
i koperta. Mało, nie wiem
czemu nie jest aż tak popularny, ale
bo on nie występuje w bazach relacyjnych.
Zaraz będziesz miał odpowiedź na swoje pytanie.
To co macie na ekranie
to są raz, dwa, trzy, cztery
wzorce projektowe. Przede wszystkim
zaczynamy i teraz tak. Pamiętajcie
o jednej rzeczy, że JSON
nie jest klasą w rozumieniu C,
klasą kodową. To jest ciąg znaków.
XML czy JSON nie jest
klasą, tylko jest stringiem.
Dlatego my w
UML-u używamy takich stereotypów
jak dokument, bo
w UML-u i w projektach
takie pojęcia jak dokument, formularz,
komunikat to są synonimy.
To są synonimy.
Z perspektywy aplikacji
ciąg znaków
niosący na przykład strukturę tej karty
wypożyczenia jest
dokumentem, formularzem, komunikatem.
Nie musimy się zastanawiać o czym, bo to jest
cały czas ten sam. Nie ma
sensu teraz dywagowanie, czy to jest XML
czy JSON, bo to jest po prostu string.
To jest ciąg znaków ASCII.
I teraz jak my sobie z tym radzimy?
To co teraz zobaczycie, to jest wzorzec projektowy
znany od połowy lat 90.
Klikamy interfejs
API, karty katalogowe.
Jak się pojawi miniaturka,
łącznika, ciągniemy to do logiki.
Puszczamy, wybieramy literkę,
strzałeczka otwarta
z literką U. Użyj.
Łączymy, ona nie ma nazwy.
Łączymy tak kaskadowo
wszystko w prawo.
OK.
I teraz tak.
Na tym etapie
wzorzec,
jeżeli chodzi o wzorce projektowe,
API jest bramą
do bebechów. Nie ma
strzałki USE pokazują,
która klasa, którą w ogóle
może wywoływać. Nie wolno
zrobić żadnego obejścia na skróty.
Bo każda z tych klas
ma ściśłą
rolę do spełnienia.
Jadąc od prawej strony,
koperta, karta katalogowa, to jest klasa,
która służy do właśnie
indeksowania i przechowywania tych JSON-ów.
Klikamy prawym klawiszem na klasie
koperta, karta katalogowa,
stereotypy,
na dole edytuj,
visual pokazuje,
jest więcej,
wybieramy entity z małej litery,
przenosimy na prawo i OK.
Otóż ten wzorzec projektowy,
który się nazywa boundary control entity,
czyli to jest
coś podobnego do domain driven design.
Otóż umawiamy się, że dany
klasyfikator, kawałek kodu,
może pełnić rolę
bramy interfejsu albo
przechowuje
logikę, albo służy
do przechowywania treści typu
komunikat, dokument, do niczego więcej.
Książeczka
Rebeki Wierszbruck z 2003
roku, to ładnie opisuje,
to jest książka, która się nazywa
projektowanie aplikacji zorientowane na
odpowiedzialność klas.
Pierwszym wzorcem projektowym,
którego tutaj
użyliśmy, jest skupienie się, że
każda klasa, każdy komponent
kodowy ma tylko jedną
odpowiedzialność. I teraz tak,
jeżeli mówimy o
ten wzorzec BCE,
Boundary Control Entity, oznacza, że dana
klasa jest albo interfejsem, bramą,
czyli boundary, albo
przetwarza konkretną logikę,
albo służy do
utrwalania
komunikatów.
Entity
to jest klasa, która
z kawałek kodu, którego rolą jest
przechowywanie, utrwalanie
i nic więcej.
Klikamy prawym klawiszem na repozytorium karty
katalogowe.
Stereotypy.
Wybieramy control, przez małe
c, control.
OK.
To samo robimy z logiką.
Control.
API oznaczamy jako Boundary.
Na nazwę kliknąć.
Przepraszam.
Te ikonki.
Koperta, karta,
katalogowa, jaki stereotyp?
Tam ustawiamy?
Jeszcze raz.
Jaki stereotyp na koperta,
karta katalogowa?
To jest Entity.
I teraz tak. Klikamy prawym klawiszem
na kopertę.
Koperta po prawej.
Dodaj atrybut, dodaj u góry,
dodaj atrybut
i piszemy
dokument.
Mogę jeszcze
zapytać, bo dwa po środku
to są oba, to są control?
Tak.
Otóż ten wzorzec BCE
to są trzy stereotypy
Boundary, Control, Entity.
Definicje są takie. Boundary to jest
interfejs. Po prostu przepuszcza.
Control
trzyma operacje
realizujące logikę biznesową.
Powinna to być idealnie jedna operacja.
Przynajmniej jedna publiczna.
Klasa Entity to jest właśnie
klasa kopertowa.
Koperta, czyli wzorzec projektowy Envelope
to jest założenie takie,
że my, dane,
rozumiane,
zapomnijcie o relacyjnym modelu.
Problem polega na tym,
że my na świecie jako ludzie
nie używamy pojedynczych pól.
Nigdy.
Relacyjny, pozbawiony redundancji model
jest absolutnie
nienaturalnym modelem. On na świecie
nie występuje. Na świecie macie
dragon, fakturę, umowę.
Macie kupę rzeczy. Na świecie
nie istnieje model relacyjny
w praktyce.
Jest najbardziej bezużytecznym modelem.
On się wziął w 72 roku.
Kod. Jak opracował model
relacyjny, to nie po to, żeby
w nim trzymać dokumenty, tylko żeby na
mainframe'ach robić potężne, masowe
obliczenia. Model
relacyjny powstał do prowadzenia
potężnych obliczeń typu
fabryka samochodów liczy koszty produkcji
samochodu i ma tam, nie wiem,
1000 podzespołów.
Korporacja ma 10 000 pracowników
i liczy wynagrodzenia, a wynagrodzenie ma 15
składników, bo jeszcze jest akord.
Po to powstały modele relacyjne.
I tamten model relacyjny miał tych tabel 10, 15, 50.
Ktoś padł na bardzo kiepski pomysł,
żeby dokumenty, które mają po 10,
50 atrybutów rozsypywać
na kolumny i
wiersze tabel relacyjnych,
co powoduje absolutnie
masakryczne skomplikowanie tych systemów.
Świat zaczął od tego odchodzić
mniej więcej w 99,
98 roku.
Pierwszą bazą dokumentową
właśnie komercyjną
była chyba właśnie Mongo, która się ukazała
na rynku w 2001, 2003 roku.
Potem został również udostępniony
moduł dokumentowy w Postgresie.
Tego jest masa. Ja w latach
90-tych jeszcze, jak projektowałem systemy,
bo to nie musi być zaraz Mongo,
po prostu możecie wziąć na przykład
takiego Informixa, Oracle'a czy tam MySQL'a
i użyć pojedynczej tabeli.
Nie musicie mieć modelu relacyjnego.
Pojedyncza tabela w dowolnym motorze SQL'owym
jest niczym innym jak dokumentową bazą danych.
To, że my akurat
musimy użyć zapytania SQL'owego,
żeby to z tego Oracle'a, Microsoft'a
czy MySQL'a wyciągnąć, to jest inna bajka.
W Postgresie też tak jest.
Ale jeżeli sobie powiemy, że my mamy faktury,
ale te faktury nie są...
Nie wiem, czy was pytałem, wiecie ile tabel
ma przeciętny system ERP? Znaczy system finansowo-księgowy.
Same finanse i księgowość.
Ile tam jest tabel w relacyjnym modelu?
Kilkaset.
Ile jest dowodów księgowych?
Mniej niż 10.
To znaczy, że jeżeli wy
jeden z dowodów księgowych,
faktura, faktura korygująca,
cztery dokumenty magazynowe,
jakaś nota księgowa,
wy te wszystkie pola rozsypiecie
na te 100 tabel,
to żeby to do kupy skleić,
musicie wykonać zapytanie SQL'owe,
które po wydruku ma kilka stron na cztery.
Jedynym rzeczą, jaką osiągacie,
to jest spowolnienie systemu.
Nic więcej nie osiągniecie.
To jest popracowanie,
które tu macie porównanie z tego roku.
Przejście na model relacyjny...
Ale gdzie jest spowolnienie?
Spowolnienie jest takie.
Ale ja przeszukuję sobie, idę tego.
Mam w ogóle inny typ indeksowania,
kiedy idę w ten sposób.
Zakończymy ten rysunek i zobaczysz.
Mamy po lewej stronie przypadek użycia.
Znajdujemy ten przypadek użycia
karty katalogowe.
Bartłomiej, powiem ci jedną rzecz.
Jest tyle porównań badawczych na rynku
co do wydajności.
Po prostu bazy dokumentowe
są nawet tysiąckrotnie szybsze
od ich oskolowych.
Zależy od przypadku wykorzystania.
Zaraz do tego dojdziemy.
Karty katalogowe.
Mamy formularz, karta katalogowa.
Karty katalogowe.
Przeciągamy ten formularz.
Klasa, formularz.
Przeciągamy to na prawo.
Masz klasę, formularz, karta, indeksowe, książki.
Podmieszką.
Jeszcze niżej.
To jest klasa.
Nie, tą gówno. Przeciągnij na prawo.
Ustaw to gdzieś po prawej stronie u góry.
Czemu to usunąłeś? Dobrze było.
Trochę bardziej w prawo.
Bo musimy to podpiąć do naszej koperty.
I teraz tak.
Proszę kliknąć kopertę.
Proszę kliknąć kopertę.
Proszę?
Znaczy się,
w repozytorium przeglądarka modelu
mamy wszystkie klasy.
Nie, nie, ja mówię o polu
katalogowa książki.
Prawym klawiszem klikamy
koperta, prawy klawisz
dodaj
atrybut i klikamy atrybut.
Klikamy jeszcze raz na tej klasie
koperta katalogowa.
Żeby się podświetliła tylko.
Powolutku, nie prawym.
Klikamy tylko, żeby się podświetliła.
I teraz tak. Wybieramy po lewej stronie
w legendzie symboli mamy
związek, zależność
zależność
ok, powoli, nie śpiesz się.
Klikamy to.
Najeżdżamy myszą na atrybut
dokument.
Na atrybut dokument, przyciskamy
klawisz myszy lewy
i wciągniemy na nazwę klasy
formularz karta indeksowa.
Na tytuł. No dobra, może być.
Przesuń ten formularz w prawo.
Żeby to było w miarę ładnie.
Ok, może być, dobra.
Co żeśmy narysowali?
Stereotyp dokument oznacza,
że jest to
ciąg znaków, a nie klasa
reprezentująca kawałek kodu.
I teraz tak. Klikamy na tę
kopertę, karta
katalogowa prawym klawiszem myszy.
Dodaj atrybut.
Zachowaj.
Ej, nie atrybut, przepraszam,
operację. Jeszcze raz.
Jeszcze raz.
Klikamy prawym klawiszem
na tej klasie koperta.
Dodaj operację.
Piszemy zachowaj.
Przywołaj.
Druga klasa, przywołaj.
Naciśnij enter.
A teraz escape.
To akurat taka niemiła cecha
wizualna. Po prostu ten atrybut,
ten trzeci musisz usunąć.
Usuń to.
I teraz klikamy.
Załóżmy, że logika biznesowa
do wyszukiwania,
pamiętajmy, że nie zmyślamy wymagań.
To jest taka bardzo przykra cecha,
która niszczy projekty.
Na razie się dowiadujemy z wymagań funkcjonalnych,
bo wszystkie książki w bibliotece
wyszukujemy na podstawie takich cech jak
np. nikt nie szuka książki po imionach,
bo wtedy znajdzie półbiblioteki,
tylko po nazwiskach.
Klikamy prawym klawiszem
koperta, karta katalogowa.
Prawy klawisz.
Dodaj atrybut.
Nazwisko.
Kolejny atrybut.
Indeks.
Kolejny atrybut.
Rok wyboru.
Wydania.
Kolejny atrybut.
Gatunek.
Załóżmy, że na razie wystarczy.
Przepraszam bardzo.
A jak usunąć atrybut?
Jak mam nadmiarowy?
Musisz tylko kliknąć, żeby się podświetlił
i usunąć delete.
W tej sytuacji jak macie oznaczone te stereotypy
to musisz najpierw klasę podświetlić
tak jak tutaj właśnie
koleżanka, a potem usunąć
zbędny atrybut.
I teraz
jak to wygląda z perspektywy
ile tu jest wzorców projektowych.
Przede wszystkim
podzieliliśmy
ten komponent
ten hipotetyczny kod na cztery części.
Jedna część banalnie prosta
API karty katalogowe.
Druga część logika. Tam będą jakieś
hipotetyczne walidacje.
Repozytorium.
Repozytorium to jest kawałek kodu
wyobrażający taką sytuację,
że karty katalogowe
koperta, karta katalogowa
to jest taka wielka szuflada
i tam są te koperty.
Tam są koperty.
I teraz mamy taką sytuację
w której pełna
karta katalogowa
na której mogą być jeszcze zdjęcia
tam na tej karcie katalogowej może być
kupę rzeczy. Streszczenie, zdjęcie
układki, kupę różnych rzeczy.
To mamy teraz taką kopertę.
My do tej koperty wkładamy do środka
całą kartę katalogową
a na kopercie
piszemy to
czego będziemy używali
żeby szybko dotrzeć do właściwej
koperty.
Praca
z takim repozytorium
w formie koperty wygląda w ten sposób, że
na kopercie
mamy atrybuty, które służą do
obsługi pracy z tą szufladą
czyli żeby znaleźć
pełny opis książki
Adam Mickiewicz Pan Tadeusz
ze streszczeniem, ze zdjęciami.
Może być kupa różnych rzeczy.
To my musimy dotrzeć do koperty
Adam Mickiewicz Pan Tadeusz
na tej kopercie będą na przykład te atrybuty
czyli jeżeli ktoś będzie chciał znaleźć
coś Mickiewicza
to w tej szufladzie bardzo szybko
nie otwierając kopert
znajdzie koperty Mickiewicza
być może będą cztery, może pięć
pięć kopert, znaczy okej
to ja poproszę tą kopertę Pan Tadeusz
i wtedy wyciągamy ze środka wszystkie bebechy.
No ale to dalej mówimy
albo przeszukujemy całą bazę po kolei
albo indeksujemy po
stringu zwykłym
Masz koperty, na których masz pięć atrybutów
No mam pięć atrybutów
atrybuty w formie stringa
Tak, wszystkie atrybuty są stringiem, dokładnie
Nie mam żadnych określeń
co tam jest, co tam nie jest
może być huzia na juzia
może być Pan Tadeusz napisany
w jednym konkretnym
tego
nie masz, to jest nieprawda
masz kopertę
pamiętaj, że koperta nie niesie logiki
to jest kolejny bardzo zły pomysł
pakowanie logiki
do atrybutów
bo jeżeli zapowiemy
że mamy JSONa czy XMLa
to JSONa walidujemy
wcześniej
po to jest logika karty biznesowej
to znaczy, że koperta dostaje
zwalidowaną kartkę papieru
bo koperta jako klasa
nie obsługuje absolutnie żadnej
logiki biznesowej
wchłania jak pelikan każdy ciąg znaków
Koperta po prostu nie sprawdza
czy w polu wydawca
nie ma mojej daty urodzenia
tylko koperta przyjmuje, że to jest dobre
bo nie ma wyjścia
to, czy JSON w polu
zawiera nazwisko
sprawdza logika, a nie koperta
to jest bardzo wygodne
Dobrze
ale sama walidacja
może być nawet po stronie bazy
A to jest najgłupszy pomysł pod słońcem
No ale czemu?
No dlatego, że ta baza wtedy zaczyna mieć obciążone
zażynasz procesor jak kota
Nie zażynam procesor jak kota
bo jeżeli ja na przykład
piszę sobie w Javascriptie
bo lubię Javascript
i robię walidację po swojej stronie
w Javascriptie
to Javascriptem robiąc walidację
będę miał wolniej niż Postgresowi
powiem tu masz schemę
tu masz JSONa, którego dostajesz
odpowiedz mi, czy tak, czy nie
no to Postgresowi tego nie mówimy
bo po to są wzorce projektowe, żeby z nich korzystać
baza danych ma nie obsługiwać żadnej logiki
walidacji, ani typów danych
po drugie
pamiętajcie o jednej rzeczy
że jak będziecie integrowali dwa komponenty
albo dwie aplikacje
to między aplikacjami API nie przesyła typów danych
nawet jak sobie zrobisz
najlepszą walidację typów danych po stronie bazy
będziesz musiał wszystko
bo będę przesyłał z JSONa i tak
bo przesyłasz JSONa
walidacja JSONa i typów danych
powinna się odbywać nie w bazie danych
a przed nią
ale tak czy tak muszę przesyłać
schemę JSONową do tej walidacji
jeżeli mówimy o JSONie
żeby sobie ułatwić życie
bo mogę to napisać w kodzie
mogę już skorzystać ze schemy JSONowej
spójrz na to z tej strony
tu
wyobraź sobie, że twoja baza jest dyskiem twardym
no
jest dyskiem twardym
tak
dyskiem twardym jest w większości przypadków
szybszy od motorów SQLowych
sam robiłem testy na UNIX
poważnie
to
nie ma problemu
ja dam bazę dwuterową
zobaczmy co będzie szybsze
słuchajcie
pamiętajcie, że mówimy o kosztach
teraz mamy taką sytuację
tu, skąd się te wzorce projektowe wzięły
wzorce projektowe wzięły się stąd, że praktyka pokazuje
że mają dużo lepsze efekty
od testów
powiem wam tak
ja jako człowiek, który zajmuje się nauką
nigdy nie kwestionuje organoletycznych badań testowych
i teraz co my tu mamy
ten wzorzec
polega na tym, że
to co się nazywa łańcuch odpowiedzialności
oznacza, że budujemy sobie
taki łańcuszek
od prawej strony mamy utrwalanie
które nie przyruchowuje żadnej logiki
absolutnie żadnej
nawet typów danych
na czym polega problem z typami danych
problem z typami danych polega na tym
że jeżeli wykorzystacie
typy danych konkretnego motora bazy
to znaczy, że ta baza staje się
technologicznie niewymienialna
chyba, że istnieje inna
która ma identyczną walidację typów danych
jeżeli będziecie mieli
jeżeli wpakujecie walidację
czyli element logiki biznesowej
do tej klasy kopertowej
to znaczy, że jesteście uzależnieni
od tego konkretnego producenta bazy danych
natomiast niezależność
platformy polega na tym
że ten projekt aplikacji będzie funkcjonował
w 100% bez wiedzy o tym
na jakim motorze go postawimy
i w jakiej technologii go wykonamy
wielkim plusem
projektowania jest to
że to się nazywa ładnie
platform independent
my możemy zaprojektować aplikację
nie mając wiedzy
w jakiej technologii będzie implementowana
bo to jest bardzo szkodliwa wiedza
to znaczy, że zanim ktoś wybierze
pythona, java, dotneta czy whatever
powinien istnieć w 100% opracowany
model architektury i logiki
bo jeżeli nie
to znaczy, że część waszego projektu
jest instrukcją obsługi platformy
a nie waszą wartością
na czym się można przejechać
z czym walczy świat
pewnie wiecie, że są na świecie popularne startupy
problem polega ze startupami na tym
że jak przychodzi człowiek
który chce kupić tego startupa
to on chce zapłacić między nim
za tzw. wartości intelektualne
i teraz jeżeli typy danych będą
obowiązywać w 100%
to ja jestem w 100% właścicielem
praw majątkowych do tego projektu
jeżeli sobie powiem, że ok
jedną trzecią logiki biznesowej
obsługuje mi produkt licencjonowany
przez microsofta, oracla
to znaczy, że to już nie jest mój projekt
tylko ja muszę zapłacić kupę pieniędzy
dostawcy platformy
bo część logiki biznesowej
np. typy danych obsługuje platforma
to jest ten moment, kiedy się dowiecie
że nie jesteście właścicielem praw
żeby całkowicie oddzielić
opis, mechanizm działania
i architekturę od narzędzi
to jest jeden z kluczowych powodów
dla którego te aplikacje są tańsze
i teraz ten wzorzec
z perspektywy
samego projektowania aplikacji
separuje funkcjonalność
poszczególnych komponentów
ten komponent, zwróćcie uwagę
że nie ma żadnego znaczenia
czy koperta klasa katalogowa
jest plikiem JSON XML na dysku twardym
czy jest stringiem w bazie
Microsoft podgres czy w Mongo
cytując tą prezentację
z Mongo, bardzo fajna
może Wam potem jak nie zapomnę
ona jest łatwa do znalezienia
ludzie z Mongo mówią jedną rzecz
nie traktujcie JSONów jak tabel w bazie danych
bo to jest najgorszy pomysł
Mongo dokładnie nie po to powstało
jeżeli ktoś traktuje pole w Mongo
czy w jakimś tam podgresie
że JSON jest tabelą z wierszami
to przegrał
bo to jest najgorsza forma używania tej bazy
baza MongoDB
że jeden JSON jest osobnym zapisem
a nie wierszem
w tym JSONie
bo JSON czy XML będzie miał podział
jeżeli ktoś traktuje
tą strukturalną część tekstową
tego XML czy JSONa w ten sposób
że te zagnieżdżenia są wierszami i tabelami
to jest absolutnie najgorsza forma
bo to jest tak jakbyście zrobili tabelkę w Wordzie
nie ma żadnego sensu
dlatego wnożec koperta
jest zbudowany w ten sposób
że jeden obiekt
niesie jeden plik JSONowy
a nie kolekcję
i teraz to znaczy
że jest to odwzorowanie kopert w szufladzie
jedna koperta zawiera w sobie
tylko jedną fakturę
jaki jest pożytek z takiej bazy
wyobraźcie sobie
że biblioteka narodowa
tylko chwila
jeżeli to jest odzwierciedlanie kopert w szufladzie
no to jak ja fizycznie muszę przeglądać
te koperty w szufladzie
nie mam możliwości poza
idę po kolei przez wszystkie koperty
a moja koperta jest
milion dziewięćset dziewięćdziesiąt dziewięć tysięcy
tam któraś
no to muszę przejść przez wszystkie
no to już pomijam sobie jak sobie z tym radzi motor
masz po prostu koperty w szufladzie
one są ułożone na przykład alfabetycznie
załóżmy że je ułożysz według indeksu
czy my nie mamy mieć na uwadze
tego jak później może sobie radzić motor
jak to będzie wykorzystywane
i jak ewentualnie ta baza może urosnąć
no
bo jeżeli mówimy o indeksowaniu tekstu
to już mam problem
przynajmniej dwudziestokrotnie
jeszcze raz
w bazach dokumentowych nie indeksujemy tekstu
zapomnijcie o tym to jest bardzo zły pomysł
no to bez indeksowania tekstu
to ja muszę iść metodą przeglądam wszystko
nie masz po to są atrybuty
masz atrybuty dokument nazwisko indeks
ta baza tu masz koperty
jeżeli idę po imieniu
tak
to albo jest w motorze
indeksowanie tego zaimplementowane
przez co i tak istnieje indeks
ale to wchodzisz za głęboko
z tej perspektywy
zróbcie sobie wszyscy prosty eksperyment
przede wszystkim
taka moja sugestia
odejdźcie od ideologii
tylko róbcie testy na żywym ciele
jak wam się wydaje
może kto z was wie ile jest plików na dysku
w przeciętnym komputerze windowsowym
dużo
tam są miliony plików
ile czasu zajmuje znalezienie pliku
na podstawie fragmentu nazwy
10 sekund 15 20
dużo
jeżeli masz swoje fajne CV
wpisz sobie w okienku u góry fragment nazwy
to w najgorszym przypadku
wśród tych milionów plików na dysku C
znajdziesz go w ciągu góra kilkunastu sekund
dlaczego
bo dysk twardy
jest klasyczną bazą dokumentową
otwierasz
otwierasz okienko z dyskiem
masz kolumnę
nazwa pliku data
tylko ja wtedy szukam po nazwie pliku
a nie po zawartości pliku
ja nie szukam po zawartości w bazie ERP
tylko jak szukam
w bazie obiektowej
po nazwie pliku
to ja nie szukam po to co jest
pamiętajcie o jednej rzeczy
słuchajcie
chcę wam wytłumaczyć
że aplikacja ma spełniać
wymagania
i nic ponad tym
czyli jeżeli wam mówi
biblioteka narodowa
że my wyszukujemy książki
na podstawie trzech
czterech
być może nawet dziesięciu cech
to nie zmyślajmy indeksowania
według pełnej treści Harry Pottera
bo za to nikt nie będzie chciał zapłacić
tylko jak ja mam
dziesięć milionów książek na przykład
tak
i mam wyszukiwać po autorze
powiedzmy w tym samym momencie
przyjdzie mi tysiąc
użytkowników z zapytaniem
bo ma być możliwość wyszukiwania
przez stronę internetową
to na koniec jest
wymaganie biblioteki narodowej
że to ma być wykonywane
w odpowiednim czasie
widzieliśmy na początku
musimy zrobić jedną rzecz
w 2003 roku
Coborn opublikował w swoim doktoracie
ideę architektury heksagonalnej
rzecz polega na tym
żeby absolutnie nigdy nie mieszać
platformy z logiką biznesową
podstawowe założenie dobrej architektury
absolutnie nigdy nie mieszamy platformy
mamy wymagania funkcjonalne
i poza funkcjonalne
mamy znalezienie książki
według jednych z pięciu kryteriów
natomiast jeżeli coś się zwolni
czy szybciej to mamy
szybsze dyski
być może jakiś motor bazy danych
zwiększamy ewentualnie
szybszymi dyskami koszty
to znaczy że nie jest większy koszt
ale szybszy dysk jest droższy
zrobiłeś jakieś kosztownie
z takiej aplikacji
tak
szybszy dysk
HDD
w porównaniu do SSD
to jest koszt wielokrotnie zwiększony
podaj cenę takiego dysku
bo ja niedawno kupowałem dysk
jeden z moich klientów kupował dysk
do macierzy
bo okazało się że macierz jest szybka
bez względu na objętość
ma tam parę terabajtów
ta macierz nigdy nie była wydajnościowo
jakimś większym ograniczeniem
ograniczeniem była jej pojemność
taki dysk kosztuje 2, 3, 4 tysiące złotych
no właśnie taki dysk
SSD oczywiście
2, 3, 4 tysiące
to jest 2, 3, 4 tysiące złotych
ten cały system który ma ta firma
który obsługuje produkcję
kosztował pół miliona
i problemem tej firmy nie jest to
że oni szukają części zapasowej
nie 10 sekund tylko 11
problemem tej firmy jest to
że ta część nie została informacyjnie
podpięta do autokada
to jest problem tej firmy
i za to zapłacili pół miliona
bo musieli przeprojektować dwa komponenty
to jest pikość
jeżeli ktoś ma aplikację za milion złotych
tylko mówimy o dysku twardym do macierzy
tak po prostu
ale firma nie operuje
my sobie dokupimy kolejny dysk do serwera
jeżeli mówimy o macierzy
że musimy dokupić kolejne 20 terabajtów
na macierz
bo na przykład mieliśmy dwa
a teraz będzie potrzebna 20
i wszystko to ma być w dyskach SSD
to już zaczynamy od kosztów 40
40
no powiedzmy 4 tysięcy za dysk
idziemy całościowo
dysk ma
po 4 tera
wykupmy sobie dysk SSD 4 tera
to i tak jest ciężko
to 10 tysięcy
masz aplikację
idę już
4 tera dyski 10 tysięcy złotych
20 tysięcy
to mamy już 50 tysięcy złotych
za same dyski
teraz backupy redundancja
powoli
jesteśmy na poziomie 50 tysięcy złotych
a teraz pytanie
czy macie pojęcie ile kosztuje projekt
w którym bazy faktury są w bazie relacyjnej
cała połowa logiki jest w tych relacjach
ustawodawca nam mówi
że do faktury mają dojść dwa pola
a integracja z produkcją oznacza
że na fakturze ma się pojawić pole
którego nigdy nie było
nazywa się numer zlecenia
to znaczy że masz do przeprojektowania bazy migracje
całych tych danych
w drugie miejsce wiesz ile to kosztuje?
nie więcej
bo robią takie projekty
jest ponad pół miliona
to znaczy że są dwa wejścia
jak zrobisz dobrą architekturę
to nie wydasz połowy miliona na migracje
a jak tego nie zrobisz
to twoją metodą oszczędzisz 50 tysięcy
na dysku twardym
takie są proporcje w kosztach
dziesięciokrotna różnica
w tym momencie oszczędzę tylko na bazie
która ma w tym momencie 20 tera
nie mówimy o sytuacji
no to
no i to jest plus
no to aplikacje tak trzeba poprawić
w każdym przypadku
nie trzeba
nieprawda
nie muszę poprawić aplikacji
kiedy dochodzi mi nowe pole
tak to znaczy że dochodzi ci nowe pole
i oszczędzasz pół milionowy projekt
dlatego bo masz
nierelacyjną bazę
i cztery komponenty które niczego nie spółdzielą
to są wyniki sprzed trzech miesięcy
pół miliona versus 50 tysięcy
bo ktoś się uparł na dysk twardy
to nie jest 50 tysięcy
50 tysięcy to jest podstawowa cena
tylko żeby zapewnić to
jak mówimy o całości
w każdym przypadku
to mówimy o całości
słuchajcie mówmy o całości
to powiedzmy o wydajności jeszcze
o tym przeszukiwaniu bazy
która ma 20 tera
mówmy o cenie w procesorze
bo dysk to jest mniejsza cena
słuchajcie niech słuchają wszyscy
jak wam się wydaje
ile megabajtów
zajmuje milion faktur
w systemie ERP
to nawet nie będzie
ćwierć terabajta
to znaczy że
mówimy o problemie
który nie istnieje we wdrożeniach biznesowych
w ogóle
taki problem nie istnieje
co nam najwięcej zajmuje czasu
na bazie danych
no przeszukiwanie
no nie inaczej
słuchajcie
patrzycie w drugą stronę
ile znaków ma zapytanie SQLowe
do bazy ERP
które ma około 5000 tabel
które pozwala wydrukować fakturę
ile to jest znaków w tym SQL
nie wiem
nie?
5000 tabel
select i from view
no i jeszcze masz te tabele
pamiętamy że w bazie relacyjnej masz
bazę wyciągasz fakturę sprzed 5 lat
w międzyczasie zmieniłeś
kilkanaście razy nazwy produktów
i ich ceny
i zmienił się adres kontrahenta
to znaczy że musisz pojechać
po przynajmniej kilkudziesięciu tabelach
żeby odtworzyć fakturę
w stanie sprzed 5 lat
to nie jest 5 linijek linii SQL
tylko to jest zapytanie SQLowe
na kilka stron a 4
to idźmy teraz to samo
jeszcze raz
ja mam wrażenie że wy nie wiecie
skąd się biorą koszty systemów informatycznych
to jest problem
konserwacja kodu SQLowego
na kilka stron a 4
kosztuje majątek z pisaniem i testowaniem
to jest problem
dzisiejsze projekty
jakbyście zobaczyli kosztorys
pięcioletni kosztorys projektu
przeciętnego projektu biznesowego
to się szybko przekonacie
że dyski twarde stanowią
i motor bazy danych jako licencja
stanowi absolutnie marginalny koszt
bo najwięcej kosztów pożerają
mendajsy programistów
w tym projekcie
który był niedawno
słuchajcie mamy taki ksef
w takim ksefie postawienie infrastruktury
zajęło im niecały kwartał
wydali trochę forsy
i skończyły się koszty
poza maintenance dla oracla
największym kosztem ksefa
są dziesiątki mendajsów tych ludzi
to są koszty utrzymania i rozwoju
a nie dysk twardy za 50 tysięcy
powinniście wiedzieć
że mówię wam uczciwie
żebyście mieli świadomość
że jakbyście zobaczyli
budżet projektu biznesowego
to koszty sprzętu
są marginalne
my nie mówimy o systemie
chmura microsoftowa
my mówimy o systemie
dla jednej firmy
jedna firma nie ma
miliardów faktur
tylko ma ich kilka tysięcy
jedna firma nie ma
100 terabajtów bazy danych
tylko ma pół terabajta
wasze dyski twarde
jeżeli nie trzymacie zdjęć i filmów
to wam by wystarczyło
normalny człowiek pisze
pisze w wordzie excelu
żeby zapchać dysk twardy
przeciętnego komputera
który ma dzisiaj nawet w sklepie
widziałem pół terabajta rzadka jeden
to trzeba harować w tym wordzie czy excelu
latami
no chyba że ktoś zaściągnie 4 filmy
systemy biznesowe nie przetwarzają filmów
tam są te terabajty nikomu do niczego nie potrzebne
faktura zajmuje kilkadziesiąt kilobajtów
milion faktur
mieści się w moim telefonie
skupiacie się zupełnie na czymś
co nie stanowi żadnego kosztu w systemach biznesowych
ja zacząłem od problemu wyszukiwania
ale to się mówi że jeżeli
wyszukujesz fakturę
pokaż mi system biznesowy
jeżeli szukamy faktury
nawet w takim ksefie na całą Polskę
to szukamy tą fakturę na podstawie nipa
na podstawie 3-4 parametrów
nic więcej
to mamy zamknięte na 3-4 parametrach
słuchajcie
to jest jakiś prosty eksperyment
ale to mówimy o problemie
że musimy dorzucać kolejne parametry
koszty
liczą się absolutnie tylko i wyłącznie koszty
a największym kosztem systemów informatycznych
są koszty ludzkiej pracy
bo system który działa
i nie wymaga ingerencji programistów
whatever kogo
jest minimalnym kosztem
jeżeli firma
jeżeli zmieni się przepis
mówię wam poważnie
weźcie sobie w swoich firmach
sprawdźcie strukturę kosztów
wdrożenia systemu informatycznego
i szybko się przekonacie
że spełnianie wymagań poza funkcjonalnych
jest najprostszą rzeczą pod słońcem
bo Bartłomiej
skupiłeś się na wymaganiach poza funkcjonalnych
to robi 99% deweloperów
to jest absolutnie
najmniejszy koszt każdego wdrożenia
o które ludzie toczą
jakieś długie dyskusje
ta dyskusja nasza
zwróćcie uwagę teraz
my w 100% rozmawiamy
o wymaganiach poza funkcjonalnych
których spełnianie w projektach
jest najprostsze
i najtańsze
bo żeby spełnić wymaganie poza funkcjonalne
czas odpowiedzi systemu
dopisujemy jedną pozycję do faktury
u dostawcy platformy
roboty jest na 2-3 dni
i to jest koniec
natomiast jeżeli się dowiecie
że wam się zmieniły przepisy finansowe
to macie dziesiątki mendejsów
najdroższego zasobu jakim jest Homo Sapiens
tworce projektowe powstały tylko po to
żeby ograniczyć
największą część kosztową
to jest ludzka praca
przeprojektowanie systemu jest najdroższe
sekundka
mój główny ból
i tutaj cała argumentacja jest taka
że mówimy żeby w ogóle nie używać tu bazy relacyjnych
ja się zgadzam
że możemy trzymać
na przykład jak mamy tą pojedynczą tabelkę
mamy wszystko tam
mamy kolumnę JSON
w ogóle jest człowiek zadowolony
to nie dla rzeczy
które nigdy się nie zmienią
bo wydawca
gatunek
i nie wiem właśnie jeszcze autor
to nie będzie nagle
że będzie super wydawca
kolumna się zmieni
czemu pojedynczych rzeczy nie możemy
wynosić do relacji
a reszty trzymać dalej jako obiekt
ale teraz cały czas mówimy
co nazywasz obiektem
bo to jest też często pytanie
co nazywasz obiektem?
składnię już nie kolumnową
jakiś JSON cokolwiek
to na tym etapie nikogo nie interesuje
zwróćcie uwagę że my cały czas mówimy
o sytuacji którą mamy na ekranie
zróbmy jeszcze jedną rzecz
dokończmy to żebyśmy wiedzieli
to są ostatnie zajęcia
dobrze że ta dyskusja jest
pamiętajcie o jednej rzeczy
po pierwsze architektura heksagonalna
jako separacja platformy
i jej wydajności od logiki biznesowej
powstała głównie po to żeby tego nie mieszać
że przeniesienie aplikacji
z platformy A na platformę B
powinno być możliwe bez żadnego problemu
to jest pierwszy warunek utrzymania systemu
bo są firmy które
podam Wam przykłady z życia
małe projekty
nie wiem czy wiecie dopóki
to dzisiejsza fobia niektórych ludzi
projekty na których dokumentów
w których dokumentów biznesowych
jest nawet kilkadziesiąt tysięcy
doskonale funkcjonują
na dyskach twardych plikach CSV
i plikach typowych
chodzą jak przeciąg
są mega szybkie
a migracja z platformy A na platformę B
zajmuje parę godzin kopiowania plików
takie są realia
na czym polega problem dzisiejszych wdrożeń
problem polega na tym
że dzisiejsze systemy biznesowe
nawet jeżeli mówimy o systemach na produkcji
uwierzcie mi
że z perspektywy pojedynczej firmy
wydajność nigdy nie była
ja nie pamiętam żeby w ostatnich 30 latach
wydajność platformy
była jakimkolwiek problemem kosztowym
czy projektowym
natomiast problemem są zawsze
zmiany przepisów
zmiany logiki biznesowej
wydzielenie spółki zależnej
wdrożenie nowego programu lojalnościowego
w systemie CRM
to są problemy tej branży
problemem branży nigdy nie była
wydajność systemu CRM
problemem było to
że ktoś ma czwarty program lojalnościowy
i nie jest w stanie tego zrobić
mniej niż powiedzmy 500 mendejsów programistów
to jest problem dzisiejszego świata
zapomnijcie o problemach pod tytułem
wymagania poza funkcjonalne
bo spełnianie wymagań poza funkcjonalnych
nigdy nie było żadnym wyzwaniem
w projekcie
to było tylko 10 sekund żeby skoczyć
do komputronika po nowy dysk
natomiast dlaczego
weźcie sobie gazety
zastanówcie się
przeczytajcie sobie
nie będziemy o tym rozmawiali teraz
Bartłomiej znajdź ostatnie 4 problemy
i e doręczeń
nie znajdziesz nigdy problemów wydajnościowych
problemem e pułapu
nie jest jego wydajność tylko logika wewnętrzna
problemem ksefa nie jest wydajność
tylko logika
problemem e doręczeń nie jest wydajność platformy
tylko logika
słuchajcie
weźcie
zacznijcie czytać artykuły o porażkach
nigdzie na świecie
problemem wdrożeniowym
nie były wymagania poza funkcjonalne
wysypał się herc
potężne wdrożenie herca
sieci wypożyczalni
w Stanach Zjednoczonych
zapłacili kupę milionów dolarów
firma zbankrutowała
na czym zbankrutowała
na mendejsach koderów
a nie na dyskach twardych
jeżeli mówimy o lidlu
wdrożenie SAP w lidlu
czwierć miliarda euro
lat temu 6
wymagania poza funkcjonalne
za grosze w skali tego
czwierci miliarda spełnili w pierwszych 2 tygodniach
7 letni projekt
wypierniczył się na logice biznesowej
to jest problem tej branży
wymagania poza funkcjonalne
nigdy nie były problemem
wzorce projektowe architektoniczne
to jest rozwiązywanie problemów
największego kosztu aplikacji
jakim są mendejsy programistów
to jest koszt
wzorce projektowe
nie ma wzorców projektowych
rozwiązujących problem czasu dostępu
do dysku twardego
bo to nigdy nie było na tym świecie problemem
problemem jest na przykład to
że mamy wielodziedzinowy system
i jest problem
który opisał Fowler
pod tytułem
nie da się na jednej bazie relacyjnej
zintegrować systemu sprzedaży
i systemu obsługi zgłoszeń tiketowych
artykuł ma półtorej strony
znajdziecie Fowlera
to jest problem
przepraszam że powiem tak
bez obłudek
nie próbuję budować bazy relacyjną
do wszystkiego
to tu jest chyba problem w tej osobie konkretnie
ale to jest
tu się z tobą zgadzam
ale to co teraz powiedziałeś
jest problemem firmy aplikacji krytyczne
która robi ksef
temat na inne zajęcia
słuchajcie kończmy ten rysunek
znaczy proponuję to podsumować tak
starajcie się jak przeglądacie
szczególnie historyczne projekty
zwracać uwagę na to
co było przyczyną porażki projektu
jeżeli my w tej branży
jako projektanci
nie wiem kto jeszcze
analitycy
chcemy ulepszyć coś we wdrożeniu
to pierwszą rzeczą jaką powinniście zobaczyć
podrążyć historycznie
to jest zobaczyć co było przyczyną
niepowodzenia projektu informatycznego
i szybko się przekonacie
że wymagania poza funkcjonalne
nigdy nie są problemem
w projektach informatycznych
w związku z tym
na wymaganiach poza funkcjonalnych
trzeba się w ogóle skupiać
bo one nie są problemem
to jest problem zamówienia
to nie jest problem który będzie wam
rozwali wam wdrożenie na dwa lata
wdrożenia rozwala architektura
aplikacji
i nic więcej
dlatego wzorce projektowe
macie na ekranie
jeszcze raz szybko się podsumujmy
macie na ekranie od prawej strony
wzorzec koperta polega na tym
że
przetwarzamy tylko te dane
które są istotne z perspektywy
logiki biznesowej
i pamiętajcie chodzi o wymagania funkcjonalne
wymagania to są te rzeczy
których potrzebuje użytkownik
jeżeli użytkownik
w księgowości wyszukuje faktury
na podstawie NIPu
daty transakcji
tam nie wiem 3-4 atrybutów
to mamy taką sytuację
bo jaką korzyść daje ten wzorzec projektowy koperta
bo wzorce projektowe są po to
żeby jakieś korzyści były
ten wzorzec ma tą korzyść
zmiana struktury całego dokumentu
ten formularz karty indeksowej
może mieć 30 pól
rzecz polega na tym
że jak będziecie zmieniali strukturę karty indeksowej
to ta struktura nie wymaga żadnej inkarencji w kod
dlaczego?
bo ten kod nie przetwarza całej struktury karty
która ma kilkadziesiąt pól ze zdjęciami
a przetwarza tylko i wyłącznie 5 atrybutów
nic więcej
to znaczy że dopóki te 5 atrybutów
gwarantuje nam spełnienie wymagań funkcjonalnych
zmiana struktury wzorów dokumentów
nie daje nam
nawet dodatkowej jednej roboczo godziny
w tym projekcie
to jest problem
który rozwiązaliśmy
dlaczego amazon przeszedł na model bazy
z tak zwaną zmienną ilością kolumn
to jest baza nie SQL-owa
dlaczego?
no bo oni mają co roku jakieś nowe produkty
te produkty mają nowe atrybuty
a oni nie chcą zmieniać logiki biznesowej
potężnej aplikacji
która robi miliony transakcji na dzień
bo wydajność tej platformy
nie jest problemem
wywalą dwa miliardy
postawią kolejny budynek
zajmie im to nie wiem miesiąc
natomiast problemem byłaby sytuacja
w której musielibyście przeprojektować pola
hipotetycznej bazy danych
w której już macie te atrybuty
które opisują książki i odkurzacze
a właśnie amazon wprowadza ciuchy do sprzedaży
to byłaby przeróbka całej aplikacji
tego się nie robi
to jest korzyść
dlatego wzorzec koperta
to jest wzorzec który uniezależnia logika aplikacji
od treści dokumentu
to jest forma tej logiki
większość formularzy
ma taką strukturę pola pola
one są zagnieżdżone jeszcze
w związku z tym wyciągnięcie
wyciągnięcie tego formularza
z tej bazy
z tej logice
to jest zawsze jedna linijka
przywołaj i coś tam
to znaczy że jeżeli ktoś stwierdzi
bo w pięciu latach
że jeszcze dorzucimy do każdej karty indeksowej
streszczenie i na przykład
krótki życzorys autora
od jutra karty mają jedno pole więcej
a logika aplikacji
tego w ogóle nie zauważy
dlaczego
bo logika aplikacji
nie przetwarza pola życzorys autora
życzorys autora jest widoczny
dopiero wtedy jak tą kartę
sobie klient znajdzie na ekranie
i zobaczy
bo on znalazł tą kartę
na podstawie nazwiska
i oczywiście jak ta karta
była stworzona pół roku temu
to nie ma życzorysu autora
dodanie nowego pola do tej karty
nie powoduje żadnej ingerencji w tą aplikację
to jest podstawowy korzyść
z tego wzorca
jeżeli separujemy repozytorium
jako wzorzec
to jest odseparowanie
pamiętajcie jedną rzecz
nigdy nie trzymamy logiki przy danych
to jest jeden z najgorszych pomysłów
bo dane są tak naprawdę
na etapie
dzisiaj nie istnieją systemy
do tego mam jeszcze pytanie
czy danych
ale to nie jest równoznaczne z tym
że wykonywania jakichś operacji
logicznych na samej już bazie danych
chodzi o to żeby baza danych
nie przechowywała żadnej logiki
rozumiem
i nie realizowała
nie wykonywała żadnej logiki
no ale czasem to jest szybsze po prostu
no niekoniecznie
dam przykład w którym to jest szybsze
dlatego że to robimy
już na silniku bazy danych
mam sobie
gigantyczne centrum danych
muszę przenieść wszystko
do drugiej bazy danych
z dwoma jakimiś ifami
no to wykonywanie
to że aplikacja bierze dane
i później wrzuca do
serwera
raz dziennie
powiedzmy tam
nie wiem
milion
powiedzmy 10 milionów tych
wierszy
mam pytanie
to nie jest kopia zapisowa
to jest przerzucanie danych
z hurtowni danych
do konkretnej bazy danych
która służy do wyświetlania rzeczy
ale przerzucanie danych do hurtowni
nie jest logiką biznesową
kierunek nie ma znaczenia
mamy sytuację taką
masz zbiór danych A
na przykład faktury
i masz zbiór danych B
który służy do wykonywania
wyrafinowanych raportów kontrolingowych
to robimy prostą rzecz
mamy
i teraz zwróć uwagę na taką rzecz
faktura powstaje raz w życiu
to znaczy że napychanie bazy
do hurtowni danych
nie wymaga żadnej megawydajności
bo tych faktur dziennie
ludzie nie zrobią zbyt dużo
taki ETL nigdy nie będzie wąskim gardłem
natomiast jeżeli powiemy sobie
że ok my operacyjnie
wykorzystujemy faktury
do tego żeby znaleźć konkretną fakturę
robimy to może raz dziennie
bo historycznej faktury szukamy rzadko
powiedzmy przypadek
przychodzi do nas KNF
czy tam jakaś zewnętrzna firma
i mówi my potrzebujemy zrzut
tu są założenia i robią to raz dziennie
bo robią kontrolę
to wtedy mamy sytuację w której mamy
hurtownie danych
powstały po to żeby wykonywać operacje
inne i nie naturalne
w stosunku do bieżącej bazy pracy operacyjnej
banku firmy księgowej
to znaczy że robimy zupełnie osobną
instalację która ma zupełnie
swoją logikę nie mieszamy tej logiki
jeżeli mamy sytuację kiedy mamy
hurtownie danych a to jest dobry przykład
to mamy sytuację w której mamy tak
masz taką bazę na przykład mamy
ten system który mamy w tej chwili
tak jak macie na rysunku
i okazuje się że potrzebujemy
załóżmy że potrzebujemy
co jakiś czas jakiś dziwnych wyrafinowanych
informacji mówiąc ładnie jakąś
nietypową kwerendę
to wtedy robimy
w zasadzie prostą rzecz
jeżeli są to kwerendy jeżeli ta hurtownia danych
bo mamy tak wielowymiarowy model
który jest zaprojektowana to my po prostu
zapisując fakturę do takiej koperty
równolegle wysyłamy ją do NTL
i on tam sobie wydłubie z tej faktury
nawet korol roweru
bo my chcemy zrobić raport pod tytułem
sprzedaż rowerów w zależności od pogody
koloru roweru i numeru buta klienta
bo przyszedł taki no ok proszę bardzo
mamy na boku hurtownie danych
każda faktura leci do bazy
tej operacyjnej że tak nazwę do archiwum
i równolegle ETL sobie tą fakturkę
jedną fakturkę po fakturce sobie wciąga
i ta baza to może być
baza ja wiem
to będzie motor SQLowy hurtownia danych
to nie jest model relacyjny bo tam jest dużo redundancji
w każdym razie jest to zupełnie inna infrastruktura
to znaczy
że to co macie na ekranie
nigdy nie powinno służyć
do wykonywania tych wyrafinowanych raportów
to jest problem
to co macie na ekranie do tego nie służy
bo w stosunku do tej aplikacji
nie było wymagań pod tytułem
robienia zestawień książek
na podstawie koloru okładki
i nazwiska głównego bohatera
ta infrastruktura służy do pracy z wypożyczeniami
jeżeli nam się pojawi
za pół roku życzenie
pod tytułem wyrafinowane raporty
książek bo tam nie wiem
ktoś robi habilitację ze średniowiecza
i szuka książek w którym rycerze
mieli czerwone krzyże na plecach
to musi sobie zbudować osobny system
z jego własną logiką
ściągnąć dane przetworzyć je
według zupełnie innej logiki
i sobie odpali hurtownię danych
to znaczy że
to będzie zupełnie inna aplikacja
zintegrowana stąd
a to nie będzie funkcjonalność
tej aplikacji
to jest bardzo ważna rzecz
żeby nie łączyć takich rzeczy
po to my aplikacje
szczególnie duże systemy
dzielimy na osobne systemy pod systemy
żeby nie próbować łączyć
jak to się mówi wody z ogniem
którego się nie robi
natomiast ta separacja logiki od infrastruktury
wzięła się właśnie stąd
żeby innym zmartwieniem był czas dostępu
do disk twardego
ale dysk twardy nie przetwarza
treści dokumentów
jeżeli ja mam dysk twardy
i tam jest 10 milionów CV
to rekrutacja jest zupełnie inną aplikacją
a czas dostępu do CV na dysku
jest zupełnie innym problemem
tego nie mieszamy
tu mam dalej problem w tym
że baza danych
i silnik bazodanowy
to nie jest prosty dostęp do dysku
i bardzo mnie boli
jak słyszę to bardzo mam takie że aż
się mnie to może
no powiedzmy drażnić
bo być może jesteś pasjonatem tego
natomiast bierz poprawkę do tego
że przeciętny kierowca
normalny kierowca samochodu
nigdy się nie będzie podniecał
ten czy ma silnik na benzynę czy na prąd
bo on jak jedzie dookoło brzegu
to ma kierownicę i pedał gazu
i rzadko się musi zatrzymać na jakiejś stacji
żeby ten samochód doładować benzyną lub prądem
normalny człowiek się nie będzie podniecał
tym jaki jest silnik
ja rozumiem tylko to jest wszystko tego
zależne
od tego co robimy
jak mówimy o zwykłym kierowcy który ma
przejechać od na przykład
przez całą Warszawę powiedzmy
to ten samochód silnik
w większości przypadków
nie ma różnicy bo i tak po drodze mamy
ograniczenia prędkości
jedziemy tak samo szybko
tylko jeżeli mówimy że ktoś ma autostradę
ma przejechać przez autostradę
w Niemczech bez ograniczeń
to jest duża różnica czy ktoś jedzie samochodem
który może wyrobić
400 na godzinę
czy maluchem
zwróćcie uwagę na taką rzecz
pierwsza korekta w Niemczech jest zalecana
130
z większą prędkością pójdziesz
dostaniesz z kryminalnego kodeksu
jak polecasz komuś samochód
nie jedźmy w tym kierunku
chodzi o to że jeżeli 99% projektów
to są samochody miejskie
a raz na 20 lat
ktoś się zastanawia nad bolidem formuły pierwszej
to jeden z największych błędów
jest przenoszenie
swoich doświadczeń z bolidów formuły pierwszej
na jeżdżenie po centrum Warszawy
tego nie mieszamy
ten problem nie występuje w ogromnej większości projektów
i słuchajcie
uczylam was na jedną rzecz
bo jeszcze musimy zrobić
jeden diagram do omówić
jeszcze szybko ostatnie pytanie
w momencie kiedy klient przychodzi
to my powinniśmy już wtedy tak naprawdę
się zapytać czy my będziemy jeździć
po samochodach
czy będziemy normalnie
po Warszawie jeździć
czy będziemy jeździć bolidem
ok to znaczy że pierwszego dnia
pytamy do czego ten samochód służy
i się dowiecie że z perspektywy
na przykład projektu który omawiamy
problemy pod tytułem wytrzymałość silnika
na torze formuły 1
to jest problem który nie jest problemem
tego świata tej planety
i nawet nie jest problemem
przeciętnej firmy
to znaczy się że mówiąc już wprost
jeżeli ktoś jest wyspecjalizowany
w samochodach formuły pierwszej
i jest zapuszczany na spotkania
do urzędu miasta bo urbanista rozmawia
o tym jak się jeździ po centrum miasta
to tego się nie robi
także to nie jest tak że ten problem
nie istnieje
nie róbmy w projektach informatycznych
w ogóle to jest taka moja gorąca prośba
taka sugestia z praktyki
nie traktujmy problemów
jednej firmy której wystarcza
ćwierć terabajta na fakturę
w najbliższe 20 lat
problemu naukowego na poziomie bolidów formuły pierwszej
bo tak można zniszczyć każdy projekt
dlatego my najpierw musimy rozwiązać
problem logiki
my musimy narysować te algorytmy
bo dopóki ktoś nie narysuje algorytmu
sortowania bąbelkowego nazwisk
na liście płac
w HR-ze
to dywagacje na temat ilości dysków
nie mają żadnego sensu
bo te dyski będą nikomu do niczego nie potrzebne
dopóki nie posortujecie nazwisk
natomiast sortowanie nazwisk
dowolnym algorytmem
bo bąbelkowy podobnie nie jest w sumie
najefektywniejszy ale bardzo ładnie się rysuje
i nie potrafi tego narysować
nigdy nie powstanie aplikacja
dla HR-u
przyjdzie wam full stack developer
postawi wam najszybszą platformę
na świecie
która nie służy do niczego poza zalogowaniem się
nie wiem czy macie świadomość
że ogromna ilość projektów informatycznych
skończyła się porażką
która wygląda tak
platforma jest jak można się zalogować
jest prędziutko tak a do czego to służy
do niczego
to jest problem tego świata
na świecie stoi bardzo dużo platform
które nikomu do niczego nie służą
a są pieruńsko szybkie
i po to od 30 lat my
w tej branży walczymy
ze wzorcami projektowymi
żeby się skupić na tym co naprawdę jest problemem
a problemem jest to co macie na ekranie
i teraz
kończymy tą dyskusję na temat wydajności
ok to jeszcze sobie
dużo tak by tłumaczyło
ja nie kwestionuję
tego co mówisz
ja po prostu zwracam uwagę na to
co ty mówisz jest ważne
i praktycznie nigdy nie jest problemem projektu informatycznego
to jest problem
żebyśmy się dawno rozumieli
to nie jest tak że ktoś z nas ma czy nie ma rację
bo to nie jest ten spór
moim celem było zwrócenie wam uwagi
że to nie jest problemem tego świata
ok
hurtownie danych to jest początek lat 90
jeżeli ktoś tylko
odkrył że raporty
kontrolingowe nie robimy z bazy ERP
tylko z hurtownianej kosteczek
nie ma problemu tak jedna decyzja
po tańki i po imprezie
to co macie na ekranie
jeżeli chodzi o to jakie problemy rozwiązujemy
przypominam jeszcze raz kluczowym problemem
wdrożeń są mendejsy programistów
to są najdroższe zasoby w każdym projekcie
nie to żebym im żałował pieniędzy
po prostu pamiętajcie że sponsor
płaci na koszty
jakbyście wzięli książkę
tak zwanego
Uncle Boba którego podobno lubią
deweloperzy to on na początku pisze
że pierwszą rzeczą którą należy
wziąć na tapetę w projekcie informatycznym
jest architektura
bo zła architektura powoduje masakryczne koszty
to jest chyba
cytat z jego książki
jeżeli ktoś uważa że dobra architektura
jest kosztowna to niech spróbuje
złej cytuję z pamięci
to jest jedna z wielu książek
ludzi którzy zajmują się architekturą
zła architektura
kosztuje ogromne pieniądze
bo wymaga przeróbki kodu
najdroższą rzeczą pracy
deweloperów jest przegląd kodu
i jego reorganizacja
to jest największym kosztem każdego projektu
bo projekt informatyczny
na 20 lat
koszty zakupu platformy
to jest pierwszy dzień
potem raz na 4 lata
a wszystkie pozostałe koszty przez 10 lat
to są dzień i dzień mendesy programistów
z tym walczymy
w sensie obniżamy
nie jesteśmy w stanie powalczyć
z prawami fizyki
tak jak wasz kolega mówi
to jest wszystko prawda
to nie są znaczące koszty każdego projektu
to znaczy że jak ktoś chce podnieść wydajność
to po prostu idzie
podpisuje fakturę
i ma to załatwione w weekend
a jak ktoś chce zmienić 3 pola na fakturze
bo się zmieniły prawo
to ma projekt na 2 lata
to jest problem tego świata
także
od prawej strony
koperta służy do uniezależnienia
logiki aplikacji
od struktury dokumentów
do przepisów
repozytorium oznacza
że gdyby tu miała być jakaś logika
związana z przeszukiwaniem tego
to wyrzucamy ją do repozytorium
bo kontrol
to jest logika aplikacji
my tak zwane algorytmy
dzielimy na 2 kubki
czym innym jest to jak zwalidować dokument
a czym innym jest to
jak szybko znaleźć go w szafie
że po nazwisku
albo nie wiem
musimy jeszcze kontrolować do tego dostęp
to jest tego typu logika
zwróćcie uwagę na taką rzecz
jakbyście poszli do dziekanatu
to tam na samym końcu
są szafy z waszymi dokumentami
te szafy
nie przechowują
żadnej logiki
szafa służy tylko po to
żeby według jednego
dwóch kryteriów
ułożyć te papiery
zwróćcie uwagę
że książki w bibliotece
nie są ułożone na półce alfabetycznie
w kolejności zakupu
dlaczego?
bo bardzo kosztowną operacją byłaby sytuacja
w której biblioteka narodowa
ma 10 milionów woluminów
i nagle ktoś kupił
świeżą książkę Asnyka
on jest na literę A
i musielibyście wszystko przesunąć
żeby tego Asnyka na początku ustawić
to byłaby najdroższa operacja w tej bibliotece
robimy to zupełnie inaczej
robimy tak
że tego Asnyka stawiamy z prawej strony
on dostaje numer kolejny
54
a my przed tymi półkami
mamy karteczki
i te karteczki mogą być ustawione
według 40 wariantów
zwróćcie uwagę, że biblioteka
fizyczne książki ma w jednym kawałku
a potem są katalog alfabetyczny
katalog według autorów
też alfabetyczny
katalog działowy
będziecie mieli przed tymi książkami
4-5 katalogów
jak ktoś sobie szuka Mickiewicza
to idzie do alfabetycznego według autorów
jak ktoś sobie szuka według tytułów
Pan Tadeusz idzie do innej szafy
myk myk myk myk myk Pan Tadeusz
znalazł tak
to znaczy, że bardzo fajną architekturą
jest taka, że fizyczny zbiór
z danych jest jeden
prosty jak konstrukcja cepa
a przed tym fizycznym jest
jeden, drugi, trzeci, piąty, piętnasty
logiczny podział
to jest bardzo wygodne, bo dodanie nowego podziału
logicznego nie wymaga ingerencji poprzednie
zwróćcie uwagę na taką rzecz
sąd ma centralną bibliotekę
i tam są te akta
fizycznie wszystkie akta występują raz
akta nie przechowują
żadnej logiki biznesowej
a my przed sądem mamy
katalog spraw cywilnych, rozwodowych
karnych, nie wiem jeszcze
o kradzieże, to znaczy, że
logika dostępu
do tych fizycznych zasobów
jest każdorazowo inna i separowana
separowanie logiki dostępu do danych
ma tą przyjemną cechę, że nowa logika
nie wymaga ingerencji wyróżniającą
po prostu do wczoraj był tylko
katalog tytułowy
alfabetyczny
a od jutra postawimy drugą szafę
nie ruszając tej pierwszej, tam będzie tytułowy
według autorów, według tam nie wiem czego jeszcze
gatunku
to może wymagać jednorazowej
kwerendy po całym zbiorze
ale to się robi
masakrycznie rzadko
to znaczy, że gdyby ktoś chciał do biblioteki narodowej
dodać nowy katalog
według kolorów okładek
to po prostu to jest
jednorazowy projekt, który polega na tym
nie ruszamy do tychczasowej infrastruktury
stawiamy
nową szafę
koperty są według kolorów okładek
i jeden raz puszczamy
jeden raz, bo jest to kosztowne
puszczamy kwerendę po całym zbiorze
ale te karty
indeksowe
nie są treścią tych książek na półkach
tylko one są przed
dlatego takich repozytoriów
możemy mieć kilka
jeżeli na przykład mam
hipotetyczne archiwum
takie archiwum jak jest na Rakowieckiej
archiwum państwowe
tam są wszystkie dokumenty z urzędów przynoszone chronologicznie
ale przed tym archiwum
są różne dziedzinowe
katalogi
czyli jedna osoba będzie szukała
na przykład
akt według województwa
a druga osoba będzie szukała
akt według
płci petenta
ale oni nie będą tego robili
na całym zbiorze
tylko będą to robili na tych karteczkach
przed tym zbiorem
fizyczny zbiór jest mega drogim miejscem
bo jest tego dużo
przestawianie książek na półkach jest masakrycznie kosztowne
nikt tego nie robi na świecie
przestawianie teczek aktowych jest masakrycznie kosztowne
nikt tego na świecie nie robi
dlatego my możemy mieć fizyczny zbiór w szufladzie
i tych repozytoriów
takich logicznych widoków dowolnie dużo
bo one wzajemnie sobie nie przeszkadzają w życiu
logika służy
do tego
jeżeli mamy karteczkę
to my możemy ją zwalidować w 100%
gdyby to były na przykład deklaracje podatkowe
to mamy tak
tu będą koperty
z fizycznymi deklaracjami podatkowymi
zgromadzone według 5-6 atrybutów
przed tą szafą
będą papierowe katalogi
deklaracje podatkowe
według województwa
według poziomu dochodów
według płci
według typu branży w której ktoś zarabiał
tego może być dużo
czyli te katalogi działowe
nie są fizycznie obsługiwane
przez tą fizyczną bazę danych
że ją tak nazwę
bo to jest jedna tempa szafa
przeciętny dysk twardy jak i szafa w dziekanacie
może mieć tylko jedną
kolejność fizyczną ułożenia książek
regularne resortowanie tego
nie ma żadnego sensu
jest mega kosztowne
dlatego my możemy sobie przed tą szafą
postawić tabelkę
teczki według płci
teczki według roku podatkowego
tego może być dowolnie dużo
zrobienie nowej szafki z teczkami
wymaga jednorazowej pełnej kwarendy
jednorazowej ona jest kosztowna
ale tylko raz to robimy
a te karteczki przeszukujemy migusiem
i to jest wzorzec repozytorium
repozytorium to są
hipotetyczne kryteria wyszukiwania
wyciągnięte przed bazę
przed fizyczny zbiór danych
i teraz
gdyby to była deklaracja podatkowa
to ktoś przychodzi z zewnątrz
mówi że chce deklarację
po nazwisku Żelińskiego
no to przez tą logikę przeszedł
bez bólu bo samo pytanie jest legalne
repozytorium mówi ok
wyduk nazwiska ciach wyciąga swój rejestr
on jest tutaj i znajduje
konkretną fizyczną deklarację
w tej szafie i mi ją zwraca
ale gdybym ja mówił to jest ten ja
Żeliński deklaracja moja nowa
nowka sztuka nie styczeń zapisz ją
to tu wchodzi deklaracja podatkowa
tu jest walidowana
tu z wszystkim
poprawne rachunki podatki tu jest
walidowana repozytorium się dowiaduje
zachowaj tą deklarację
a repozytorium wie
że ona wyląduje w tej szafie
ale repozytorium sobie
tą deklarację wpisze
do tabelki według nazwiska
do drugiej tabelki według poziomu przychodów
i do trzeciej tabelki
według zamieszkania
ale wszystkie te trzy tabelki będą widziały
jeden fizyczny zbiór danych
mega tanie w utrzymaniu i rozwoju
mega szybkie
bo to działa bardzo podobnie
jak fizyczne
nie wiem czy wiecie jak działa archiwum filmów
filmy są w fizycznym repozytorium
a katalogi filmów to jest zupełnie inna baza danych
jednym z najgłupszych pomysłów
jaki zrobiła sobie archiwum
w telewizji kilka lat temu chyba 30
to jest trzymanie zbiorów
w tak zwanych blobach w oraklu
ich to zabiło
zrezygnowali z tego szybko się wynieśli
z filmami na dyski twardej macierze
a katalogi były zupełnie osobno w tabelach baz
wtedy to były informiksowe
po prostu tabele instalacyjne
jest masa przykładów
gdzie ten wzorzec repozytorium
gdzie separujemy dostęp do zasobów fizycznych
od samych zasobów fizycznych
ten wzorzec
to jest połączenie właśnie tych kilku rzeczy
zasoby fizyczne w jednym miejscu
zero logiki
sposób dostępu do tych zasobów
to jest tu
tamty może być sposobów tych alfabetycznych katalogów
co ksiądz uważa
walidowanie dokumentów jest tu
nigdy w repozytorium
nigdy przetwarzać logiki biznesowej
poza oczywiście szybkim znalezieniem
książki według autora
ale to nie jest logika biznesowa
to jest dostęp do fizycznych zasobów
logika jest tylko tu
to znaczy, że jeżeli mi ustawodawca
zafunduje zmianę deklaracji podatkowej
i jej walidacji
to ja będę musiał zaingerować tylko w to miejsce
nigdzie indziej
to znaczy, że jeżeli mi się zmieni struktura deklaracji podatkowej
to poza komponentem logika karty katalogowe
nic więcej nie będzie wymagało
żadnej ingerencji codera
bo koperty tego nie zobaczą
repozytorium tego nie zobaczy
bo nie przetwarza podatków
podatki będą przetwarzane tylko i wyłącznie
w logice karty katalogowe
nawet jak do tej deklaracji przyjdzie nowych 15 pól
a 4 znikną
ta architektura jest absolutnie na to nieczuła
gdyby ktoś chciał robić wyrafinowane raporty
to i tak sobie zupełnie gdzie indziej
postawi hurtownię danych
i teraz to, że nie wolno tego pomijać
to się nazywa łańcuch odpowiedzialności
ten wzorzec
gdzie mamy te 4 plusowe rzeczy
interfejs, logika, dostęp do repozytorium
i fizyczne zasoby
to się nazywa łańcuch odpowiedzialności
umowa jest taka
z góry zakładamy, że nie wolno nigdy pójść na skróty
nie dopuszczamy sytuacji
żeby logika karty katalogowej
stwierdziła, a ja wiem jaka to jest karta
to ja sobie na żywca pójdę do szafy
nie, przepuszczamy to wszystko przez ten łańcuszek
dlatego, że
jeżeli wiemy, że koszty utrzymania
i rozwoju są ważne
to my wiemy, że tak
jeżeli nie dopuścimy drogi na skróty
to my wiemy, mamy gwarancję
że jeżeli zmodyfikujemy repozytorium
z uwagi na kryteria wyszukiwania
to nigdy nam się nie znaczy sytuacja
kiedy ta nowa reguła wyszukiwania
zostanie pominięta
przez logikę, bo nie dopuszczamy drogi na skróty
czyli gdyby się zmieniła
logika dostępu do tej szafy
zmienimy kod tutaj
i mamy gwarancję
że nic się nie wykrzaczy
bo nie ma innej drogi
to samo jest tu
tu jest walidacja
tak między nami na czym polega problem
z aplikacjami w dotnecie i w javie
że logika jest rozsmarowana
od struktury bazy danych po ekrany włącznie
i efekt jest taki
że między bazą danych, która ma jakąś logikę
a ekranem, który nie daj Boże
ma jeszcze jakąś logikę walidacji
i ktoś wam powie zmieniamy upusty w sprzedaży
mamy review całego kodu
bo gdzieś tam wszędzie jest fragment
tej logiki biznesowej
czego należy unikać
otóż nie powinno być więcej niż jednego miejsca
jeżeli zmienimy logikę
czyli funkcjonalność aplikacji
to powinno być możliwe zawsze tylko w jednym miejscu
tylko w jednym miejscu
bo jeżeli nie
to nam masakrycznie rosną koszty
mendesów, ludzi którzy to muszą zrobić
pamiętajcie przeglądanie kodu
jest absolutnie najdroższą rzeczą w każdym projekcie
chyba nie ma nic droższego niż kod review
jest absolutnie najdroższa rzecz pod słońcem
to jest dokładnie to co trzeba unikać
tego jak ognia
teraz zwróć uwagę na taką rzecz
mamy trzy poziomy
bo już mamy wszystkie
przypadki użycia
jeden diagram
to jest umowa do czego ta aplikacja służy
potem mamy środkowy poziom
high level design, podział na komponenty
to jest ten moment kiedy my możemy zdecydować
w jakiej kolejności te komponenty
będą wdrażane
które są potem w menu
jeżeli komponent jest nietrywialny
budujemy mu taki opis jak ten
i teraz gdybyśmy chcieli
i teraz tak
zróbmy sobie na diagramie sekwencji
tylko jedną rzecz
zapis nowy dokument
wychodzimy piętro wyżej
do diagramu komponentów
bo nie poczekajcie
a czy byśmy mogli przerwę zrobić?
to zróbmy sobie krótką przerwę
bo faktycznie nas ta dyskusja zagoniła
zróbmy sobie 5 minut przerwy
po przerwie zrobimy jeden diagram sekwencji
który wam pokaże jak to działa
i będziemy mieli po zajęciach
przem Bartek
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dziękuję.
Dobra. Wracamy.
Lecimy dalej. Kto na ekran?
Ta sama osoba, czy jakaś nowa?
To poprosimy Cię jeszcze raz, będzie szybciej, nie będziemy tracili czasu na kolejną rekrutację.
Także Wasza koleżanka sprzed przerwy pokaże ekran.
Halo, jesteś z nami?
Jesteście tam w ogóle?
Tak, jesteśmy.
Okej, to teraz, no dobra, to mi się to wylosowało.
Martin Szum, jesteś z nami? Pokaż ekran.
Jestem, już szum.
Kolejną taką ciekawostką dla wielu będzie polimorfizm.
Pamiętamy, co to jest polimorfizm?
Wasz kolega pokazuje ekran, a ja sobie myślę, co to jest polimorfizm?
Na pierwszych zajęciach Wam pokazywałem taką prezentację.
Polimorfizm polega na tym, że to, jaki uzyskamy efekt, zależy nie od nazwy operacji,
a od tego, do jakiego komponentu, obiektu skierujemy swoje zapytanie.
I zaraz zobaczycie przykład.
Na razie mamy sytuację taką, że mamy cztery komponenty, wiemy, że interfejs świeci oczami,
reszta jest niewidoczna na reszty świata i teraz tak, na tym interfejsie, na API karty katalogowe
będzie na przykład operacja no.
Klikamy prawym klawiszem na API karty katalogowe, wybieramy dodaj, dodaj, operacja i piszemy nowa.
Dlaczego ta operacja nazywa się nowa, a nie nowa karta katalogowa?
Dlaczego ta operacja na tym API nazywa się nowa?
Na razie to jedna operacja będzie.
Wybacz to.
Bo jeżeli komponent, bo ten komponent nic innego nie potrafi, on służy tylko do jednej rzeczy,
czyli jeżeli komponent jest komponentem karty katalogowe, to API komponentu karty katalogowe ma operację nowa.
I jak wy powiecie karty katalogowe nowa, to dostajecie nową kartę katalogową, a nie kwit na węgiel,
bo komponent karty katalogowe i tak niczego innego nie robi, po to powstał.
Czyli jeżeli na API komponentu karty katalogowe jest operacja nowa, to niczego poza nową kartą ten komponent z siebie nie wypluje.
Dlatego nie musimy pisać nowa karta katalogowa, tylko piszemy nowa.
To jest mega wygodne z perspektywy nazewnictwa w całym systemie.
Mega, mega wygodne.
I teraz jak wygląda realizacja polecenia nowa?
Klikamy tą operację nowa prawym klawiszem.
Prawy klawisz.
Dołącz dołączone diagramy.
Mamy nowy diagram.
Znajdujemy diagram sekwencji.
Tutaj nawet jest podpowiadany.
Visual już nie jest taki głupi.
Diagram sekwencji, następny.
Ok, następny.
Mamy nowa.
Dopiszmy na końcu, po myślniku na przykład, karty katalogowe.
Nazwy komponentów.
Różne są konwencje w projektowaniu.
Między innymi jest taka, że skoro mamy, bo to jest właśnie polimorfizm, tak?
Że efekt uzyskany zależy nie od brzmienia polecenia, tylko od tego komu je wydamy.
Przypominam, na początku mówiłem, tak?
Jeżeli mamy przed sobą murarza, tynkarza i hydraulika i powiemy malarz do roboty,
no to malarz nie położy rur, tylko pomaluje, bo jest malarzem.
Ja nie muszę mówić malarzu pomalu, tylko mówię malarz do roboty.
A potem powiem elektryk do roboty.
Co robi elektryk?
No kable kładzie, bo niczego nie potrafi, tak?
Mega, mega wygodne.
Czyli mamy nowa, całość wiemy, ten diagram ma swoją nazwę, karty katalogowe.
OK, naciskamy.
I teraz tak.
My pierwszą, diagram sekwencji na tym poziomie low level design,
to my nie mamy tych ludzkich aktorów, tylko mamy wywołanie na API, tak?
My nie wiemy kto woła, ale wiemy, że woła, tak?
Czyli najpierw musimy narysować sobie cztery linie życia.
Dokładnie tak, jak tam były.
Znajdujemy tam po lewej stronie,
mamy tak, mamy API, karty katalogowe,
przeciągamy na prawo,
linia życia, linia życia, lifeline.
Pamiętamy, że następną klasą była klasa,
no, no, no, no, za szybko, wywal to.
On teraz byłby lepszy.
Mamy komponent, karty katalogowe,
bo to jest pod spodem, rozwiń ten komponent w repozytorium.
W repozytorium masz po lewej stronie karty katalogowe, rozwiń to.
Rozwiń to, bo my szukamy,
się tu porozjeżdżało,
przypadek użycia, nie masz przypadek użycia karty katalogowej,
dobra, karty katalogowe, formularz.
Coś tu się zgubiło nam.
API, o tu mamy, dobra, mamy kartak,
dobra, o to jest właśnie to, karty katalogowe,
o dobra, rozwinąłeś, dobra, już mamy, okej.
I teraz tak,
za API była logika karty katalogowe,
przeciągnij tą klasę logika karty katalogowe,
na prawo, no i znowu linia życia,
to samo z repozytorium,
repozytorium,
i na końcu po prawej będzie kompenta.
I teraz tak,
modelujemy wykonanie operacji moduły.
I co na końcu?
Jeszcze raz.
Co na końcu?
Koperna.
Koperna.
Diagram sekwencji pokazuje,
jak będzie się,
jak się, jakie kolejne operacje
między tymi klasami będą występowały.
Chodzi o to, że diagram sekwencji służy do dwóch rzeczy.
Na początku służy do zaprojektowania tego pomysłu,
na tym diagramie przetestujemy,
czy my wszystko wiemy i kumamy,
i jak to wszystko działa na diagramie,
to ten diagram jest potem tak naprawdę wymaganiem,
dokumentacją dla codera.
Bo my tutaj możemy, wiecie, tak jak pamiętacie,
co wam mówiłem przed przerwą.
Idziecie do Castoramy i robicie 16 wariantów tej łazienki.
Ostateczny wariant idzie do dewelopera.
Mamy to samo.
Będziemy,
około tych wariantów nie będzie 16, nie?
Ale na tym diagramie rozwiążemy wszystkie potencjalne problemy.
Czy to się w ogóle uda?
Być może będziemy go zmieniali.
To jest prosty projekt, raczej nie.
I jak już wszystko jest wymyślone,
to idziemy do coderów,
wersja 1.0 i poszła.
Tutaj nie ma aktora ludzkiego,
bo on jest tam daleko.
My mamy wywołanie na API.
Tam gdzie mamy legendę,
po lewej stronie,
mamy komunikat przechwycony.
Mamy takie coś na legendzie,
jak komunikat przechwycony.
Klikamy to.
I teraz tak.
Klikamy po lewej stronie API.
Po lewej stronie API.
Naciskamy myszkę, lewy klawisz.
To już za późno.
Jeszcze raz kliknij.
Dobra. I teraz.
I ciągniesz.
Musisz zrobić drag and drop do tej linii życia.
O tak.
I to jest nowa.
To jest operacja nowa.
Visual One podpowiada,
że taka operacja jest na internecie.
I teraz.
Jak to działa?
To działa w ten sposób.
API przekazuje to polecenie
do logika karty katalogowej.
A więc klikamy poniżej strzałki 1
na tej linii życia.
Przeciągamy drag and drop łącznik
do logiki.
Ten łącznik.
Do logiki.
OK.
Pozioma strzałka.
I piszemy nowa.
Nowa.
Łączymy logikę karty do repozytorium.
I robimy identyfikację.
I mamy identyczną strzałkę
też z nazwą nowa.
I teraz.
Nowa.
Nowa.
Żeby nam z tymi numerkami było.
Teraz będzie trochę inaczej.
Na razie tak.
Prawym klawiszem gdzieś na pustym miejscu.
Numer sekwencji.
I zmieńmy numer sekwencji.
I jeden poziom.
Pojedynczy poziom.
Będzie nam łatwiej.
Czyli jak ktoś.
Tak działa właśnie wzorzec.
Łańcuch odpowiedzialności.
Jak to jest nowa.
To funkcją repozytorium.
Jest najpierw.
Założenie nowej pustej koperty.
Żeby zrobić miejsce na tą karteczkę.
Która nam przyjdzie.
Nie.
Czyli będzie.
Bo ta.
Będzie nowa karta.
Katalogowa.
I ją musimy zachować.
W związku z tym.
Klikamy tą linię życia.
Repozytorium karty.
Przeciągamy do koperty.
Puszczamy myszkę.
Uwaga.
I mamy tam takie coś.
To jest taka ikonka druga od prawej.
Oto.
Klikamy to.
To jest symbol.
Tam nic nie piszemy.
To jest takie.
To znaczy.
Że obiekt.
Klasy.
Koperta.
Właśnie został stworzony.
Jak już mamy tą kopertę.
To teraz.
Repozytorium.
Odpowiada.
Klikamy strzałkę numer 3.
Jako dwa.
Zobaczmy.
Jak to się wyświetla.
To dobrze.
Jeszcze raz.
A nie.
Bo to w tej platformie.
To.
Pamiętamy jedną rzecz.
Dostaliśmy.
Polecenie.
Zachowania nowej karty katalogowej.
Tak.
Czyli na API jest nowa.
Czy tam zachowę.
Obojętnie.
Zaraz.
My musimy.
Przygotować sobie to miejsce.
Tą kartę.
Musimy mieć.
Gotową.
I wypluć.
Bo teraz.
My musimy.
Jeszcze jedną rzecz.
Jak wam się wydaje.
Nowa karta.
Zobaczmy.
Jak to wygląda.
Czy nowa karta.
Powoduje.
Zachowanie.
Nowej karty.
Czy.
Wyplucie.
Pustej karty.
Na ekran.
Skąd.
Będą brały.
Puste karty.
Na ekranie.
Bardzo ważne.
To są.
Właśnie.
Problemy.
Jak wam się wydaje.
Żeby.
Założyć.
Kartę.
Katalogową.
To.
Pierwsze.
Musi.
Pojawić.
Pusta.
Nowa.
Karta.
Na ekranie.
Skąd.
Kogoś.
Templata.
Jeszcze raz.
Jakiegoś.
Templata.
Będziemy musieli mieć.
Wzory.
Tak.
I teraz są dwa wejścia.
To są.
A propos.
Decyzji architektonicznych.
Żeby się pojawiła.
Teraz.
Jak wam się wydaje.
W tym miejscu.
To macie na ekranie.
Gdzie powinno być.
Gdzie powinien być przechowywany.
Aktualny.
Template.
Karty katalogowej.
Jak wam się wydaje.
To są.
Decyzje architektoniczne.
Skąd wziąć.
Template karty.
Ja bym.
Z repozytorium.
Mniej więcej.
Chyba.
Chociaż.
Może w logice.
Można też.
Go generować.
No.
Generowanie.
W locie.
Jest najbardziej.
Kosztową.
Operacją.
No.
Bo wygenerowanie.
Wygenerowanie.
Kodem.
10.
20.
Pult.
To będzie.
Kupa klepania.
No.
Więc repozytorium.
Najlepiej.
Chyba.
Bo.
Bo.
Bo.
Template ma.
Puste pola.
Jak.
Jak będziesz trzymał.
Template w repozytorium.
Możemy sobie wyobrazić.
Bo są dwie szkoły.
Albo.
W repozytorium.
Tworzymy sztuczny byt.
Karta zerowa.
I w kopercie.
Jest.
Karta zerowa.
I umowa jest taka.
Że karta zerowa.
To jest wzorzec.
Albo wzorzec.
Nie wiem.
Czy wiecie.
Bardzo często.
Jest tak.
Że.
Repozytorium.
Ma.
Dostęp do dysku.
Dla innych rzeczy.
Jest.
W wielu aplikacjach.
Robione w ten sposób.
Żeby.
Mamy dysk twardy.
Którym jest.
Specjalny katalog.
Na przykład.
Templaty.
Nie.
I to jest tak.
Że.
Repozytorium.
Jak dostanie polecenie.
Nowa.
To nie kombinuje.
Żadnymi bazami danych.
Tylko ściąga z dysku.
Template.
Pod tytułem.
Karta katalogowa.
Template.
Na przykład.
I to będzie JSON.
XMR.
Whatever.
No.
Ale ewentualnie.
W samym kodzie.
Na jakiś podach.
Nie wiadomo jak.
To.
No.
Już ten dostęp do dysku.
Może być taki.
Mniej.
Wygodny.
No.
Albo ten.
A w samym kodzie.
No to powinniśmy.
Trzymać jedną wersję aplikacji.
Na przykład.
Jakby to było.
Gdzieś rozsiane.
Czy.
Ile będziesz potrzebował pracy.
Żeby zmienić template.
Jeżeli ten template.
Będzie w kodzie.
No.
Będziesz musiał ingerować.
W kod.
Czyli zwykły user.
Tego nie zrobi.
Tak.
Ale.
Zazwyczaj.
Template.
Czy Ryu.
Czego.
Nie zmieniła kara.
Nie.
Nie ma.
W tym czas, kiedy.
Żeby tam się za mną pokłócić.
Bo w moich aplikacjach.
Główna księgowa.
Jest w stanie.
Sama.
Zmienić.
Wzdór.
Karty.
Nowa faktura kosztowa.
I zrobi to sama.
Za darmo w godzinach pracy.
Bez mendejsów kodera.
To jest bardzo kiepski pomysł.
Żeby to garta była w kodzie.
No ale.
Mówimy że.
U pana księgowa ma dostęp.
Ten plik.
Jest wst �anym dysku.
Ikовали?
Nie.
prostą aplikacyjkę
i tam, nie wiem, prosty edytor,
tylko jest po to. Chwila, chwila. Założenie jest,
że ta księgowa, ta aplikacyjka
działa u niej na komputerze i ona
ma wtedy tam możliwość. Nie, nie, nie, nie,
nie było takiego założenia. To jest
centralna aplikacja na serwerze pracująca
przez przeglądarkę. Zapomnijmy
o aplikacjach klient-serwer,
bo są mega kosztowne w utrzymaniu.
Mówimy o centralnej aplikacji
na serwerze webowej.
Czyli albo robimy jej dostęp przez
ten interfejs webowy do edycji tego
pliku. Nie, robimy
prostą rzecz. Nie wiem, słuchajcie,
nie macie pojęcia, jak świadczą
sobie działalność prostą. Jest sobie księgowa,
która radzi sobie z Excelem,
nie, na przykład, i ona również sobie
radzi z paroma innymi prostymi aplikacjami.
Kupujemy na rynku, albo piszemy sami,
prosty edytor
formularzy ekranowych, które zapisuje
pliki wynikowe w postaci XML-a,
na przykład, i ta pani
robi to sama,
bo zrobienie
takiej formatki jest dużo prostsze niż Excel,
który ona robi codziennie. Ona sobie
po prostu ma prosty edytor,
robi nowy, robi
na tym edytorze formatkę pod tytułem
nowa faktura kosztowa, i tam będą pora, tam nie wiem,
cztery dekretacje do kody, ze dwa,
trzy ptaszki, i ona potem
to sobie zapisze. Jeżeli to będzie aplikacja centralna,
to my jej nawet możemy udostępnić
taki edytor jako komponent
naszej aplikacji.
To o tym ja mówię, na przykład.
Ona będzie miała w menu,
ona będzie miała w menu, bo będzie miała
takie prawo edycji formularzy,
formularz rejestracja
faktury kosztowej,
i teraz tylko są tak,
albo ten formularz będzie zachowany
na tym serwerze gdzieś na dysku,
albo będzie faktycznie zachowany jako tak zwany
zerowy, zerowa koperta,
gdzie umowa, możemy się umówić,
tak wielu ludzi robi, że repozytorium
przechowuje tak zwany
rekord zerowy, w którym są template'y,
tak? I tam jest pusty XML, pusty
JSON, whatever. To znaczy...
A jakbyśmy sobie zrobili
tabelkę o nazwie template,
i tam żadne zasady,
tylko tam trzymamy template'y.
To znaczy, że wygenerowałeś drugą tabelę.
Wygenerowałeś drugą tabelę, która będzie miała...
I się pytam po prostu, żeby w razie co
nie mieć problemu, że element
tam będzie miał jakieś niespójności,
że wartość nie może być nulowa
i tam inne rzeczy. Pamiętajcie o jednej rzeczy,
że każda komplikacja struktury bazy danych
podnosi koszty jej utrzymania.
Zwróćcie uwagę na to, że gdybyście chcieli to zmigrować,
to jeżeli przyjmiemy wersję,
że jest to koperta
i template jest w kopercie,
to wszystkie rzeczy z template'em włącznie
są w jednej tabeli, w jednym zasobie, w jednej bazie,
w jednym czymkolwiek bądź.
Jeżeli spowodujemy, że to będzie
w dwóch różnych, to mamy już dwa razy więcej
rzeczy, bo nie jedno tylko dwa,
do administrowania i do pilnowania,
żeby za dwa lata przy migracji ktoś o tej tabelki
z template'em nie zapomniał.
Ale jak powiemy, że trzyma to...
W sensie wszystko zależy od silnika na koniec.
Bo jakbyśmy powiedzieli, trzyma to w jednej schemie,
no to jedna schema tyczy się jednej aplikacji.
Znaczy pamiętajmy o jednej...
Wtedy jedna baza.
Silnik dobieramy po, a nie przed projektem.
Tylko dużo nam zmienia
Mongo, który nie ma
na przykład schem, a Postgres, który ma schem.
Ale nie ma...
Dlatego robimy prostą rzecz.
Developer, jak dostanie projekt,
sam decyduje
o tym, jak spełni
wymagania pozafunkcjonalne.
My mu tylko mówimy, że repozytorium
mamy kopertę, która się nazywa template,
a
wymagania pozafunkcjonalne są realizowane
po zakończeniu projektowania logiki.
Czyli mówimy, że to leży po prostu
w repozytorium, ale jak leży
to już w kwestii dewelopera.
W sensie fizyczna forma
nie powinna być problemem...
To tak samo jak z pokojami.
Moim problemem i waszym będzie stwierdzenie,
że sypialnia ma mieć trzy metry kwadratowe,
a drzwi są tu, a tu jest okno.
A to, czy ścianka działowa
będzie z gips kartonu, czy z cegły dziurawki,
to jest problem dewelopera, a nie architekta.
Żeby nie było.
Muszę mieć wymaganie pozafunkcjonalne,
izolacja akustyczna pomiędzy sypialnią
a resztą mieszkania 50 dB.
I tu jest problem dewelopera.
Ale deweloper nie ma prawa mi przestawić
ani okna, ani drzwi.
Tylko takie dodatkowe pytanie.
Czy jakoś architekt nie powinien
nie wiem, ewentualnie
sugerować lub jakieś dobre praktyki?
Co masz na myśli?
No, deweloper
może być
różny, a architekt może
zasugerować, że można użyć
tego, tego lub tego silnika bazodanowego.
To jest bardzo zła praktyka,
bo po pierwsze mamy kolwiek interesu.
Człowiek, który projektuje domy
nie powinien narzucać technologii,
bo jeżeli człowiek, który projektuje
wieżowce dopisze
gips karton, to będzie
bardzo szybko posądzony o to,
że bierze łapówki od producenta
płyt gipsowo-kartonowych.
Pamiętajcie też, że waszą rolą
o tym się mało mówi, to wam powiem
w tych zajęciach. Jedną z ważnych ról
kogoś takiego jak projektant jest unikanie
konfliktu interesu, bo ten konflikt
interesu jest. Ludzie to robią świadomie,
nieświadomie. Wystrzegajcie się tego.
To macie taki głos z rynku, z praktyki.
Tacy ludzie jak ja,
takich jak ja, jest mnóstwo w tym świecie.
Ja nigdy nie wpisuję do
dokumentacji technologii.
Ja pytam się
deweloperzy, pięciu,
jakim kosztem zrealizujecie
ten projekt. Jeden będzie mówił, że milion,
drugi, że pół, trzeci, że piętnaście.
I przychodzi mój klient,
wybiera najtańszego, ewidentnie.
Warunek jest taki, że my musimy umieć
powiedzieć co chcemy, w sensie
do czego chcemy tego używać. Natomiast biorąc
pod uwagę, to są, skąd
się bierze dyskusja na temat architektury,
o której w tej chwili mówimy. Otóż architektura
wpływa na koszty.
I tendencją na rynku
narastającą jest to, żeby deweloper
nie mógł
w swojej dobrej, złej wierze,
czy niechcący, generować
kosztów. Pamiętajcie o jednej
rzeczy. Jeżeli zlecicie
zaprojektowanie domu Juhasowi,
cały będzie drewniany.
W związku z tym najpierw mówimy
jak i do czego będzie służył dom.
A potem szukamy wykonawcy,
żeby nie było sytuacji, w której
nasz dom został ograniczony
funkcjonalnie przez materiały,
których używa wykonawca,
deweloper, bo on innych nie potrafi
używać. I może się
okazać, że będziecie mieli tani dom
drewniany, ale będzie łatwopalny,
a uczynienie go niepalnym,
tak jak betonowy, będzie kosztowało
miliony na jakąś potężną impregnację
drewna. Dlatego nie zlecamy
projektowania domów stolarzom.
Kowalom też nie, betoniarzom
też nie. To jest niekończąca
się dyskusja, szczególnie w IT, bo
w pozostałych inżynieriach nie ma dyskusji.
Jest statek, jest żaglówka,
ona ma mieć jakiś tam
ciężar, wyporność, a na samym końcu
ktoś zdecyduje, czy to będzie żaglówka stalowa,
czy z włókna węglowego. Ale
gdyby człowiek, który jest właścicielem
huty, projektował żaglówki,
to tam nawet koło sterowe będzie
ze stali nierdzewnej. Czy to ma sens
czy nie. Tego się nie robi. Natomiast
tu, to jest ten moment,
kiedy architekt powinien
na dosyć wysokim poziomie
ogólności stwierdzić,
że operacja
nowa będzie wykorzystywana,
my tu nie wnikamy w bazę
danych. I teraz zwróćcie uwagę na taką rzecz,
że mamy teraz tą,
mamy narysowane, klikamy teraz
linie, repozytorium karty
katalogowe,
klikamy ten
odnośnik, piszemy,
wzorzec,
pusta karta.
Wybieramy to,
na tej linie życia repozytorium
mamy tam takie coś, jakie samo do siebie,
po prawej stronie.
To będzie wywołanie jeszcze w prawo.
Nie, nie, nie, nie to.
Wywalamy to.
Oto, to jest wywołanie wewnętrznej operacji.
Piszemy
nowy wzór, czy tam nowa pusta,
nowa pusta karta, nowa pusta karta.
Starajcie się pisać
na tym etapie tak, żeby normalni ludzie rozumieli.
Przeciągnij to do góry, żeby to był taki
jeden bar.
Do góry, żeby,
no tą strzałkę tę,
szanujcie miejsce na diagramie.
Ten bar pionowy,
bar, one powinny się złączyć.
W UML-u ten
pionowy bar oznacza otwarty wątek,
tak, czyli jeżeli operacja nowa,
to jest spójny kawałek
kodu, wywołuje jakąś tam prywatną operację,
nowa pusta karta i teraz bardzo ważna rzecz.
My w tym momencie
informujemy świat,
że komponent repozytorium
stworzy tą nową pustą kartę,
ale nie narzucamy jak to zrobić.
Tu jest ukłon Bartłomiej w twoim kierunku.
Ja tego nie...
Tu może być, autor, deweloper
zdecyduje, czy wpakuje to do bazy,
czy na dysku,
nie daj Boże do kodu, tak, to odrazam,
tak, bo to będzie kosztowne.
To deweloper decyduje, jak
wykona implementację nowej
pustej karty. W sensie tak by było
idealnie, ale...
Pamiętajcie, że ideałem są zawsze niskie
przyszłe koszty. Patrząc
jeszcze tak na przykład na
większe organizacje, to zazwyczaj
architekt bardziej jest taki,
że on musi konkretnie
zasugerować,
albo planować pod chyba
infrastrukturę i technologie, które dana
firma używa. Powiem Ci, że to jest
właśnie problemem wielu firm, że
tam, gdzie się pojawia prymat...
No właśnie widzę, że to jest problem i chcę
zrozumieć, jakie jest
ewentualne podejście do nich.
Powiem Wam, że podejście jest takie. Generalnie
tam, gdzie... Znaczy problemem
wielu firm jest to, że
jeżeli dojdzie do sytuacji, kiedy
administrator infrastruktury
zaczyna narzucać
to, co jest wyżej nad
nim, to to jest bardzo często
po pierwsze nieoptymalne. Bardzo często
ludzie mają tendencję do preferowania
tego, co potrafią. Nie wiem, czy słyszę
jeszcze coś takiego, taka
dosyć duża wada, której trzeba unikać.
Myślenie kodem. Ktoś, kto jest
mega mistrzem świata
Javy, Dotnetu czy Pythona, wszystko będzie
chciał zrobić Pythonem. Pewnie
słyszeliście taki stary żart
człowiek, który ma dla człowieka z młotkiem
w ręku wszystko jest gwoździem, nie?
To tego należy unikać. Najpierw należy
rozwiązać problem czysto funkcjonalny,
a potem dopiero zastanawiać
się, jak to wymurować. Nigdy
odwrotnie. Bo ma sens
feedback,
pod tytułem, deweloper mi mówi
okej, z betonu będzie kosztowało
500, a inna osoba mówi, a
z gips kartonu 200.
Wymagania izolacji akustycznej będą
spełnione. Koszty
rearanżacji ścianek działowych przy
betonie dwa razy większe. I to
tą decyzję powinien
podjąć ktoś, ale na pewno nie ten,
który to wykona. Bo człowiek, który
wylewa ścianki działowe z betonu, będzie
forsował siebie. Człowiek z gips kartonu
będzie forsował siebie, a powinien
być ktoś przy zarządzie, który wybierze
rzecz równie dobrą, ale
tańszą. To jest problem
bardzo wielu projektów. Nie wiem,
czy wiecie, w niektórych nawet bankach
separuje się. Kilkanaście lat temu powstało
pojęcie architektury korporacyjnej.
Chodzi o to, żeby człowiek, który odpowiada
za architekturę, nie był człowiekiem
odpowiedzialnym za infrastrukturę. Bo ludzie
mają tendencję do prehorowania tego, co
znają najlepiej. To jest naturalny
odruch, tak? Jak ktoś się dobrze czuje w
betonie, będzie chciał wszystko zrobić betonem,
bo na drewnie się nie zna. On
potem wystawi fakturę za mendajsy.
Ale on w dobrej wierze będzie wszystko robił
z betonu, bo on z betonu zrobi szybko, bo
potrafi, a z drewna będzie robił długo,
bo nie umie. Będzie się musiał uczyć.
W sensie, w
korporacjach, mi się wydaje, przynajmniej
z tego, jakie mam obecnie doświadczenie,
że niestety większości
architekci robią,
myślą, jak
wygląda aktualnie
infrastruktura, że nie wiem, jest
cały klaster do
API, do
obsługi API restowych, no to
będzie się przychylał, żeby z niego
skorzystać. Wiem, a dlatego
nie pamiętam, w którym banku, jednym
z banków w Polsce, nastąpiła separacja.
Oddzielono człowieka od architektury,
wydzielono administrację
i utrzymanie, i development
od projektowania.
W Santanderze jest to wydzielone.
Proszę?
W Santanderze jest to wydzielone.
W Santanderze jest,
to już nie jest tajemnicą, jeszcze jest
to już chyba nie jest tajemnicą,
w Millenium chyba też. To znaczy, że
człowiek, który, znaczy projektowanie
funkcjonalności i architektury
jest odcięte od infrastruktury,
żeby się wzajemnie, Artur,
ręczka podniesiona, tak?
Słucham?
Tak, spytam, bo
już w teorii jest już po czasie zajęć.
A, okej. Słuchajcie,
w każdym razie tak, bo
dokończymy to i lecimy. Otóż, zwróćcie
uwagę na taką rzecz, że
tupe powstała karta, to teraz
minutka i kończymy. Klikamy strzałeczkę numer 3,
pojawi się przy grocie strzałka
powrotna,
klikamy to,
przesuń tą linię poniżej
szóstki,
przy grocie będzie taka miniaturka
strzałki powrotnej z kropeczkami, klikamy
to i teraz tak,
klikamy prawym klawiszem szóstkę,
prawy klawisz,
otwórz specyfikacje,
argumenty,
dodaj, na dole mamy dodaj,
element modelu,
tam macie taki fit do wyszukiwania,
wpiszemy tam fragmencik formularz
i nam się wyszukamy formularz
karta indeksowa, odpłaczkowujemy go.
Okej.
I okej.
I to samo robimy strzałką
numer 2.
Identycznie robimy strzałką numer 2.
Tak, prawy
klawisz, to jest to samo, bo to
wróci takim bumerangiem z powrotem,
dodaj element modelu,
karta indeksowa książki,
okej.
I teraz tak, klikamy linię życia...
Powinniśmy tych jeszcze kwadratów
przeciągnąć, żeby razem były wszystkie łączne?
Tak, to powinny być razem, wiesz tak,
czyli łączymy to, włączymy to,
na linii życia API
też to łączymy,
ten pionowy bar oznacza, że ten komponent
kontroluje ten wątek, tak, teraz klikamy
linię życia API karty katalogowe,
tą miniaturkę
przeciągamy na lewo,
miniaturkę łącznika na lewo,
puszczamy klawisz myszy
i wybieramy tą kropeczkę, o tą.
I tu już nic nie piszemy.
Tu już nic nie piszemy. Znaczy, narysowaliśmy
coś takiego.
Jak się przeciąga jeszcze raz na ostatnią?
Pokaż koledze jak to się robi.
Przytrzymamy, drag and drop
w lewo, puszczamy.
To jest tak zwany komunikat
porzucony, oddany, whatever.
To jest informacja, że
z perspektywy lewej,
jak komponent na API dostanie
polecenie nowa, to on
zwróci tą kartę. Niektórzy robią
kliknij prawym klawiszem tą myszę,
tą ósemkę, prawym klawiszem ósemkę kliknij,
specyfikacje,
dodaj,
element modelu,
dopisz tamten formularz. To już jest kwestia
konwencji, jaką ktoś przyjmuje, tak.
Wpisujemy ten formularz.
Czyli na polecenie dodaj i OK.
Na polecenie nowa, API nam
zwraca tego tam JSONa, XMLa, whatever.
I teraz tu widać
ten łańcuch odpowiedzialności.
Teraz zwróć uwagę na taką rzecz.
Klikamy prawym klawiszem na dwójkę.
Mamy
typ nie ujęty.
Klikamy to, bo to jest typ wywołania.
Nowy. Wywołanie.
Wywołanie.
Otwórz.
Na dole masz create operation nowa.
Robimy to dla każdej
strzałki. Dla trójki.
Czyli tak.
Typ nie ujęty.
Wywołanie. Nowa.
I to samo robimy dla piątki.
A czwórka też?
Czwórka nie. Czwórka to jest taka pseudooperacja.
To jest tylko, że właśnie ten obiekt powstał.
A piątki?
Piątka. Nowe wywołanie.
Typ wywołania. No nie ujęty.
Chyba już jest.
Ciekawe, że się nie pojawił.
Wybierz operację. Przepraszam.
Wybierz operację. Zobacz.
Bo to jest do siebie. Wybierz operację. Niżej.
I tutaj create. Bo to jest samo do siebie.
To jest operacja prywatna. Przełączcie się
na diagram class.
A te przerywane to chyba nie ma
tego, tej opcji.
Nie ma tam, bo to jest taka pseudooperacja.
To jest tylko stwierdzenie, że w tym momencie powstał nowy
obiekt, którego nie było. Na diagram class się przełączcie.
Zwróćcie uwagę, że macie tu operację tutaj.
Otóż diagram sekwencji
służy do sprawdzenia, czy to działa.
Jak to zadziała
i wyklikacie sobie tą operację, to na diagramie
class macie operację. To jest
visual. Takie narzędzia kontrolują
spójność projektu.
Trudno jest siedzieć nad takim diagramem
i wymyślać operację, a potem próbować
je urzędzić. Lepiej jest narysować
diagram sekwencji.
I jak ten diagram sekwencji się uda,
to będzie OK. W związku z tym te strzałeczki
są dobre. One mogą być operacjami.
Wszystko jest wymyślone.
Kończąc już, tak szybkie podsumowanie.
Jestem troszkę po czasie, ale tak szybciutko.
Otóż projektowanie
aplikacji od ogółu do szczegółu
daje nam ogromne panowanie
nad szczegółowością projektu
i nad jego logiką. Podział na komponenty
powoduje, że możemy pracować
iteracyjnie przyrostowo.
Jeżeli...
Zwróćcie uwagę, że operowanie
pojęciem tego dokumentu
nie ma żad...
Tutaj nie ma zakazu
stosowania modelu relacyjnego,
bo możemy sobie wyobrazić, że
operacja zachowaj, klasy,
koperta, karta katalogowa
to jest jakieś wyrafinowane zapytanie
SQL-owe, które zapisuje
ten formularz w jakiejś potężnej
relacyjnej bazie. Tylko, że my
na etapie tym nie musimy
tej decyzji podejmować.
Dwa, nie musimy tu projektować
żadnej skomplikowanej
relacyjnej bazy danych.
Bo jeżeli pójdziemy architekturą heksagonalną,
to znaczy, że baza...
Być może tam jest baza SQL-owa,
ale ona nie ma żadnej logiki.
100% logiki jest tu,
w kodzie, w tym kodzie,
który jest w ramach tego heksagonu.
Tu jest 100% wymagań
funkcjonalnych zrealizowanych.
Natomiast to, czy my
zapiszemy tego
JSON-a czy XML-a w jakimś
Mongo czy w MSSQL-u
na potężnej bazie relacyjnej
na 5000 tabel, z perspektywy
tego projektu nie ma żadnego znaczenia.
Możemy sobie wyobrazić
sytuację, w której ktoś
walcząc z wymaganiami
poza funkcjonalnymi
za 4 lata zmieni...
Przecież te karty katalogowe
przez pierwsze 2-3 lata
mogą być plikami XML na dysku twardym.
Gdybyśmy chcieli się potem
przenieść z powodów wydajnościowych
na lepszą platformę,
to nie musimy w tej aplikacji nic robić,
tylko zmienić kod operacji
zachowaj-przywołaj.
Zmiana dysku twardego na potężnego
Oracle'a czy tam Microsofta
będzie wymagało tylko i wyłącznie
zmiany kodu operacji zachowaj.
Nic więcej. Cała reszta logiki
jest nietknięta. To jest
ogromna korzyść z tego podejścia.
Także
a propos naszej dyskusji z Bartłomiejem.
Zwróć uwagę Bartłomiej,
że my na tym poziomie nie musimy...
Nie, ja zauważyłem to.
Teraz dotarło do mnie tak bardzo.
Ja patrzyłem na to naprawdę tak z punktu widzenia
już miliony tych, a jak na razie
to mogę mieć wszystko w jednym pliku nawet.
Tak, to znaczy, że w tej chwili możemy mieć aplikację
w jednym miejscu, 100% kodu logiki,
natomiast to, w jakim sposób,
w jaką metodą będą te dane utrwalane
i wydajność, nijak
się ma do tej logiki. To jest właśnie ogromny
plus takich projektów. Ta architektura
heksagonalna, bo tak naprawdę
w tym duchu żeśmy to zrobili, właśnie
stąd się wzięła, żeby tego nigdy nie mieszać.
To znaczy, że migracja do innej platformy
będzie relatywnie prosta.
Bo nawet jakbyście chcieli migrować
z tej innej bazy, to zwróćcie
uwagę, że przeniesienie danych
nie musicie pisać skomplikowanych skryptów
przenoszenia z tabel A
bazy A do tabel B, tylko
migrację możecie zrobić na poziomie tej koperty
czy tego repozytorium.
Wyciągamy poleceniem zachowaj,
to będzie trwało, ale będzie proste.
Wyciągamy poleceniem zachowaj, przywołaj,
czyli zmigrowanie
do innej bazy danych będzie wymagało
napisania nowej aplikacji, tam będą jakieś
inne zapytania SQLowe
na operacjach zachowaj, przechowaj, ale jeżeli
my zrobimy migrację na poziomie tego,
czyli przywołaj milion faktur
i polecenie zachowaj
w tym drugim repozytorium, to to pójdzie
bez pudła wszystko.
Dla codera to jest parę linijek kodu
i poczekanie dwóch, trzech,
czterech dni, a kto się przewali.
Chodzi o to, żeby nie pracować
na tych tabelach, tylko na logice
biznesowej, to jest mega wygodne.
Dobra słuchajcie, jakieś pytania, bo to są
ostatnie zajęcia. Jakby ktoś chciał
popytać, to piszcie do mnie.
Trochęśmy się rozgadali, ale mam nadzieję,
że wam to w czymś pomogło.
W każdym razie uczulam was jako praktyk
z perspektywy sponsora projektu
liczą się tylko i wyłącznie koszty
utrzymania i rozwoju, nic więcej.
Uwierzcie mi.
Dywagacje na poziomie religii
tej czy innej na platformach
starajcie się unikać takich dyskusji,
bo to można tylko przegrać.
Jak nie ma pytań, to dziękuję.
Ja mam jedno pytanie.
Wysyłałem do dzieka na to maila
odnośnie tematu, o który
się spytałem przed świętami,
jeżeli chodzi o dostęp do wykładów
prowadzonych przez pana.
No i nie dostałem informacji.
Od dziekanatu.
Wiesz co, powiem tak.
Tu musisz być dziekanatem.
Generalnie wykładowcy na uczelni
mają ograniczone te możliwości,
a ja w szczególności, bo jestem
tzw. wizytującym wykładowcą.
Ja w Ubiku widzę siebie,
a w dziekanacie widzę panią,
która mnie obsługuje,
ale ja nie wiem, co tam się wyprawia
pomiędzy wami a dziekanatem.
Ja widzę wszystkim.
Ja mogę pomóc absolutnie we wszystkim,
co dotyczy przedmiotu, który ja prowadzę
i sobie klikam w Ubi.
Cała reszta jest poza mną.
Ok, no dobra, to jakbym
w takim razie, jeżeli by mi się udało
z nimi skontaktować, to po prostu
napisać do pana maila, tak?
Chyba tak.
Ja rozumiem, że chodzi ci o zapisy,
bo to nie jesteś pierwszy z tym.
Chcesz dostęp do tych
nagrań i wykładów?
Z wykładów po prostu.
To zróbmy tak.
Ja muszę sprawdzić, gdzie one są dokładnie
w tych Teamsach, bo tam coś się zmieniło.
Jak z dziekanatu nie dostaniesz odpowiedzi,
to napisz do mnie
i ja ci wyślę link do tych nagrań.
Bo to mogę zrobić.
Michał Zawadzki, rączka też w górze.
Słucham.
Jedno to właśnie
a propos tych nagrań.
Potem dostanie pan od nas prośbę
o dostęp, bo pewnie
automatycznie będziemy mieli dostępu.
Muszę właśnie sprawdzić, jak to jest,
bo to się zmieniło w Teamsach.
Także napiszcie maila, żeby mi nie umknęło.
Ja najwyżej sam sobie tam wyjaśnię
z administratorem, co tam się wyprawia
z tymi nagraniami, bo ja mogę zawsze
jako wykładowca wam wysłać link
do nagrania konkretnego wykładu.
Do mojego oczywiście.
Póki pamiętam, pod koniec stycznia,
bo to wy macie już ostatnie zajęcia,
pod koniec stycznia w Teamsach
pojawi się takie zadanie, w którym
po prostu zaliczenie przedmiotu polega
na wysłaniu przez Teamsy do mnie
i już wam na początku mówiłem,
jak gdyby ktoś się pogubił, jak sobie
importować obrazki od kolegi czy koleżanki,
to nie jest jakoś tam specjalnie trudne.
Natomiast samo zaliczenie laboratorium
polega tylko na tym, że
w UBI dziekanat sprawdza obecności,
a ja odpłaszkowuję w Teamsach,
że plik VPP do mnie doszedł.
Tego jeszcze nie ma.
Na przełomie,
parę dni przed końcem semestru
czy na pierwszym dniu sesji
pojawią się w Teamsach dla was
dla grup zadania typu
prześlij plik.
I tak wygląda zaliczenie.
Coś jeszcze?
Jak nie ma, to tak mówię,
niektóre wykłady
jako treści są u mnie na blogu,
bo ten blog mi służy za
pisanie podręczników i skryptów.
Jakby ktoś chciał czegoś jeszcze tam
podrążyć, to piszcie do mnie.
A jak nie, to już nie trzymam,
jest niedziela, miłego dnia.
Dziękujemy wzajemnie.
Do widzenia.
Do widzenia.
Do widzenia.
